using iText.Kernel.Colors;
using iText.Kernel.Geom;
using iText.Kernel.Pdf.Action;
using iText.Kernel.Pdf.Navigation;
using iText.Layout.Borders;
using iText.Layout.Element;
using iText.Layout.Properties;
using Microsoft.AspNetCore.Identity;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using OreasModel;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using LicenseContext = OfficeOpenXml.LicenseContext;
using Border = iText.Layout.Borders.Border;
using System.Reflection.PortableExecutable;
using System.Text.RegularExpressions;
using Org.BouncyCastle.Ocsp;

namespace OreasServices
{
    public class WPTListRepository : IWPTList
    {
        private readonly OreasDbContext db;
        public WPTListRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        public async Task<object> GetGroupEmailListAsync(int DesignationID = 0, int DepartmentID = 0)
        {
                return await (from a in db.tbl_WPT_Employees.Where(w => w.InactiveDate == null && w.Email != null)
                              .Where(w =>
                                (DepartmentID > 0 && DesignationID > 0 && w.FK_tbl_WPT_Designation_ID == DesignationID && w.tbl_WPT_DepartmentDetail_Section.FK_tbl_WPT_Department_ID == DepartmentID)
                                ||
                                (DepartmentID > 0 && DesignationID == 0 && w.tbl_WPT_DepartmentDetail_Section.FK_tbl_WPT_Department_ID == DepartmentID)
                                ||
                                (DepartmentID == 0 && DesignationID > 0 && w.FK_tbl_WPT_Designation_ID == DesignationID)
                                ||
                                (DepartmentID == 0 && DesignationID == 0)
                            )
                              select new
                              {
                                  a.ID,
                                  a.Email
                              }).ToListAsync();
       
        }
        public async Task<object> GetDesignationListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_Designations
                              select new
                              {
                                  a.ID,
                                  a.Designation
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_Designations
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.Designation.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.Designation
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetEmployeeLevelListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_EmployeeLevels
                              select new
                              {
                                  a.ID,
                                  a.LevelName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_EmployeeLevels
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.LevelName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.LevelName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetEducationalLevelTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_EducationalLevelTypes
                              select new
                              {
                                  a.ID,
                                  a.LevelName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_EducationalLevelTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.LevelName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.LevelName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetHolidayListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_Holidays
                              select new
                              {
                                  a.ID,
                                  a.HolidayName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_Holidays
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.HolidayName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.HolidayName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetDepartmentListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_Departments
                              select new
                              {
                                  a.ID,
                                  a.DepartmentName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_Departments
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.DepartmentName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.DepartmentName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetSectionListAsync(string QueryName = "", string SecFilterByText = "", string SecFilterValueByText = "", int FormID = 0, string UserName = "")
        {
            var qry = from o in await db.VM_WPT_SectionSearchModals.FromSqlRaw("EXECUTE [dbo].[VM_WPT_SectionSearchModal] @QueryName={0}, @FilterBy={1}, @FilterValue={2}, @FormID={3}, @UserName={4}", QueryName, SecFilterByText, SecFilterValueByText, FormID, UserName).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.SectionName,
                          o.OtherDetail
                      };
            return qry;
        }
        public async Task<object> GetAllowanceTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_AllowanceTypes
                              select new
                              {
                                  a.ID,
                                  a.AllowanceName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_AllowanceTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.AllowanceName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.AllowanceName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetDeductibleTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_DeductibleTypes
                              select new
                              {
                                  a.ID,
                                  a.DeductibleName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_DeductibleTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.DeductibleName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.DeductibleName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetCalculationMethodListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_CalculationMethods
                              select new
                              {
                                  a.ID,
                                  a.MethodName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_CalculationMethods
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.MethodName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.MethodName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetOTPolicyListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_tbl_OTPolicys
                              select new
                              {
                                  a.ID,
                                  a.PolicyName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_tbl_OTPolicys
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.PolicyName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetBankListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from o in db.tbl_WPT_Bank_Branchs
                              select new
                              {
                                  o.ID,
                                  BankName = o.tbl_WPT_Bank.BankName + " [" + o.BranchCode + "]"
                              }).ToListAsync();
            else
                return await (from o in db.tbl_WPT_Bank_Branchs
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.tbl_WPT_Bank.BankName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  o.ID,
                                  BankName = o.tbl_WPT_Bank.BankName + " [" + o.BranchCode + "]"
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetCompanyBankAcListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from o in db.tbl_WPT_CompanyBankDetails
                              select new
                              {
                                  o.ID,
                                  BankAc = o.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.BankAccountNo + "]"
                              }).ToListAsync();
            else
                return await (from o in db.tbl_WPT_CompanyBankDetails
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  o.ID,
                                  BankAc = o.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.BankAccountNo + "]"
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetLoanTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_LoanTypes
                              select new
                              {
                                  a.ID,
                                  a.LoanType
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_LoanTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.LoanType.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.LoanType
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetEmploymentTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_EmploymentTypes
                              select new
                              {
                                  a.ID,
                                  a.TypeName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_EmploymentTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.TypeName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.TypeName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetHiringTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_HiringTypes
                              select new
                              {
                                  a.ID,
                                  a.TypeName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_HiringTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.TypeName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.TypeName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetRewardTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_RewardTypes
                              select new
                              {
                                  a.ID,
                                  a.RewardName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_RewardTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.RewardName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.RewardName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetInActiveTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_InActiveTypes
                              select new
                              {
                                  a.ID,
                                  a.InActiveType
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_InActiveTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.InActiveType.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.InActiveType
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetATypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_ATTypes
                              select new
                              {
                                  a.ID,
                                  a.ATType
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_ATTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.ATType.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.ATType
                              }).Take(5).ToListAsync();
        }

        //-----------------------------------------------------------------------------------------------------//
        public async Task<object> GetEmployeesListAsync(string QueryName = "", string EmployeeFilterBy = "", string EmployeeFilterValue = "", int FormID = 0)
        {

            var qry = from o in await db.VM_WPT_EmployeeSearchModals.FromSqlRaw("EXECUTE [dbo].[VM_WPT_EmployeeSearchModal] @QueryName={0}, @FilterBy={1}, @FilterValue={2}, @FormID={3}", QueryName, EmployeeFilterBy, EmployeeFilterValue, FormID).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.EmployeeNo,
                          o.EmployeeName,
                          o.ATEnrollmentNo_Default,
                          o.Department,
                          o.Designation,
                          o.LevelName,
                          o.photo,
                          o.OtherInfo
                      };
            return qry;
        }
        public async Task<object> GetLeavePoliciesWithBalanceByEmployeeListAsync(string QueryName = "", int EmployeeID = 0, int MonthID = 0)
        {
            var qry = from o in await db.VM_WPT_LeavePolicySearchModals.FromSqlRaw("EXECUTE [dbo].[VM_WPT_LeavePolicySearchModal] @QueryName={0}, @EmployeeID={1}, @MonthID={2}", QueryName, EmployeeID, MonthID).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PolicyPrefix,
                          o.MonthBalance,
                          o.AnnualBalance,
                          o.LeaveType
                      };
            return qry;
        }
        public async Task<object> GetMonthListAsync(string QueryName = "", int SearchMonth = 1, int SearchYear = 2000, int FormID = 0)
        {

            var qry = from o in await db.tbl_WPT_CalendarYear_Monthss
                      .Where(w =>
                                QueryName == "All"
                                ||
                                QueryName == "Open" && w.IsClosed == false
                                ||
                                QueryName == "Closed" && w.IsClosed == true
                                )
                      .Where(w =>
                          (
                            w.MonthStart.Year == SearchYear
                            ||
                            w.MonthEnd.Year == SearchYear
                          )
                          &&
                          (
                            w.MonthStart.Month == SearchMonth
                            ||
                            w.MonthEnd.Month == SearchMonth
                          )
                      ).Distinct().ToListAsync()
                      select new { o.ID, MonthStart = o.MonthStart.ToString("dd-MMM-yyyy"), MonthEnd = o.MonthEnd.ToString("dd-MMM-yyyy"), o.IsClosed, CalendarYearID = o.FK_tbl_WPT_CalendarYear_ID, o.tbl_WPT_CalendarYear.CalendarYear };
            return qry;
        }

        //---------------------------------------------------------------------------------------------------//
        public async Task<object> GetShiftListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_Shifts
                              select new
                              {
                                  a.ID,
                                  a.ShiftName,
                                  a.Prefix
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_Shifts
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.ShiftName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.ShiftName,
                                  a.Prefix
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetTransactionModeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_TransactionModes
                              select new
                              {
                                  a.ID,
                                  a.TransactionMode
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_TransactionModes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.TransactionMode.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.TransactionMode
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetWageCalculationTypeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_WageCalculationTypes
                              select new
                              {
                                  a.ID,
                                  a.CalculationName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_WageCalculationTypes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.CalculationName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.CalculationName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetATInOutModeListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_ATInOutModes
                              select new
                              {
                                  a.ID,
                                  a.ATInOutMode,
                                  a.ATInOutModeName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_ATInOutModes
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.ATInOutModeName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.ATInOutMode,
                                  a.ATInOutModeName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetLeaveCFOptionsListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_LeaveCFOptionss
                              select new
                              {
                                  a.ID,
                                  a.CFOption
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_LeaveCFOptionss
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.CFOption.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.CFOption
                              }).Take(5).ToListAsync();
        }
        public object GetEncashablePeriodList()
        {
            //  return new { new { ID = "AT YEAR END", Value= "AT YEAR END" } };
            return new[]
            {
                new { ID = "AT YEAR END", Value = "AT YEAR END" },
                new { ID = "AT MONTH END", Value = "AT MONTH END" }
            }.ToList();

        }
        public async Task<object> GetPaidLeavePolicyListAsync(string FilterByText = null, string FilterValueByText = null)
        {
            if (string.IsNullOrEmpty(FilterByText))
                return await (from a in db.tbl_WPT_LeavePolicys
                              select new
                              {
                                  a.ID,
                                  a.PolicyName
                              }).ToListAsync();
            else
                return await (from a in db.tbl_WPT_LeavePolicys
                                        .Where(w => string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower()))
                              select new
                              {
                                  a.ID,
                                  a.PolicyName
                              }).Take(5).ToListAsync();
        }
        public async Task<object> GetActionList()
        {
            //  return new { new { ID = "AT YEAR END", Value= "AT YEAR END" } };
            return await(from a in db.tbl_WPT_ActionLists
                         select new
                         {
                             a.ID,
                             a.ActionName,
                             a.ActionValue
                         }).ToListAsync();

        }
        public async Task<object> GetIncrementByList()
        {
            //  return new { new { ID = "AT YEAR END", Value= "AT YEAR END" } };
            return await (from a in db.tbl_WPT_IncrementBys
                          select new
                          {
                              a.ID,
                              a.IncrementBy
                          }).ToListAsync();
        }

        public async Task<object> GetIncentiveTypeList()
        {
            //  return new { new { ID = "AT YEAR END", Value= "AT YEAR END" } };
            return await (from a in db.tbl_WPT_IncentiveTypes
                          select new
                          {
                              a.ID,
                              a.IncentiveType
                          }).ToListAsync();
        }

    }
    public class DesignationRepository : IDesignation
    {

        private readonly OreasDbContext db;
        public DesignationRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_Designations.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.Designation,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLDesignation()
        {
            return new[]
            {
                new { n = "by Designation", v = "byName" }
            }.ToList();
        }

        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Designations
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Designations
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.Designation,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> Post(tbl_WPT_Designation tbl_WPT_designation, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_designation.CreatedBy = userName;
                tbl_WPT_designation.CreatedDate = DateTime.Now;
                db.tbl_WPT_Designations.Add(tbl_WPT_designation);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_designation.ModifiedBy = userName;
                tbl_WPT_designation.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_designation).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Designations.Remove(db.tbl_WPT_Designations.Find(tbl_WPT_designation.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        public List<ReportCallingModel> GetRLDesignation()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Leave Monthly Usage List",
                    GroupBy = new List<string>(){ "Department", "Designation"},
                    OrderBy = new List<string>(){ "ATNo","Department", "Designation" },
                    SeekBy = new List<string>(){ "Open", "Closed", "All" }
                }
            };
        }

        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0)
        {
            if (rn == "Leave Monthly Usage List")
            {
                // return LeaveMonthlyUsageListAsync(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID);
                return await Task.Run(() => LeaveMonthlyUsageListAsync(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }

        private byte[] LeaveMonthlyUsageListAsync(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0)
        {



            //--------------------Data Reader-------------------------//
            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "SELECT [ID] FROM [dbo].[tbl_WPT_ActionList] where ID=@ID";
                command.CommandType = CommandType.Text;

                var IDparameter = command.CreateParameter();
                IDparameter.ParameterName = "@ID";
                IDparameter.Value = 1;
                IDparameter.DbType = DbType.Int32;

                command.Parameters.Add(IDparameter);

                command.Connection.Open();



                using (var result = command.ExecuteReader())
                {
                    while (result.Read())
                    {
                        var a = result[0].ToString();
                    }

                }
            }

            ////------------------------------DataSet -------------------------//
            //var dataSet = new DataSet();
            //using (var sqlCmd = db.Database.GetDbConnection().CreateCommand())
            //{
            //    sqlCmd.CommandType = CommandType.Text;
            //    sqlCmd.CommandText = "SELECT [ID] FROM [dbo].[tbl_WPT_ActionList]";
            //    // sqlCmd.Parameters.Add( new SqlParameter( "@Parameter", value ) );
            //    // sqlCmd.Parameters.Add( new SqlParameter( "@Error", null ) { Direction = ParameterDirection.Output, Size = -1 } );

            //    // Define the data adapter and fill the dataset 
            //    using (System.Data.Common.DbDataAdapter da = new Microsoft.Data.SqlClient.SqlDataAdapter())
            //    {
            //        da.SelectCommand = sqlCmd;
            //        da.Fill(dataSet);
            //        var a = dataSet.Tables[0].Rows[0].ItemArray[0].ToString();
            //    }
            //    // resultDetail.Error = sqlCmd.Parameters["@Error"].Value.ToString();
            //}


            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- Leave Monthly Usage List " + SeekBy + "-----", false);


            /////////////------------------------------table for Detail 23------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05), //S.No
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05), //ATNO
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.17),  //Name
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.13),  //Policy Name
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05),  //Policy Leave
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.06),  //Apply Month                        
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.06),  //Expire Month
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05),  //Opening
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.04),  //Allowed From Next Year
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05),  //Annual Usage
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05)  //Balance
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }

    }
    public class EmployeeLevelRepository : IEmployeeLevel
    {
        private readonly OreasDbContext db;
        public EmployeeLevelRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        

        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeeLevels.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.LevelName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLEmployeeLevel()
        {
            return new[]
            {
                new { n = "by Employee Level Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeeLevels
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.LevelName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeeLevels
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.LevelName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.LevelName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> Post(tbl_WPT_EmployeeLevel tbl_WPT_EmployeeLevel, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EmployeeLevel.CreatedBy = userName;
                tbl_WPT_EmployeeLevel.CreatedDate = DateTime.Now;
                db.tbl_WPT_EmployeeLevels.Add(tbl_WPT_EmployeeLevel);
                await db.SaveChangesAsync();
               
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmployeeLevel.ModifiedBy = userName;
                tbl_WPT_EmployeeLevel.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EmployeeLevel).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EmployeeLevels.Remove(db.tbl_WPT_EmployeeLevels.Find(tbl_WPT_EmployeeLevel.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class EducationalLevelTypeRepository : IEducationalLevelType
    {
        private readonly OreasDbContext db;
        public EducationalLevelTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_EducationalLevelTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.LevelName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLEducationalLevelType()
        {
            return new[]
            {
                new { n = "by Educational Level Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EducationalLevelTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.LevelName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EducationalLevelTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.LevelName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.LevelName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> Post(tbl_WPT_EducationalLevelType tbl_WPT_EducationalLevelType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EducationalLevelType.CreatedBy = userName;
                tbl_WPT_EducationalLevelType.CreatedDate = DateTime.Now;
                db.tbl_WPT_EducationalLevelTypes.Add(tbl_WPT_EducationalLevelType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EducationalLevelType.ModifiedBy = userName;
                tbl_WPT_EducationalLevelType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EducationalLevelType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EducationalLevelTypes.Remove(db.tbl_WPT_EducationalLevelTypes.Find(tbl_WPT_EducationalLevelType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class HolidayRepository : IHoliday
    {
        private readonly OreasDbContext db;
        public HolidayRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_Holidays.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.HolidayName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLHoliday()
        {
            return new[]
            {
                new { n = "by Holiday Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Holidays
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.HolidayName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Holidays
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.HolidayName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.HolidayName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_Holiday tbl_WPT_Holiday, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_Holiday.CreatedBy = userName;
                tbl_WPT_Holiday.CreatedDate = DateTime.Now;
                db.tbl_WPT_Holidays.Add(tbl_WPT_Holiday);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_Holiday.ModifiedBy = userName;
                tbl_WPT_Holiday.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_Holiday).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Holidays.Remove(db.tbl_WPT_Holidays.Find(tbl_WPT_Holiday.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class DepartmentRepository : IDepartment
    {
        private readonly OreasDbContext db;
        public DepartmentRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Master

        public async Task<object> GetNodesAsync(int PID = 0)
        {
            List<TreeView_Department> treenodes = new List<TreeView_Department>();
            if (PID >= 0)
            {
                var rootNodes = await db.tbl_WPT_Departments.Where(i => (i.FK_tbl_WPT_Department_ID_Head ?? 0) == PID).ToListAsync();
                int _ChildCount = 0;
                foreach (var nodes in rootNodes)
                {
                    _ChildCount = await db.tbl_WPT_Departments.Where(i => i.FK_tbl_WPT_Department_ID_Head == nodes.ID).CountAsync();

                    treenodes.Add(new TreeView_Department()
                    {
                        ID = nodes.ID,
                        DepartmentName = nodes.DepartmentName,
                        ParentID = nodes.FK_tbl_WPT_Department_ID_Head ?? 0,
                        ChildCount = _ChildCount,
                        spacing = "",
                        sign = (_ChildCount > 0) ? "+" : ""
                    });
                }

            }
            return treenodes;
        }
        public async Task<object> GetDepartment(int id)
        {
            var qry = from o in await db.tbl_WPT_Departments.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DepartmentName,
                          o.FK_tbl_WPT_Department_ID_Head,
                          FK_tbl_WPT_Department_ID_HeadName = o.FK_tbl_WPT_Department_ID_Head.HasValue ? o.tbl_WPT_Department_Head.DepartmentName : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          ChildCount = o.tbl_WPT_Department_Heads.Count()
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLDepartment()
        {
            return new[]
            {
                new { n = "by Department Name", v = "byDepartmentName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadDepartment(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Departments
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDepartmentName" && w.DepartmentName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Departments
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDepartmentName" && w.DepartmentName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.DepartmentName,
                          o.FK_tbl_WPT_Department_ID_Head,
                          FK_tbl_WPT_Department_ID_HeadName = o.FK_tbl_WPT_Department_ID_Head.HasValue ? o.tbl_WPT_Department_Head.DepartmentName : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfHOSs = db.tbl_WPT_DepartmentDetail_Section_HOSs.Where(w => w.tbl_WPT_DepartmentDetail_Section.tbl_WPT_Department.ID == o.ID).Count(),
                          NoOfDesignations = o.tbl_WPT_DepartmentDetails.Count(),
                          NoOfReqEmployees = o.tbl_WPT_DepartmentDetails?.Sum(s => (int?)s.NoOfEmployees) ?? 0,
                          NoOfSections = o.tbl_WPT_DepartmentDetail_Sections.Count(),
                          ChildCount = o.tbl_WPT_Department_Heads.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostDepartment(tbl_WPT_Department tbl_WPT_Department, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_Department.CreatedBy = userName;
                tbl_WPT_Department.CreatedDate = DateTime.Now;
                db.tbl_WPT_Departments.Add(tbl_WPT_Department);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_Department.ModifiedBy = userName;
                tbl_WPT_Department.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_Department).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Departments.Remove(db.tbl_WPT_Departments.Find(tbl_WPT_Department.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Detail Designation

        public async Task<object> GetDepartmentDesignation(int id)
        {
            var qry = from o in await db.tbl_WPT_DepartmentDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Department_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.NoOfEmployees,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLDepartmentDesignation()
        {
            return new[]
            {
                new { n = "by Designation", v = "byDesignation" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadDepartmentDesignation(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_DepartmentDetails
                                               .Where(w => w.FK_tbl_WPT_Department_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_DepartmentDetails
                                  .Where(w => w.FK_tbl_WPT_Department_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Department_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.NoOfEmployees,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfActiveEmployees = db.tbl_WPT_Employees.Where(w => w.tbl_WPT_DepartmentDetail_Section.FK_tbl_WPT_Department_ID == o.FK_tbl_WPT_Department_ID && w.FK_tbl_WPT_Designation_ID == o.FK_tbl_WPT_Designation_ID && w.InactiveDate == null).Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostDepartmentDesignation(tbl_WPT_DepartmentDetail tbl_WPT_DepartmentDetail, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_DepartmentDetail.CreatedBy = userName;
                tbl_WPT_DepartmentDetail.CreatedDate = DateTime.Now;
                db.tbl_WPT_DepartmentDetails.Add(tbl_WPT_DepartmentDetail);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_DepartmentDetail.ModifiedBy = userName;
                tbl_WPT_DepartmentDetail.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_DepartmentDetail).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_DepartmentDetails.Remove(db.tbl_WPT_DepartmentDetails.Find(tbl_WPT_DepartmentDetail.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }


        #endregion

        #region Detail Section

        public async Task<object> GetDepartmentSection(int id)
        {
            var qry = from o in await db.tbl_WPT_DepartmentDetail_Sections.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Department_ID,
                          o.SectionName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLDepartmentSection()
        {
            return new[]
            {
                new { n = "by Section", v = "bySectionName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadDepartmentSection(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_DepartmentDetail_Sections
                                               .Where(w => w.FK_tbl_WPT_Department_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "bySectionName" && w.SectionName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_DepartmentDetail_Sections
                                  .Where(w => w.FK_tbl_WPT_Department_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "bySectionName" && w.SectionName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Department_ID,
                          o.SectionName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfHOS = o.tbl_WPT_DepartmentDetail_Section_HOSs.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostDepartmentSection(tbl_WPT_DepartmentDetail_Section tbl_WPT_DepartmentDetail_Section, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_DepartmentDetail_Section.CreatedBy = userName;
                tbl_WPT_DepartmentDetail_Section.CreatedDate = DateTime.Now;
                db.tbl_WPT_DepartmentDetail_Sections.Add(tbl_WPT_DepartmentDetail_Section);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_DepartmentDetail_Section.ModifiedBy = userName;
                tbl_WPT_DepartmentDetail_Section.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_DepartmentDetail_Section).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_DepartmentDetail_Sections.Remove(db.tbl_WPT_DepartmentDetail_Sections.Find(tbl_WPT_DepartmentDetail_Section.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Detail Section HOS

        public async Task<object> GetDepartmentSectionHOS(int id)
        {
            var qry = from o in await db.tbl_WPT_DepartmentDetail_Section_HOSs.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_DepartmentDetail_Section_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLDepartmentSectionHOS()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadDepartmentSectionHOS(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_DepartmentDetail_Section_HOSs
                                               .Where(w => w.FK_tbl_WPT_DepartmentDetail_Section_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_DepartmentDetail_Section_HOSs
                                  .Where(w => w.FK_tbl_WPT_DepartmentDetail_Section_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_DepartmentDetail_Section_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostDepartmentSectionHOS(tbl_WPT_DepartmentDetail_Section_HOS tbl_WPT_DepartmentDetail_Section_HOS, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_DepartmentDetail_Section_HOS.CreatedBy = userName;
                tbl_WPT_DepartmentDetail_Section_HOS.CreatedDate = DateTime.Now;
                db.tbl_WPT_DepartmentDetail_Section_HOSs.Add(tbl_WPT_DepartmentDetail_Section_HOS);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_DepartmentDetail_Section_HOS.ModifiedBy = userName;
                tbl_WPT_DepartmentDetail_Section_HOS.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_DepartmentDetail_Section_HOS).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_DepartmentDetail_Section_HOSs.Remove(db.tbl_WPT_DepartmentDetail_Section_HOSs.Find(tbl_WPT_DepartmentDetail_Section_HOS.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }



        #endregion
    }
    public class AllowanceTypeRepository : IAllowanceType
    {
        private readonly OreasDbContext db;
        public AllowanceTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_AllowanceTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.AllowanceName,
                          o.Prefix,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLAllowanceType()
        {
            return new[]
            {
                new { n = "by Allowance Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_AllowanceTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.AllowanceName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_AllowanceTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.AllowanceName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.AllowanceName,
                          o.Prefix,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_AllowanceType tbl_WPT_AllowanceType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_AllowanceType.CreatedBy = userName;
                tbl_WPT_AllowanceType.CreatedDate = DateTime.Now;
                db.tbl_WPT_AllowanceTypes.Add(tbl_WPT_AllowanceType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_AllowanceType.ModifiedBy = userName;
                tbl_WPT_AllowanceType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_AllowanceType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_AllowanceTypes.Remove(db.tbl_WPT_AllowanceTypes.Find(tbl_WPT_AllowanceType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class DeductibleTypeRepository : IDeductibleType
    {
        private readonly OreasDbContext db;
        public DeductibleTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_DeductibleTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DeductibleName,
                          o.Prefix,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLDeductibleType()
        {
            return new[]
            {
                new { n = "by Deductible Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_DeductibleTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.DeductibleName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_DeductibleTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.DeductibleName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.DeductibleName,
                          o.Prefix,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_DeductibleType tbl_WPT_DeductibleType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_DeductibleType.CreatedBy = userName;
                tbl_WPT_DeductibleType.CreatedDate = DateTime.Now;
                db.tbl_WPT_DeductibleTypes.Add(tbl_WPT_DeductibleType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_DeductibleType.ModifiedBy = userName;
                tbl_WPT_DeductibleType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_DeductibleType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_DeductibleTypes.Remove(db.tbl_WPT_DeductibleTypes.Find(tbl_WPT_DeductibleType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class OTPolicyRepository : IOTPolicy
    {
        private readonly OreasDbContext db;
        public OTPolicyRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
       
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_tbl_OTPolicys.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.FixedRate,
                          o.MaximumLimitRate,
                          o.MultiplyFactor,
                          o.FK_tbl_WPT_CalculationMethod_ID,
                          FK_tbl_WPT_CalculationMethod_IDName = o.tbl_WPT_CalculationMethod?.MethodName ?? "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLOTPolicy()
        {
            return new[]
            {
                new { n = "by Policy Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_tbl_OTPolicys
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_tbl_OTPolicys
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.FixedRate,
                          o.MaximumLimitRate,
                          o.MultiplyFactor,
                          o.FK_tbl_WPT_CalculationMethod_ID,
                          FK_tbl_WPT_CalculationMethod_IDName = o.tbl_WPT_CalculationMethod?.MethodName ?? "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_tbl_OTPolicy tbl_WPT_tbl_OTPolicy, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_tbl_OTPolicy.CreatedBy = userName;
                tbl_WPT_tbl_OTPolicy.CreatedDate = DateTime.Now;
                db.tbl_WPT_tbl_OTPolicys.Add(tbl_WPT_tbl_OTPolicy);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_tbl_OTPolicy.ModifiedBy = userName;
                tbl_WPT_tbl_OTPolicy.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_tbl_OTPolicy).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_tbl_OTPolicys.Remove(db.tbl_WPT_tbl_OTPolicys.Find(tbl_WPT_tbl_OTPolicy.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class BankRepository : IBank
    {

        private readonly OreasDbContext db;
        public BankRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        #region Bank Master
        public async Task<object> GetBankMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_Banks.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.BankName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLBankMaster()
        {
            return new[]
            {
                new { n = "by Bank Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadBankMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Banks
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.BankName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Banks
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.BankName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.BankName,
                          Branches = o.tbl_WPT_Bank_Branchs?.Count() ?? 0,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfCompanyAc = db.tbl_WPT_CompanyBankDetails.Count(c => c.tbl_WPT_Bank_Branch.ID == o.ID),
                          NoOfEmpAc = db.tbl_WPT_EmployeeBankDetails.Count(c => c.FK_tbl_WPT_Bank_Branch_ID == o.ID)
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostBankMaster(tbl_WPT_Bank tbl_WPT_Bank, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_Bank.CreatedBy = userName;
                tbl_WPT_Bank.CreatedDate = DateTime.Now;
                db.tbl_WPT_Banks.Add(tbl_WPT_Bank);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_Bank.ModifiedBy = userName;
                tbl_WPT_Bank.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_Bank).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Banks.Remove(db.tbl_WPT_Banks.Find(tbl_WPT_Bank.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        #endregion

        #region Bank Detail Branch
        public async Task<object> GetBankDetailBranch(int id)
        {
            var qry = from o in await db.tbl_WPT_Bank_Branchs.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Bank_ID,
                          o.BranchName,
                          o.BranchCode,
                          o.City,
                          o.PostalAddress,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLBankDetailBranch()
        {
            return new[]
            {
                new { n = "by Branch Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadBankDetailBranch(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            
          
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Bank_Branchs
                                               .Where(w => w.FK_tbl_WPT_Bank_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.BranchName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Bank_Branchs
                                  .Where(w => w.FK_tbl_WPT_Bank_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.BranchName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Bank_ID,
                          o.BranchName,
                          o.BranchCode,
                          o.City,
                          o.PostalAddress,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfCompanyAc = o.tbl_WPT_CompanyBankDetails.Count(),
                          NoOfEmpAc = o.tbl_WPT_EmployeeBankDetails.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public void test() { }
        public async Task<string> PostBankDetailBranch(tbl_WPT_Bank_Branch tbl_WPT_Bank_Branch, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_Bank_Branch.CreatedBy = userName;
                tbl_WPT_Bank_Branch.CreatedDate = DateTime.Now;
                db.tbl_WPT_Bank_Branchs.Add(tbl_WPT_Bank_Branch);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_Bank_Branch.ModifiedBy = userName;
                tbl_WPT_Bank_Branch.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_Bank_Branch).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Bank_Branchs.Remove(db.tbl_WPT_Bank_Branchs.Find(tbl_WPT_Bank_Branch.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        #endregion

        #region Bank Detail Branch Company Ac
        public async Task<object> GetBankDetailBranchCompanyAc(int id)
        {
            var qry = from o in await db.tbl_WPT_CompanyBankDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Bank_Branch_ID,
                          o.BankAccountNo,
                          o.BankAccountTitle,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLBankDetailBranchCompanyAc()
        {
            return new[]
            {
                new { n = "by Account No", v = "byAccountNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadBankDetailBranchCompanyAc(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_CompanyBankDetails
                                               .Where(w => w.FK_tbl_WPT_Bank_Branch_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byAccountNo" && w.BankAccountNo.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CompanyBankDetails
                                  .Where(w => w.FK_tbl_WPT_Bank_Branch_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byAccountNo" && w.BankAccountNo.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Bank_Branch_ID,
                          o.BankAccountNo,
                          o.BankAccountTitle,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostBankDetailBranchCompanyAc(tbl_WPT_CompanyBankDetail tbl_WPT_CompanyBankDetail, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_CompanyBankDetail.CreatedBy = userName;
                tbl_WPT_CompanyBankDetail.CreatedDate = DateTime.Now;
                db.tbl_WPT_CompanyBankDetails.Add(tbl_WPT_CompanyBankDetail);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_CompanyBankDetail.ModifiedBy = userName;
                tbl_WPT_CompanyBankDetail.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_CompanyBankDetail).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_CompanyBankDetails.Remove(db.tbl_WPT_CompanyBankDetails.Find(tbl_WPT_CompanyBankDetail.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        #endregion

        #region Bank Detail Branch Employee Ac
        public async Task<object> GetBankDetailBranchEmployeeAc(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeeBankDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Bank_Branch_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.BankAccountNo,
                          o.BankAccountTitle,
                          o.IsDefaultForBank,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLBankDetailBranchEmployeeAc()
        {
            return new[]
            {
                new { n = "by Account No", v = "byAccountNo" }, new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadBankDetailBranchEmployeeAc(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeeBankDetails
                                               .Where(w => w.FK_tbl_WPT_Bank_Branch_ID == MasterID)
                                               .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byAccountNo" && w.BankAccountNo.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeeBankDetails
                                  .Where(w => w.FK_tbl_WPT_Bank_Branch_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byAccountNo" && w.BankAccountNo.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Bank_Branch_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.BankAccountNo,
                          o.BankAccountTitle,
                          o.IsDefaultForBank,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostBankDetailBranchEmployeeAc(tbl_WPT_EmployeeBankDetail tbl_WPT_EmployeeBankDetail, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100 };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_EmployeeBankDetail.CreatedBy = userName;
                tbl_WPT_EmployeeBankDetail.CreatedDate = DateTime.Now;
                //db.tbl_WPT_EmployeeBankDetails.Add(tbl_WPT_EmployeeBankDetail);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmployeeBankDetail.ModifiedBy = userName;
                tbl_WPT_EmployeeBankDetail.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_EmployeeBankDetail).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_EmployeeBankDetails.Remove(db.tbl_WPT_EmployeeBankDetails.Find(tbl_WPT_EmployeeBankDetail.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_EmployeeBank] 
                       @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                       ,@ID={3},@FK_tbl_WPT_Employee_ID={4},@FK_tbl_WPT_Bank_Branch_ID={5},@BankAccountNo={6},@BankAccountTitle={7},
                       @IsDefaultForBank={8},@CreatedBy={9},@CreatedDate={10},@ModifiedBy={11},@ModifiedDate={12}",
                       CRUD_Type, CRUD_Msg, CRUD_ID,
                       tbl_WPT_EmployeeBankDetail.ID, tbl_WPT_EmployeeBankDetail.FK_tbl_WPT_Employee_ID, tbl_WPT_EmployeeBankDetail.FK_tbl_WPT_Bank_Branch_ID,
                       tbl_WPT_EmployeeBankDetail.BankAccountNo, tbl_WPT_EmployeeBankDetail.BankAccountTitle, tbl_WPT_EmployeeBankDetail.IsDefaultForBank,
                       tbl_WPT_EmployeeBankDetail.CreatedBy, tbl_WPT_EmployeeBankDetail.CreatedDate, tbl_WPT_EmployeeBankDetail.ModifiedBy, tbl_WPT_EmployeeBankDetail.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }


        #endregion

    }
    public class LoanTypeRepository : ILoanType
    {
        private readonly OreasDbContext db;
        public LoanTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
       
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_LoanTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.LoanType,
                          o.Prefix,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLLoanType()
        {
            return new[]
            {
                new { n = "by Loan Type", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LoanTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.LoanType.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LoanTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.LoanType.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.LoanType,
                          o.Prefix,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_LoanType tbl_WPT_LoanType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_LoanType.CreatedBy = userName;
                tbl_WPT_LoanType.CreatedDate = DateTime.Now;
                db.tbl_WPT_LoanTypes.Add(tbl_WPT_LoanType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LoanType.ModifiedBy = userName;
                tbl_WPT_LoanType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_LoanType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_LoanTypes.Remove(db.tbl_WPT_LoanTypes.Find(tbl_WPT_LoanType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }


    }
    public class EmploymentTypeRepository : IEmploymentType
    {
        private readonly OreasDbContext db;
        public EmploymentTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_EmploymentTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.TypeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLEmploymentType()
        {
            return new[]
            {
                new { n = "by Type Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmploymentTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.TypeName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmploymentTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.TypeName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.TypeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_EmploymentType tbl_WPT_EmploymentType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EmploymentType.CreatedBy = userName;
                tbl_WPT_EmploymentType.CreatedDate = DateTime.Now;
                db.tbl_WPT_EmploymentTypes.Add(tbl_WPT_EmploymentType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmploymentType.ModifiedBy = userName;
                tbl_WPT_EmploymentType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EmploymentType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EmploymentTypes.Remove(db.tbl_WPT_EmploymentTypes.Find(tbl_WPT_EmploymentType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class HiringTypeRepository : IHiringType
    {
        private readonly OreasDbContext db;
        public HiringTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_HiringTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.TypeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLHiringType()
        {
            return new[]
            {
                new { n = "by Type Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
          
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_HiringTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.TypeName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_HiringTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.TypeName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      { 
                          o.ID,
                          o.TypeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


           pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_HiringType tbl_WPT_HiringType, string operation = "", string userName = "")
        {            
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value="Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_HiringType.CreatedBy = userName;
                tbl_WPT_HiringType.CreatedDate = DateTime.Now;
                //db.tbl_WPT_HiringTypes.Add(tbl_WPT_HiringType);
                //await db.SaveChangesAsync();
                
                CRUD_Type.Value = "Insert";

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_HiringType.ModifiedBy = userName;
                tbl_WPT_HiringType.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_HiringType).State = EntityState.Modified;
                //await db.SaveChangesAsync();

                CRUD_Type.Value = "Update";         

            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_HiringTypes.Remove(db.tbl_WPT_HiringTypes.Find(tbl_WPT_HiringType.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
                

            }
           
            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_HiringType] 
                @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT,@ID={3},@TypeName={4},@CreatedBy={5},@CreatedDate={6},@ModifiedBy={7},@ModifiedDate={8}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_HiringType.ID, tbl_WPT_HiringType.TypeName,
                tbl_WPT_HiringType.CreatedBy, tbl_WPT_HiringType.CreatedDate, tbl_WPT_HiringType.ModifiedBy, tbl_WPT_HiringType.ModifiedDate);           


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }

    }
    public class RewardTypeRepository : IRewardType
    {
        private readonly OreasDbContext db;
        public RewardTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_RewardTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.RewardName,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLRewardType()
        {
            return new[]
            {
                new { n = "by Type Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_RewardTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.RewardName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_RewardTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.RewardName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.RewardName,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_RewardType tbl_WPT_RewardType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_RewardType.CreatedBy = userName;
                tbl_WPT_RewardType.CreatedDate = DateTime.Now;
                db.tbl_WPT_RewardTypes.Add(tbl_WPT_RewardType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_RewardType.ModifiedBy = userName;
                tbl_WPT_RewardType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_RewardType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_RewardTypes.Remove(db.tbl_WPT_RewardTypes.Find(tbl_WPT_RewardType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class InActiveTypeRepository : IInActiveType
    {
        private readonly OreasDbContext db;
        public InActiveTypeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_InActiveTypes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.InActiveType
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLInActiveType()
        {
            return new[]
            {
                new { n = "by InActive Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_InActiveTypes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.InActiveType.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_InActiveTypes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.InActiveType.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.InActiveType
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_InActiveType tbl_WPT_InActiveType, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                //tbl_WPT_InActiveType.CreatedBy = userName;
                //tbl_WPT_InActiveType.CreatedDate = DateTime.Now;
                db.tbl_WPT_InActiveTypes.Add(tbl_WPT_InActiveType);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                //tbl_WPT_InActiveType.ModifiedBy = userName;
                //tbl_WPT_InActiveType.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_InActiveType).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_InActiveTypes.Remove(db.tbl_WPT_InActiveTypes.Find(tbl_WPT_InActiveType.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class EmployeeRepository : IEmployee
    {
        private readonly OreasDbContext db;
        public EmployeeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        
        #region Employee       

        public async Task<object> GetEmployee(int ID)
        {
            var tbl_WPT_Employee = (from o in await db.tbl_WPT_Employees.Where(w => w.ID == ID).ToListAsync()
                                    select new
                                    {
                                        o.ID,
                                        o.EmployeeNo,
                                        o.FK_tbl_WPT_EmploymentType_ID,
                                        FK_tbl_WPT_EmploymentType_IDName = o.tbl_WPT_EmploymentType.TypeName,
                                        o.FK_tbl_WPT_DepartmentDetail_Section_ID,
                                        FK_tbl_WPT_DepartmentDetail_Section_IDName = o.tbl_WPT_DepartmentDetail_Section.SectionName,
                                        o.FK_tbl_WPT_Designation_ID,
                                        FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                                        o.FK_tbl_WPT_EmployeeLevel_ID,
                                        FK_tbl_WPT_EmployeeLevel_IDName = o.tbl_WPT_EmployeeLevel.LevelName,
                                        o.FK_tbl_WPT_Shift_ID_Default,
                                        FK_tbl_WPT_Shift_ID_DefaultName = o.tbl_WPT_Shift.ShiftName,
                                        o.ATEnrollmentNo_Default,
                                        o.FK_tbl_WPT_ATType_ID,
                                        FK_tbl_WPT_ATType_IDName = o.tbl_WPT_ATType.ATType,
                                        JoiningDate = o.JoiningDate.ToString("dd-MMM-yyyy"),
                                        InactiveDate = o.InactiveDate.HasValue ? o.InactiveDate.Value.ToString("dd-MMM-yyyy") : null,
                                        o.FK_tbl_WPT_InActiveType_ID,
                                        FK_tbl_WPT_InActiveType_IDName = o?.tbl_WPT_InActiveType?.InActiveType ?? "",
                                        o.IsPensionActive,
                                        o.Remarks,
                                        o.EmployeeName,
                                        o.FatherORHusbandName,
                                        o.Gender,
                                        o.MaritalStatus,
                                        o.CNIC,
                                        DateOfBirth = o.DateOfBirth.HasValue ? o.DateOfBirth.Value.ToString("dd-MMM-yyyy") : "",
                                        o.CellPhoneNo,
                                        o.HomeAddress,
                                        o.Email,
                                        o.BloodGroup,
                                        o.EmergencyNo,
                                        o.FK_tbl_WPT_EducationalLevelType_ID,
                                        FK_tbl_WPT_EducationalLevelType_IDName = o.tbl_WPT_EducationalLevelType.LevelName,
                                        o.CreatedBy,
                                        CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                                        o.ModifiedBy,
                                        ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                                    }).FirstOrDefault();

            var tbl_WPT_EmployeeSalaryStructure = (from o in await db.tbl_WPT_EmployeeSalaryStructures.Where(w => w.FK_tbl_WPT_Employee_ID == ID).OrderByDescending(w => w.EffectiveDate).ToListAsync()
                                                   select new
                                                   {
                                                       o.ID,
                                                       o.FK_tbl_WPT_Employee_ID,
                                                       EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                                                       o.BasicWage,
                                                       o.FK_tbl_WPT_tbl_OTPolicy_ID,
                                                       o.FK_tbl_WPT_TransactionMode_ID,
                                                       FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                                                       o.Remarks,
                                                       o.CreatedBy,
                                                       CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                                                       o.ModifiedBy,
                                                       ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                                                   }).FirstOrDefault();            

            return new { tbl_WPT_Employee = tbl_WPT_Employee, tbl_WPT_EmployeeSalaryStructure = tbl_WPT_EmployeeSalaryStructure };

        }
        public object GetWCLEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byName" }, new { n = "by ATNo", v = "byATNo" },
                new { n = "by CellPhone No", v = "byCellPhoneNo" }, new { n = "by ATNo Like", v = "byATNoLike" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Employees
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower()
                                                       ||
                                                       FilterByText == "byATNoLike" && w.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byCellPhoneNo" && w.CellPhoneNo.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Employees
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower()
                                        ||
                                        FilterByText == "byATNoLike" && w.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byCellPhoneNo" && w.CellPhoneNo.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.EmployeeNo,
                          o.FK_tbl_WPT_EmploymentType_ID,
                          FK_tbl_WPT_EmploymentType_IDName = o.tbl_WPT_EmploymentType.TypeName,
                          o.FK_tbl_WPT_DepartmentDetail_Section_ID,
                          FK_tbl_WPT_DepartmentDetail_Section_IDName = o.tbl_WPT_DepartmentDetail_Section.SectionName,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.FK_tbl_WPT_EmployeeLevel_ID,
                          FK_tbl_WPT_EmployeeLevel_IDName = o.tbl_WPT_EmployeeLevel.LevelName,
                          o.FK_tbl_WPT_Shift_ID_Default,
                          FK_tbl_WPT_Shift_ID_DefaultName = o.tbl_WPT_Shift.ShiftName,
                          o.ATEnrollmentNo_Default,
                          o.FK_tbl_WPT_ATType_ID,
                          FK_tbl_WPT_ATType_IDName = o.tbl_WPT_ATType.ATType,
                          JoiningDate = o.JoiningDate.ToString("dd-MMM-yyyy"),
                          InactiveDate = o.InactiveDate.HasValue ? o.InactiveDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.FK_tbl_WPT_InActiveType_ID,
                          FK_tbl_WPT_InActiveType_IDName = o?.tbl_WPT_InActiveType?.InActiveType ?? "",
                          o.IsPensionActive,
                          o.EmployeeName,
                          o.FatherORHusbandName,
                          o.Gender,
                          o.MaritalStatus,
                          o.CNIC,
                          DateOfBirth = o.DateOfBirth.HasValue ? o.DateOfBirth.Value.ToString("dd-MMM-yyyy") : "",
                          o.CellPhoneNo,
                          o.HomeAddress,
                          o.Email,
                          o.BloodGroup,
                          o.EmergencyNo,
                          o.FK_tbl_WPT_EducationalLevelType_ID,
                          FK_tbl_WPT_EducationalLevelType_IDName = o.tbl_WPT_EducationalLevelType.LevelName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          BasicWage = o.tbl_WPT_EmployeeSalaryStructures?.OrderByDescending(r => r.EffectiveDate)?.FirstOrDefault()?.BasicWage ?? 0,
                          OTPolicy = o.tbl_WPT_EmployeeSalaryStructures?.OrderByDescending(r => r.EffectiveDate)?.FirstOrDefault()?.tbl_WPT_tbl_OTPolicy?.PolicyName ?? "",
                          TotalAllowances = o.tbl_WPT_EmployeeSalaryStructures?.OrderByDescending(r => r.EffectiveDate)?.FirstOrDefault()?.tbl_WPT_EmployeeSalaryStructureAllowances?.Sum(s => (double?)s.Amount) ?? 0,
                          TotalDeductibles = o.tbl_WPT_EmployeeSalaryStructures?.OrderByDescending(r => r.EffectiveDate)?.FirstOrDefault()?.tbl_WPT_EmployeeSalaryStructureDeductibles?.Sum(s => (double?)s.Amount) ?? 0,
                          WageEffective = o.tbl_WPT_EmployeeSalaryStructures?.OrderByDescending(r => r.EffectiveDate)?.FirstOrDefault()?.EffectiveDate.ToString("dd-MMM-yy") ?? "",
                          TransactionMode = o.tbl_WPT_EmployeeSalaryStructures?.OrderByDescending(r => r.EffectiveDate)?.FirstOrDefault()?.tbl_WPT_TransactionMode?.TransactionMode ?? "",
                          LoginUserName = o?.ApplicationUsers?.FirstOrDefault()?.UserName ?? ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostEmployee(VM_EmployeeEnrollment VM_EmployeeEnrollment, string operation, string userName)
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100 };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            var e = VM_EmployeeEnrollment.tbl_WPT_Employee;
            var w = VM_EmployeeEnrollment.tbl_WPT_EmployeeSalaryStructure;
            if (operation == "Save New")
            {
                e.CreatedBy = userName;
                e.CreatedDate = DateTime.Now;   
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                e.ModifiedBy = userName;
                e.ModifiedDate = DateTime.Now;
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                CRUD_Type.Value = "Delete";
            }            

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_Employee] 
                   @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                  ,@ID={3},@EmployeeNo={4},@FK_tbl_WPT_EmploymentType_ID={5},@FK_tbl_WPT_DepartmentDetail_Section_ID={6}
                  ,@FK_tbl_WPT_Designation_ID={7},@FK_tbl_WPT_EmployeeLevel_ID={8},@FK_tbl_WPT_Shift_ID_Default={9}
                  ,@ATEnrollmentNo_Default={10},@FK_tbl_WPT_ATType_ID={11},@JoiningDate={12},@InactiveDate={13},@FK_tbl_WPT_InActiveType_ID={14}
                  ,@IsPensionActive={15},@Remarks={16},@EmployeeName={17},@FatherORHusbandName={18}
                  ,@Gender={19},@MaritalStatus={20},@CNIC={21},@DateOfBirth={22},@CellPhoneNo={23},@HomeAddress={24}
                  ,@Email={25},@BloodGroup={26},@EmergencyNo={27},@FK_tbl_WPT_EducationalLevelType_ID={28}
                  ,@CreatedBy={29},@CreatedDate={30},@ModifiedBy={31},@ModifiedDate={32}
                  ,@WageID={33},@WageDate={34},@BasicWage={35},@OTPolicyID={36},@TranModeID={37},@WageRemarks={38}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                e.ID,e.EmployeeNo,e.FK_tbl_WPT_EmploymentType_ID,e.FK_tbl_WPT_DepartmentDetail_Section_ID
                ,e.FK_tbl_WPT_Designation_ID,e.FK_tbl_WPT_EmployeeLevel_ID,e.FK_tbl_WPT_Shift_ID_Default
                ,e.ATEnrollmentNo_Default,e.FK_tbl_WPT_ATType_ID,e.JoiningDate,e.InactiveDate,e.FK_tbl_WPT_InActiveType_ID
                ,e.IsPensionActive,e.Remarks,e.EmployeeName,e.FatherORHusbandName
                ,e.Gender,e.MaritalStatus,e.CNIC,e.DateOfBirth,e.CellPhoneNo,e.HomeAddress
                ,e.Email,e.BloodGroup,e.EmergencyNo,e.FK_tbl_WPT_EducationalLevelType_ID
                ,e.CreatedBy,e.CreatedDate,e.ModifiedBy,e.ModifiedDate
                ,w.ID,w.EffectiveDate,w.BasicWage,w.FK_tbl_WPT_tbl_OTPolicy_ID,w.FK_tbl_WPT_TransactionMode_ID,w.Remarks
                );


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<string> EmployeeUploadExcelFile(List<EmployeeExcelData> EmployeeExcelDataList, string operation, string userName)
        {
            if (operation == "Save New")
            {
                //------------Add compiled record to database--------------------//
                SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
                SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
                SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };
                CRUD_Type.Value = "Insert";

                foreach (var item in EmployeeExcelDataList)
                {
                    var empExits = await db.tbl_WPT_Employees.Where(w => w.ATEnrollmentNo_Default.ToLower() == item.MachineID.ToLower()).FirstOrDefaultAsync();
                    
                    if (
                        !(item.EmploymentTypeID > 0) || string.IsNullOrEmpty(item.EmployeeName) || string.IsNullOrEmpty(item.MachineID) ||
                        string.IsNullOrEmpty(item.Gender) || !(item.SectionID > 0) || !(item.DesignationID > 0) || !(item.EmployeeLevelID > 0)||
                        !(item.EducationID > 0) || item.JoiningDate == null || !(item.ShiftID > 0) || !(item.BasicSalary > 0) ||
                        !(item.OTPolicyID > 0) || !(item.TransactionModeID > 0) || !(empExits==null)
                        )
                    {
                        continue;
                    }

                    await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_Employee] 
                       @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                      ,@ID={3},@EmployeeNo={4},@FK_tbl_WPT_EmploymentType_ID={5},@FK_tbl_WPT_DepartmentDetail_Section_ID={6}
                      ,@FK_tbl_WPT_Designation_ID={7},@FK_tbl_WPT_EmployeeLevel_ID={8},@FK_tbl_WPT_Shift_ID_Default={9}
                      ,@ATEnrollmentNo_Default={10},@FK_tbl_WPT_ATType_ID={11},@JoiningDate={12},@InactiveDate={13},@FK_tbl_WPT_InActiveType_ID={14}
                      ,@IsPensionActive={15},@Remarks={16},@EmployeeName={17},@FatherORHusbandName={18}
                      ,@Gender={19},@MaritalStatus={20},@CNIC={21},@DateOfBirth={22},@CellPhoneNo={23},@HomeAddress={24}
                      ,@Email={25},@BloodGroup={26},@EmergencyNo={27},@FK_tbl_WPT_EducationalLevelType_ID={28}
                      ,@CreatedBy={29},@CreatedDate={30},@ModifiedBy={31},@ModifiedDate={32}
                      ,@WageID={33},@WageDate={34},@BasicWage={35},@OTPolicyID={36},@TranModeID={37},@WageRemarks={38}",
                    CRUD_Type, CRUD_Msg, CRUD_ID,
                    0, null, item.EmploymentTypeID, item.SectionID
                    , item.DesignationID, item.EmployeeLevelID, item.ShiftID
                    , item.MachineID, 1, item.JoiningDate, null, null
                    , false, null, item.EmployeeName, item.FatherName
                    , item.Gender, item.MaritalStatus, item.CNIC, item.DOB, item.CellNo, item.Address
                    , item.Email, item.BloodGroup, null, item.EducationID
                    , userName, DateTime.Now, null, null
                    , 0, item.JoiningDate, item.BasicSalary, item.OTPolicyID, item.TransactionModeID, null
                    );

                }
            }
            else
            {
                return "Wrong Operation";
            }

            return "OK";
        }
        public async Task<tbl_WPT_Employee> GetEmployeeObject(int ID)
        {
            return await db.tbl_WPT_Employees.Where(w => w.ID == ID).FirstOrDefaultAsync();
        }
        public async Task<List<int>> GetEmployeeIDListObject()
        {
            return await db.tbl_WPT_Employees.Select(s=> s.ID).ToListAsync();
          
        }

        #endregion

        #region Employee FFCP Template
        public async Task<object> GetEmployeeFFCPTemplate(int EmpID)
        {
            var qry = from o in await db.tbl_WPT_Employee_PFFs.Where(w => w.FK_tbl_WPT_Employee_ID == EmpID).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          Photo160X210 = o?.Photo160X210 ?? "",
                          o.CardNumber,
                          o.Password,
                          o.Privilege,
                          o.Enabled,
                          HasFaceTemplate = o?.FaceTemplate != null ? true : false,
                          f0 = string.IsNullOrEmpty(o.FingerTemplate0) ? false : true,
                          f1 = string.IsNullOrEmpty(o.FingerTemplate1) ? false : true,
                          f2 = string.IsNullOrEmpty(o.FingerTemplate2) ? false : true,
                          f3 = string.IsNullOrEmpty(o.FingerTemplate3) ? false : true,
                          f4 = string.IsNullOrEmpty(o.FingerTemplate4) ? false : true,
                          f5 = string.IsNullOrEmpty(o.FingerTemplate5) ? false : true,
                          f6 = string.IsNullOrEmpty(o.FingerTemplate6) ? false : true,
                          f7 = string.IsNullOrEmpty(o.FingerTemplate7) ? false : true,
                          f8 = string.IsNullOrEmpty(o.FingerTemplate8) ? false : true,
                          f9 = string.IsNullOrEmpty(o.FingerTemplate9) ? false : true,
                          FingerCount = (!string.IsNullOrEmpty(o.FingerTemplate0) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate1) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate2) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate3) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate4) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate5) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate6) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate7) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate8) ? 1 : 0) +
                                        (!string.IsNullOrEmpty(o.FingerTemplate9) ? 1 : 0)
                            

                      };
            return qry.FirstOrDefault();
        }
        public async Task<string> PostEmployeeFFCPTemplate(string operation, string userName, int EmpID, string CardNo = null, string Paswd = null, int Privilege = 0, bool Enabled = true, bool RemoveFace = false, bool RemoveFinger = false, bool RemovePhoto = false)
        {
            if (operation == "Save New")
            {
                
            }
            else if (operation == "Save Update")
            {
                var obj = await db.tbl_WPT_Employee_PFFs.Where(w => w.FK_tbl_WPT_Employee_ID == EmpID).FirstOrDefaultAsync();

                if (RemovePhoto)
                    obj.Photo160X210 = null;
                if (RemoveFace)
                    obj.FaceTemplate = null;
                if (RemoveFinger)
                {
                    obj.FingerTemplate0 = null;
                    obj.FingerTemplate1 = null;
                    obj.FingerTemplate2 = null;
                    obj.FingerTemplate3 = null;
                    obj.FingerTemplate4 = null;
                    obj.FingerTemplate5 = null;
                    obj.FingerTemplate6 = null;
                    obj.FingerTemplate7 = null;
                    obj.FingerTemplate8 = null;
                    obj.FingerTemplate9 = null;
                }

                if (obj != null)
                {
                    obj.CardNumber = CardNo; obj.Password = Paswd; obj.Privilege = Privilege; obj.Enabled = Enabled;
                    db.Entry(obj).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                }
            }
            else if (operation == "Save Delete")
            {
                
            }
            return "OK";
        }
        public async Task<string> PostEmployeeFFCPPhoto(string operation, int PhotoTableID, int EmpID, string PhotoBase64)
        {
            if (operation == "Save New")
            {

            }
            else if (operation == "Save Update")
            {
                var obj = db.tbl_WPT_Employee_PFFs.Where(w => w.FK_tbl_WPT_Employee_ID == EmpID).FirstOrDefault();

                if (obj != null)
                {
                    obj.Photo160X210 = PhotoBase64;
                    db.Entry(obj).Property(x => x.Photo160X210).IsModified = true;                    
                    await db.SaveChangesAsync();
                }
                else
                    return "Template not found to upload image";
            }
            else if (operation == "Save Delete")
            {

            }
            
            return "OK";
        }

        public async Task<string> PostEmployeeFFCPTemplateObject(tbl_WPT_Employee_PFF tbl_WPT_Employee_PFF, string operation, string userName)
        {
            if (operation == "Save New")
            {
                
            }
            else if (operation == "Save Update")
            {
                db.Entry(tbl_WPT_Employee_PFF).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {

            }
            
            return "OK";
     
        }
        public async Task<tbl_WPT_Employee_PFF> GetEmployeeFFCPTemplateObject(int ID)
        {
            return await db.tbl_WPT_Employee_PFFs.Where(w => w.FK_tbl_WPT_Employee_ID == ID).FirstOrDefaultAsync();
        }
        #endregion

        #region Employee Salary

        #region Structure

        public async Task<object> GetEmployeeSalary(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeeSalaryStructures.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                          o.BasicWage,
                          o.FK_tbl_WPT_tbl_OTPolicy_ID,
                          FK_tbl_WPT_tbl_OTPolicy_IDName = o.tbl_WPT_tbl_OTPolicy?.PolicyName,
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.MaxTransactionLimit,
                          o.FK_tbl_WPT_TransactionMode_ID_Secondary,
                          FK_tbl_WPT_TransactionMode_ID_SecondaryName = o.FK_tbl_WPT_TransactionMode_ID_Secondary > 0 ? o.tbl_WPT_TransactionMode_Secondary.TransactionMode : "",
                          o.Remarks,
                          o.FK_tbl_WPT_IncrementDetail_ID,
                          FK_tbl_WPT_IncrementDetail_IDName = o.FK_tbl_WPT_IncrementDetail_ID > 0 ? o.tbl_WPT_IncrementDetail_SalaryStructure.tbl_WPT_IncrementMaster.DocNo.ToString() : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLEmployeeSalary()
        {
            return new[]
            {
                new { n = "by Wage Less Then", v = "byWageMaximumLimit" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadEmployeeSalary(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeeSalaryStructures
                                               .Where(w =>
                                                       w.FK_tbl_WPT_Employee_ID == MasterID
                                                     )
                                               .Where(w=>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byWageMaximumLimit" && w.BasicWage <= Convert.ToDouble(FilterValueByText)
                                               )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeeSalaryStructures
                                       .Where(w =>
                                                  w.FK_tbl_WPT_Employee_ID == MasterID
                                              )
                                       .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byWageMaximumLimit" && w.BasicWage <= Convert.ToDouble(FilterValueByText)
                                               )
                                       .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                          o.BasicWage,
                          o.FK_tbl_WPT_tbl_OTPolicy_ID,
                          FK_tbl_WPT_tbl_OTPolicy_IDName = o.tbl_WPT_tbl_OTPolicy?.PolicyName,
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.MaxTransactionLimit,
                          o.FK_tbl_WPT_TransactionMode_ID_Secondary,
                          FK_tbl_WPT_TransactionMode_ID_SecondaryName = o.FK_tbl_WPT_TransactionMode_ID_Secondary > 0 ? o.tbl_WPT_TransactionMode_Secondary.TransactionMode : "",
                          o.Remarks,
                          o.FK_tbl_WPT_IncrementDetail_ID,
                          FK_tbl_WPT_IncrementDetail_IDName = o.FK_tbl_WPT_IncrementDetail_ID > 0 ? o.tbl_WPT_IncrementDetail_SalaryStructure.tbl_WPT_IncrementMaster.DocNo.ToString() : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          TotalAllowances = o.tbl_WPT_EmployeeSalaryStructureAllowances?.Sum(s => s.Amount) ?? 0,
                          TotalDeductibles = o.tbl_WPT_EmployeeSalaryStructureDeductibles?.Sum(s => s.Amount) ?? 0,
                          NetWage = o.BasicWage + (o.tbl_WPT_EmployeeSalaryStructureAllowances?.Sum(s => s.Amount) ?? 0)
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostEmployeeSalary(tbl_WPT_EmployeeSalaryStructure tbl_WPT_EmployeeSalaryStructure, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EmployeeSalaryStructure.CreatedBy = userName;
                tbl_WPT_EmployeeSalaryStructure.CreatedDate = DateTime.Now;
                db.tbl_WPT_EmployeeSalaryStructures.Add(tbl_WPT_EmployeeSalaryStructure);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmployeeSalaryStructure.ModifiedBy = userName;
                tbl_WPT_EmployeeSalaryStructure.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EmployeeSalaryStructure).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EmployeeSalaryStructures.Remove(db.tbl_WPT_EmployeeSalaryStructures.Find(tbl_WPT_EmployeeSalaryStructure.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Allowance

        public async Task<object> GetEmployeeSalaryAllowance(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeeSalaryStructureAllowances.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID,
                          o.FK_tbl_WPT_AllowanceType_ID,
                          FK_tbl_WPT_AllowanceType_IDName = o.tbl_WPT_AllowanceType.AllowanceName,
                          o.Amount,
                          o.FK_tbl_WPT_WageCalculationType_ID,
                          FK_tbl_WPT_WageCalculationType_IDName = o.tbl_WPT_WageCalculationType.CalculationName,
                          o.Min_WD_Per,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public async Task<PagedData<object>> LoadEmployeeSalaryAllowance(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeeSalaryStructureAllowances
                                               .Where(w =>
                                                       w.FK_tbl_WPT_EmployeeSalaryStructure_ID == MasterID
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeeSalaryStructureAllowances
                                       .Where(w =>
                                                  w.FK_tbl_WPT_EmployeeSalaryStructure_ID == MasterID
                                              )
                                       .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID,
                          o.FK_tbl_WPT_AllowanceType_ID,
                          FK_tbl_WPT_AllowanceType_IDName = o.tbl_WPT_AllowanceType.AllowanceName,
                          o.Amount,
                          o.FK_tbl_WPT_WageCalculationType_ID,
                          FK_tbl_WPT_WageCalculationType_IDName = o.tbl_WPT_WageCalculationType.CalculationName,
                          o.Min_WD_Per,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostEmployeeSalaryAllowance(tbl_WPT_EmployeeSalaryStructureAllowance tbl_WPT_EmployeeSalaryStructureAllowance, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EmployeeSalaryStructureAllowance.CreatedBy = userName;
                tbl_WPT_EmployeeSalaryStructureAllowance.CreatedDate = DateTime.Now;
                db.tbl_WPT_EmployeeSalaryStructureAllowances.Add(tbl_WPT_EmployeeSalaryStructureAllowance);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmployeeSalaryStructureAllowance.ModifiedBy = userName;
                tbl_WPT_EmployeeSalaryStructureAllowance.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EmployeeSalaryStructureAllowance).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EmployeeSalaryStructureAllowances.Remove(db.tbl_WPT_EmployeeSalaryStructureAllowances.Find(tbl_WPT_EmployeeSalaryStructureAllowance.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Deductible

        public async Task<object> GetEmployeeSalaryDeductible(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeeSalaryStructureDeductibles.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID,
                          o.FK_tbl_WPT_DeductibleType_ID,
                          FK_tbl_WPT_DeductibleType_IDName = o.tbl_WPT_DeductibleType.DeductibleName,
                          o.Amount,
                          o.FK_tbl_WPT_WageCalculationType_ID,
                          FK_tbl_WPT_WageCalculationType_IDName = o.tbl_WPT_WageCalculationType.CalculationName,
                          o.Min_WD_Per,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public async Task<PagedData<object>> LoadEmployeeSalaryDeductible(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeeSalaryStructureDeductibles
                                               .Where(w =>
                                                       w.FK_tbl_WPT_EmployeeSalaryStructure_ID == MasterID
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeeSalaryStructureDeductibles
                                       .Where(w =>
                                                  w.FK_tbl_WPT_EmployeeSalaryStructure_ID == MasterID
                                              )
                                       .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID,
                          o.FK_tbl_WPT_DeductibleType_ID,
                          FK_tbl_WPT_DeductibleType_IDName = o.tbl_WPT_DeductibleType.DeductibleName,
                          o.Amount,
                          o.FK_tbl_WPT_WageCalculationType_ID,
                          FK_tbl_WPT_WageCalculationType_IDName = o.tbl_WPT_WageCalculationType.CalculationName,
                          o.Min_WD_Per,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostEmployeeSalaryDeductible(tbl_WPT_EmployeeSalaryStructureDeductible tbl_WPT_EmployeeSalaryStructureDeductible, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EmployeeSalaryStructureDeductible.CreatedBy = userName;
                tbl_WPT_EmployeeSalaryStructureDeductible.CreatedDate = DateTime.Now;
                db.tbl_WPT_EmployeeSalaryStructureDeductibles.Add(tbl_WPT_EmployeeSalaryStructureDeductible);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmployeeSalaryStructureDeductible.ModifiedBy = userName;
                tbl_WPT_EmployeeSalaryStructureDeductible.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EmployeeSalaryStructureDeductible).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EmployeeSalaryStructureDeductibles.Remove(db.tbl_WPT_EmployeeSalaryStructureDeductibles.Find(tbl_WPT_EmployeeSalaryStructureDeductible.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion


        #endregion

        #region Employee Pension

        public async Task<object> GetEmployeePension(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeePensionStructures.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                          o.PensionWage,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public async Task<PagedData<object>> LoadEmployeePension(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeePensionStructures
                                               .Where(w =>
                                                       w.FK_tbl_WPT_Employee_ID == MasterID
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeePensionStructures
                                       .Where(w =>
                                                  w.FK_tbl_WPT_Employee_ID == MasterID
                                              )
                                       .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                          o.PensionWage,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostEmployeePension(tbl_WPT_EmployeePensionStructure tbl_WPT_EmployeePensionStructure, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_EmployeePensionStructure.CreatedBy = userName;
                tbl_WPT_EmployeePensionStructure.CreatedDate = DateTime.Now;
                db.tbl_WPT_EmployeePensionStructures.Add(tbl_WPT_EmployeePensionStructure);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_EmployeePensionStructure.ModifiedBy = userName;
                tbl_WPT_EmployeePensionStructure.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_EmployeePensionStructure).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_EmployeePensionStructures.Remove(db.tbl_WPT_EmployeePensionStructures.Find(tbl_WPT_EmployeePensionStructure.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Employee Bank

        public async Task<object> GetEmployeeBank(int id)
        {
            var qry = from o in await db.tbl_WPT_EmployeeBankDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          o.FK_tbl_WPT_Bank_Branch_ID,
                          FK_tbl_WPT_Bank_Branch_IDName = o.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_Bank_Branch.BranchCode + "]",
                          o.BankAccountNo,
                          o.BankAccountTitle,
                          o.IsDefaultForBank,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public async Task<PagedData<object>> LoadEmployeeBank(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_EmployeeBankDetails
                                               .Where(w =>
                                                       w.FK_tbl_WPT_Employee_ID == MasterID
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_EmployeeBankDetails
                                       .Where(w =>
                                                  w.FK_tbl_WPT_Employee_ID == MasterID
                                              )
                                       .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          o.FK_tbl_WPT_Bank_Branch_ID,
                          FK_tbl_WPT_Bank_Branch_IDName = o.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_Bank_Branch.BranchCode + "]",
                          o.BankAccountNo,
                          o.BankAccountTitle,
                          o.IsDefaultForBank,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostEmployeeBank(tbl_WPT_EmployeeBankDetail tbl_WPT_EmployeeBankDetail, string operation = "", string userName = "")
        {
            return await new BankRepository(db).PostBankDetailBranchEmployeeAc(tbl_WPT_EmployeeBankDetail, operation, userName); 
        }

        #endregion

        #region Report 

        public List<ReportCallingModel> GetRLEmployee()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Employee List",
                    GroupBy = new List<string>(){"Department", "Designation", "Shift", "OT Policy", "Pay Mode", "Allowance", "Deductible", "Level" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Gender" },
                    SeekBy = new List<string>(){"Active Till Date", "In-Active", "New Joining"}
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Employee Wage Deductions",
                    GroupBy = new List<string>(){ "Deductible" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                    SeekBy = new List<string>(){"Active", "In-Active", "New Joining" }
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Employee Wage Allowances",
                    GroupBy = new List<string>(){ "Allowance" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                    SeekBy = new List<string>(){"Active", "In-Active", "New Joining" }
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Employee Wage Progress",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department", "Gender", "Joining" },
                    SeekBy = new List<string>(){ "Active Till Date", "In-Active Till Date" }
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Employee Wage Progress2",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department", "Gender", "Joining" },
                    SeekBy = new List<string>(){ "Active Till Date", "In-Active Till Date" }
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Employee Detail Excel",
                    GroupBy = new List<string>(){"Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department", "Level", "Gender", "Joining" },
                    SeekBy = new List<string>(){ "Active Till Date", "In-Active Till Date" }
                }
            };
        }
        public List<ReportCallingModel> GetRLEmployeeLetter()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Experience Letter",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Appointment Letter",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                }
            };
        }      
        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Employee List")
            {
                return await Task.Run(() => EmployeeList(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Employee Wage Deductions")
            {
                return await Task.Run(() => EmployeeWageDeductions(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Employee Wage Allowances")
            {
                return await Task.Run(() => EmployeeWageAllowances(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Employee Wage Progress")
            {
                return await Task.Run(() => EmployeeWageProgress(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Employee Wage Progress2")
            {
                return await Task.Run(() => EmployeeWageProgress2(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Employee Detail Excel")
            {
                return await Task.Run(() => EmployeeDetailExcel(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Experience Letter")
            {
                return await Task.Run(() => ExperienceLetter(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Appointment Letter")
            {
                return await Task.Run(() => AppointmentLetter(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }

        private async Task<byte[]> AppointmentLetter(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.LETTER, 50f, 50f, 100f, 80f, null, true, false, false);

            /////////////------------------------------table for Detail 1------------------------------////////////////

            Table pdftableMain = new Table(new float[] {
                (float)(PageSize.LETTER.GetWidth() * 1)
            }
            ).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);

            string Gender = "Male", EmployeeName = "______________", Designation = "______________", ATNo = "____", LicenseTo = "__________";
            DateTime JoiningDate = DateTime.Now, InActiveDate = DateTime.Now; int FirstSalaryID = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_General] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        Gender = sqlReader["Gender"].ToString();
                        ATNo = sqlReader["ATEnrollmentNo_Default"].ToString();
                        EmployeeName = (Gender == "Male" ? "Mr. " : "Ms. ") + sqlReader["EmployeeName"].ToString();
                        Designation = sqlReader["Designation"].ToString();
                        JoiningDate = (DateTime)sqlReader["JoiningDate"];
                        InActiveDate = (DateTime)sqlReader["InactiveDate"];
                        FirstSalaryID = (int)sqlReader["FirstSalaryID"];
                        LicenseTo = sqlReader["LicenseTo"].ToString();
                    }
                }

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Ref # MP/HR/Exp/" + ATNo)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Dated:" + DateTime.Now.ToString("dd-MMM-yyyy"))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("APPOINTMENT LETTER")).SetFontSize(12).SetBold().SetUnderline().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("To,\n" + EmployeeName)).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n Subject: Appointment as " + Designation)).SetBold().SetUnderline().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n Respected Applicant,")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("We referred to your application & subsequent interview. We have pleasure to appoint you as a "
                    + Designation
                    + " from " + JoiningDate.ToString("dd-MMM-yy")
                    + " in our company on the following terms and conditions.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                //////////////////--------------salary--------------------------///////////////////
                Table pdftableWage = new Table(new float[] {
                    (float)(PageSize.LETTER.GetWidth() * 0.40),
                    (float)(PageSize.LETTER.GetWidth() * 0.20),
                    (float)(PageSize.LETTER.GetWidth() * 0.40)
                }).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);

                ReportName.Value = rn + "1"; MasterID.Value = FirstSalaryID;
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        pdftableWage.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Title"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableWage.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Amount"].ToString() + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableWage.AddCell(new Cell().Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                    }
                }
                pdftableMain.AddCell(new Cell().Add(pdftableWage).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                //////////////////--------------Terms--------------------------///////////////////
                Table pdftableTerms = new Table(new float[] {
                    (float)(PageSize.LETTER.GetWidth() * 0.05),
                    (float)(PageSize.LETTER.GetWidth() * 0.05),
                    (float)(PageSize.LETTER.GetWidth() * 0.90)
                }).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(false);

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("1.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1,2).Add(new Paragraph().Add("As per service statutes of " + LicenseTo + ", your appointment can be discontinued without any notice during your 6 months probationary period. However if you want to be relieved from the services, you will be required to submit one month’s prior notice or on payment of one month’s salary is lieu thereof. If you are absent without information or leave without a notice period than no dues will be given.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("2.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Your services, in the " + LicenseTo + " will be governed by the existing " + LicenseTo + " service statutes as amended from time to time.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("3.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("In case of any income tax payable by you on your salary, the same will be deducted from it and deposited in the government treasury.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("4.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("While in the service of the Company you shall not engage yourself directly/indirectly in any private business and shall not work in any other organization, in any capacity be it whole time or part time.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("5.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("That you shall not act in any manner contrary to the instructions provided to you, you will:")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("a.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("Perform all services, and always act in the course of your employment, with all reasonable skill, care and proficiency.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("b.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("Promptly notify us any matter coming to your knowledge which could have a material effect on our business or affairs.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("c.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("Notify us immediately of any change in your residential address, Phone number or in your civil status.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("6.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("That you will be responsible for the custody and return in good condition of all our property which may be in your use, custody care or charge. We shall have the right to deduct the money value of all such things from your salary or dues and take such other action in the event of your failure to care such property to our satisfaction.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("7.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("You shall work honestly and earnestly to the best of your abilities and shall not involve yourself in politics or activities prejudicial to the interests of the Company. ")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("8.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("That your employment can also be terminated at any time with immediate effect, and without notice or any payment in lieu therefore if you: ")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("a.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("Commit any act or make any omission, which is contrary to our company’s interest")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("b.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("In our opinion, at any point you are under-performing or unsuited for the duties being or to be carried out by you.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("c.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("If you are found guilty of dishonesty, misconduct, disorderly behavior, negligence indiscipline or conducts any act which violets one or more terms of this letter.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("d.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("If you remain absent for 5 or more days consecutively without sanction")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("9.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("You shall not disclose the secrets of the Company or divulge any information of confidential nature that may come to your knowledge during the course of your service to anybody or institution without prior permission of the Management. ")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("10.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("You are requested to submit copies of your testimonials along with two photographs and National Identity Card to the Personal Department within one week of your joining.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableTerms.AddCell(new Cell().Add(new Paragraph().Add("11.")).SetTextAlignment(TextAlignment.LEFT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableTerms.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Please sign on the Acceptance Letter attached with this letter and return as a token on acceptance of all terms and condition.")).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell().Add(pdftableTerms).SetBorder(Border.NO_BORDER).SetKeepTogether(false));

            }
            
            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));


            /////////////------------------------------Signature Footer table------------------------------////////////////
            Table pdftableSignature = new Table(new float[] {
                (float)(PageSize.A4.GetWidth() * 0.25), (float)(PageSize.A4.GetWidth() * 0.25),
                (float)(PageSize.A4.GetWidth() * 0.25), (float)(PageSize.A4.GetWidth() * 0.25)
                }
            ).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);

            pdftableSignature.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\n\n")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableSignature.AddCell(new Cell().Add(new Paragraph().Add("Manager HR")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
            pdftableSignature.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            pdftableSignature.AddCell(new Cell(1,2).Add(new Paragraph().Add("\n CC: Accounts & Finance Department\n    Personnel Department")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableSignature.AddCell(new Cell(1,2).Add(new Paragraph().Add(" ")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


            page.InsertContent(pdftableSignature);


            page.InsertNewPage();
            /////////////------------------------------Acceptance------------------------------////////////////
            Table pdftableAcceptance = new Table(new float[] {
                (float)(PageSize.A4.GetWidth() * 0.25), (float)(PageSize.A4.GetWidth() * 0.25),
                (float)(PageSize.A4.GetWidth() * 0.25), (float)(PageSize.A4.GetWidth() * 0.25)
                }
            ).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);

            pdftableAcceptance.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\nACCEPTANCE\n")).SetBold().SetUnderline().SetFontSize(12).SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableAcceptance.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\nI " + EmployeeName + " have read the all terms and conditions of my service and hereby accept the same.\n\n\n\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableAcceptance.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableAcceptance.AddCell(new Cell().Add(new Paragraph().Add(EmployeeName)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));


            page.InsertContent(pdftableAcceptance);



            return page.FinishToGetBytes();
        }
        private async Task<byte[]> ExperienceLetter(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.LETTER, 50f, 50f, 100f, 80f, null, true, false, false);

            /////////////------------------------------table for Detail 1------------------------------////////////////

            Table pdftableMain = new Table(new float[] {
                (float)(PageSize.LETTER.GetWidth() * 1)
            }
            ).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);                       

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_General] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                await command.Connection.OpenAsync();
                string Gender = "Male", LicenseTo = "_______";
                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        Gender = sqlReader["Gender"].ToString();
                        LicenseTo = sqlReader["LicenseTo"].ToString();

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Ref # MP/HR/Exp/" + sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Dated:" + DateTime.Now.ToString("dd-MMM-yyyy"))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("TO WHOMSOEVER IT MAY CONCERN")).SetFontSize(14).SetBold().SetUnderline().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        Paragraph para = new Paragraph();

                        para.Add("This is to certify that ");
            
                        para.Add(new Text((Gender == "Male" ? "Mr. " : "Ms. ") + sqlReader["EmployeeName"].ToString()).SetBold());
            
                        para.Add(" Holding CNIC# ");
                        para.Add(new Text(sqlReader["CNIC"].ToString()).SetBold());

                        para.Add(" has worked as ");
                        para.Add(new Text(sqlReader["Designation"].ToString()).SetBold());

                        para.Add(" with " + LicenseTo + " from " 
                                 + ((DateTime)sqlReader["JoiningDate"]).ToString("dd-MMM-yy") 
                                 + ", to " 
                                 + ((DateTime)sqlReader["InactiveDate"]).ToString("dd-MMM-yy") 
                                 + ".");

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(para)).SetTextAlignment(TextAlignment.JUSTIFIED).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("During the above period " + (Gender == "Male" ? "Mr. " : "Ms. " ) + sqlReader["EmployeeName"].ToString() + " participated in performing the work with determination & sincerity. As we observed " + (Gender == "Male" ? "he" : "she") + " was an active and very qualified person and " + (Gender == "Male" ? "he" : "she") + " could perform all " + (Gender == "Male" ? "his" : "her") + " assigned tasks effectively.")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Besides, in my opinion, " + (Gender == "Male" ? "he" : "she") + " was a motivated, professional, hardworking and innovative person. " + (Gender == "Male" ? "He" : "She") + " contributed much to our organizational goals and targets.")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("And " + (Gender == "Male" ? "his" : "her") + " performance proved to be most effective in our organization, during the above period.")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                    }
                }

            }

            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));


            /////////////------------------------------Signature Footer table------------------------------////////////////
            Table pdftableSignature = new Table(new float[] {
                (float)(PageSize.A4.GetWidth() * 0.25), (float)(PageSize.A4.GetWidth() * 0.25),
                (float)(PageSize.A4.GetWidth() * 0.25), (float)(PageSize.A4.GetWidth() * 0.25)
                }
            ).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);

            pdftableSignature.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\n\n\n\n")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableSignature.AddCell(new Cell().Add(new Paragraph().Add("Manager HR")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
            pdftableSignature.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            page.InsertContent(pdftableSignature);


            return page.FinishToGetBytes();
        }
        private async Task<byte[]> EmployeeDetailExcel(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            ExcelPackage Ep = new ExcelPackage();

            ExcelWorksheet Sheet = Ep.Workbook.Worksheets.Add("EmployeesDetail");

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                          
                command.CommandText = "EXECUTE [dbo].[Report_WPT_EmployeesListWithDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                Sheet.Row(1).Height = 20; Sheet.Row(1).Style.Font.Bold = true; Sheet.Row(1).Style.Font.Size = 14;

                Sheet.Cells[1, 1].Value = "S.No";
                Sheet.Cells[1, 2].Value = "AT No";
                Sheet.Cells[1, 3].Value = "Name";
                Sheet.Cells[1, 4].Value = "Joining";
                Sheet.Cells[1, 5].Value = "Designation";
                Sheet.Cells[1, 6].Value = "Department";
                Sheet.Cells[1, 7].Value = "Effective";
                Sheet.Cells[1, 8].Value = "Basic";
                Sheet.Cells[1, 9].Value = "Basic Diff";
                Sheet.Cells[1, 10].Value = "Gross";

                Sheet.Cells[1, 11].Value = "Allowances"; Sheet.Cells[1, 11].Style.Font.Size = 10;
                Sheet.Cells[1, 12].Value = "Allw Diff"; Sheet.Cells[1, 12].Style.Font.Size = 10;
                Sheet.Cells[1, 13].Value = "Allw Detail"; Sheet.Cells[1, 13].Style.Font.Size = 10;


                for (int c = 1; c <= 13; c++)
                {
                    Sheet.Cells[1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    Sheet.Cells[1, c].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightSteelBlue);
                }

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int row = 2; int Sno = 1; int EmpID = 0; string allowancesdetail = string.Empty;

                
                

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        Sheet.Row(row).Height = 18;

                        //------------------------------group----------------------------//
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            Sheet.Cells[row, 1, row, 13].Merge = true;
                            Sheet.Cells[row, 1].Value = GroupbyValue;
                            Sheet.Cells[row, 1].Style.Font.Bold = false;
                            Sheet.Cells[row, 1].Style.Font.Size = 13;
                            Sheet.Cells[row, 1].Style.Font.Color.SetColor(System.Drawing.Color.Black);
                            Sheet.Cells[row, 1, row, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            Sheet.Cells[row, 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            Sheet.Cells[row, 1].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                            row++;
                        }

                        //---------------------------if employee repeat--------------------------------//
                        if (EmpID != Convert.ToInt32(sqlReader["ID"]))
                        {

                            EmpID = Convert.ToInt32(sqlReader["ID"]);

                            Sheet.Cells[row, 1].Value = Sno;

                            Sheet.Cells[row, 2].Value = sqlReader["ATEnrollmentNo_Default"].ToString();

                            Sheet.Cells[row, 3].Value = sqlReader["EmployeeName"].ToString(); Sheet.Cells[row, 3].Style.WrapText = true;

                            Sheet.Cells[row, 4].Value = Convert.ToDateTime(sqlReader["JoiningDate"]).ToString("MMM-yyyy");

                            Sheet.Cells[row, 5].Value = sqlReader["Designation"].ToString(); Sheet.Cells[row, 5].Style.WrapText = true;

                            Sheet.Cells[row, 6].Value = sqlReader["DepartmentName"].ToString(); Sheet.Cells[row, 6].Style.WrapText = true;

                            Sno++;
                        }
                        else
                        {
                            Sheet.Cells[row - 1, 1, row, 1].Merge = true;

                            Sheet.Cells[row, 2, row, 6].Merge = true; Sheet.Cells[row, 2, row, 6].Value = null;
                        }

                        Sheet.Cells[row, 7].Value = Convert.ToDateTime(sqlReader["EffectiveDate"]).ToString("MMM-yyyy");

                        Sheet.Cells[row, 8].Value = Convert.ToDouble(sqlReader["BasicWage"]); Sheet.Cells[row, 8].Style.Font.Bold = true;

                        Sheet.Cells[row, 9].Value = sqlReader["byBasic"].ToString();

                        Sheet.Cells[row, 10].Value = Convert.ToDouble(sqlReader["BasicWage"]) + Convert.ToDouble(sqlReader["TotalAllowances"]);

                        Sheet.Cells[row, 11].Value = Convert.ToDouble(sqlReader["TotalAllowances"]); Sheet.Cells[row, 11].Style.Font.Size = 10;

                        Sheet.Cells[row, 12].Value = sqlReader["byAllowance"].ToString(); Sheet.Cells[row, 12].Style.Font.Size = 10;

                        allowancesdetail = string.Empty;

                        Sheet.Cells[row, 13].Value = sqlReader["Allowances"].ToString(); Sheet.Cells[row, 13].Style.Font.Size = 9;
                        Sheet.Cells[row, 13].Style.WrapText = true;
                        row++;
                    }
                }

                Sheet.Cells[1, 1, row - 1, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                Sheet.Cells[1, 1, row - 1, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                Sheet.Cells[1, 1, row - 1, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                Sheet.Cells[1, 1, row - 1, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                Sheet.Column(1).BestFit = true;
                Sheet.Column(2).BestFit = true;
                Sheet.Column(3).BestFit = true;
                Sheet.Column(4).BestFit = true;
                Sheet.Column(5).BestFit = true;
                Sheet.Column(6).BestFit = true;
                Sheet.Column(7).BestFit = true;
                Sheet.Column(8).BestFit = true;
                Sheet.Column(9).BestFit = true;
                Sheet.Column(10).BestFit = true;
                Sheet.Column(11).BestFit = true;
                Sheet.Column(12).BestFit = true;
                Sheet.Column(13).BestFit = true;

                Sheet.Cells["A:AZ"].AutoFitColumns();
            }

            return Ep.GetAsByteArray();
        }
        private async Task<byte[]> EmployeeWageProgress2(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 30f, "----- " + rn + " " + SeekBy + " From: " + datefrom.Value.ToString("dd-MMM-yy") + " TO " + datetill.Value.ToString("dd-MMM-yy") + "-----", false, true, true);

            /////////////------------------------------13 table for Detail------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.05),//S No
                        (float)(PageSize.A4.GetWidth() * 0.05),//ATNo
                        (float)(PageSize.A4.GetWidth() * 0.15),//Name 
                        (float)(PageSize.A4.GetWidth() * 0.10),//Designation 
                        (float)(PageSize.A4.GetWidth() * 0.04),//Joining date 
                        (float)(PageSize.A4.GetWidth() * 0.04),//Eff
                        (float)(PageSize.A4.GetWidth() * 0.07),//Basic
                        (float)(PageSize.A4.GetWidth() * 0.10),//Allowance Name 
                        (float)(PageSize.A4.GetWidth() * 0.05),//Allowance Amount 
                        (float)(PageSize.A4.GetWidth() * 0.08),//Net
                        (float)(PageSize.A4.GetWidth() * 0.07),//Basic Diff
                        (float)(PageSize.A4.GetWidth() * 0.07)//Allowance Diff
                }
            ).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            int SNo = 1;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_EmployeesListWithDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S. No.")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add(GroupBy == "Department" ? "Designation" : "Department")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Joining")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Basic")).SetTextAlignment(TextAlignment.RIGHT).SetBold());
                pdftableMain.AddHeaderCell(new Cell(1, 2).Add(new Paragraph().Add("Allowance With Amount")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Net")).SetTextAlignment(TextAlignment.RIGHT).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Basic Diff")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBackgroundColor(new DeviceRgb(102, 163, 255)));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Allowance Diff")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetBackgroundColor(new DeviceRgb(179, 209, 255)));

                string LEmpID = string.Empty, LWageID = string.Empty;

                double totalnet = 0, grandtotalnet = 0;
                double totalBasic = 0, grandtotalBasic = 0;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {

                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total :")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", totalBasic) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(string.Format("{0:n0}", totalnet) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                            }


                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(8).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(8).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            totalBasic = 0;
                            totalnet = 0;
                        }


                        if (LWageID != sqlReader["WageID"].ToString())
                        {
                            if (LEmpID != sqlReader["ID"].ToString())
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupBy == "Department" ? sqlReader["Designation"].ToString() : sqlReader["DepartmentName"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["JoiningDate"]).ToString("MMM-yy"))).SetKeepTogether(true));
                            }
                            else
                            {
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            }


                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveDate"]).ToString("MMM-yy"))).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["BasicWage"]))).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            if (string.IsNullOrEmpty(sqlReader["AllowanceID"].ToString()))
                            {
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            }
                            else
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowanceName"].ToString())).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["AllowanceAmount"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                            }

                            if (LEmpID != sqlReader["ID"].ToString())
                            {

                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Net"]))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["BasicDiff"].ToString()).SetKeepTogether(true).SetBackgroundColor(new DeviceRgb(102, 163, 255))));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowanceDiff"].ToString()).SetKeepTogether(true).SetBackgroundColor(new DeviceRgb(179, 209, 255))));

                                SNo += 1;

                                totalBasic += Convert.ToDouble(sqlReader["BasicWage"]);
                                grandtotalBasic += Convert.ToDouble(sqlReader["BasicWage"]);

                                totalnet += Convert.ToDouble(sqlReader["Net"]);
                                grandtotalnet += Convert.ToDouble(sqlReader["Net"]);
                            }

                            else
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Net"]))).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["BasicDiff"].ToString()).SetKeepTogether(true).SetBackgroundColor(new DeviceRgb(102, 163, 255))));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowanceDiff"].ToString()).SetKeepTogether(true).SetBackgroundColor(new DeviceRgb(179, 209, 255))));

                            }




                        }
                        else
                        {
                            pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowanceName"].ToString())).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["AllowanceAmount"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("")).SetKeepTogether(true));
                        }


                        LEmpID = sqlReader["ID"].ToString();
                        LWageID = sqlReader["WageID"].ToString();




                    }

                    pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total :")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", totalBasic) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", totalnet) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));

                }

                pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Grand Total :")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", grandtotalBasic) + "/-")).SetBold().SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", grandtotalnet) + "/-")).SetBold().SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));

            }

            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> EmployeeWageProgress(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 30f, "----- " + rn + " From: " + datefrom.Value.ToString("dd-MMM-yy") + " TO " + datetill.Value.ToString("dd-MMM-yy") + "-----", true, true, true);

            /////////////------------------------------13 table for Detail------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.05),//S No
                        (float)(PageSize.A4.GetWidth() * 0.05),//ATNo
                        (float)(PageSize.A4.GetWidth() * 0.15),//Name 
                        (float)(PageSize.A4.GetWidth() * 0.10),//GroupName 
                        (float)(PageSize.A4.GetWidth() * 0.05),//Joining date 
                        (float)(PageSize.A4.GetWidth() * 0.05),//Eff
                        (float)(PageSize.A4.GetWidth() * 0.05),//Basic
                        (float)(PageSize.A4.GetWidth() * 0.10),//Allowance Name 
                        (float)(PageSize.A4.GetWidth() * 0.05),//Allowance Amount 
                        (float)(PageSize.A4.GetWidth() * 0.05),//Net
                        (float)(PageSize.A4.GetWidth() * 0.05),//Last Inc Date
                        (float)(PageSize.A4.GetWidth() * 0.06),//Incr value + by 
                        (float)(PageSize.A4.GetWidth() * 0.06) //Remarks
                }
            ).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            int SNo = 1;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_EmployeesListWithDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S. No.")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add(GroupBy == "Department" ? "Designation" : "Department")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Joining")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Basic")).SetTextAlignment(TextAlignment.RIGHT).SetBold());
                pdftableMain.AddHeaderCell(new Cell(1, 2).Add(new Paragraph().Add("Allowance With Amount")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Net")).SetTextAlignment(TextAlignment.RIGHT).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Last Inc Date")).SetBold());
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Increment")).SetBold().SetTextAlignment(TextAlignment.CENTER));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Remarks")).SetBold().SetTextAlignment(TextAlignment.CENTER));


                string LEmpID = string.Empty, LWageID = string.Empty;

                double totalnet = 0, grandtotalnet = 0;
                double totalBasic = 0, grandtotalBasic = 0;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {

                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total :")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", totalBasic) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(string.Format("{0:n0}", totalnet) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                            }


                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 13).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(8).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 13).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(8).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            totalBasic = 0;
                            totalnet = 0;
                        }


                        if (LWageID != sqlReader["WageID"].ToString())
                        {
                            if (LEmpID != sqlReader["ID"].ToString())
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupBy == "Department" ? sqlReader["Designation"].ToString() : sqlReader["DepartmentName"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["JoiningDate"]).ToString("MMM-yy"))).SetKeepTogether(true));
                            }
                            else
                            {
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            }


                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveDate"]).ToString("MMM-yy"))).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["BasicWage"]))).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            if (string.IsNullOrEmpty(sqlReader["AllowanceID"].ToString()))
                            {
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            }
                            else
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowanceName"].ToString())).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["AllowanceAmount"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                            }

                            if (LEmpID != sqlReader["ID"].ToString())
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Net"]))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Net"]))).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                            if (LEmpID != sqlReader["ID"].ToString())
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.IsNullOrEmpty(sqlReader["LastIncDate"].ToString()) ? "" : ((DateTime)sqlReader["LastIncDate"]).ToString("MMM-yy"))).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.IsNullOrEmpty(sqlReader["IncrementValue"].ToString()) ? "" : sqlReader["IncrementValue"].ToString() + " " + sqlReader["IncrementBy"].ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("")).SetKeepTogether(true));

                                SNo += 1;

                                totalBasic += Convert.ToDouble(sqlReader["BasicWage"]);
                                grandtotalBasic += Convert.ToDouble(sqlReader["BasicWage"]);

                                totalnet += Convert.ToDouble(sqlReader["Net"]);
                                grandtotalnet += Convert.ToDouble(sqlReader["Net"]);

                            }
                            else
                            {
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            }

                        }
                        else
                        {
                            pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("")).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowanceName"].ToString())).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["AllowanceAmount"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("")).SetKeepTogether(true));
                        }


                        LEmpID = sqlReader["ID"].ToString();
                        LWageID = sqlReader["WageID"].ToString();




                    }

                    pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total :")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", totalBasic) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(string.Format("{0:n0}", totalnet) + "/-")).SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));

                }

                pdftableMain.AddCell(new Cell(1, 13).Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Grand Total :")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.Format("{0:n0}", grandtotalBasic) + "/-")).SetBold().SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(string.Format("{0:n0}", grandtotalnet) + "/-")).SetBold().SetTextAlignment(TextAlignment.LEFT).SetKeepTogether(true));

            }

            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> EmployeeWageAllowances(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------8 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.08), // S No
                        (float)(PageSize.A4.GetWidth()*0.08), //AT
                        (float)(PageSize.A4.GetWidth()*0.24), // Name
                        (float)(PageSize.A4.GetWidth()*0.16), // Designation
                        (float)(PageSize.A4.GetWidth()*0.16), // Designation
                        (float)(PageSize.A4.GetWidth()*0.08), // Effective
                        (float)(PageSize.A4.GetWidth()*0.05), // Fix
                        (float)(PageSize.A4.GetWidth()*0.10) // Amount
                }
            ).SetFontSize(7).SetFixedLayout().SetBorder(Border.NO_BORDER);


            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotal = 0, GroupTotal = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_EmployeesListWithDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Allowance" ? "AllowanceName" :
                                          "";

                int SNo = 1;
                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Prefix")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Prefix")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotal = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(5).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(5).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveDate"]).ToString("MMM-yy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Prefix"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        SNo = SNo + 1;

                        GroupTotal += Convert.ToDouble(sqlReader["Amount"]);

                        GrandTotal += Convert.ToDouble(sqlReader["Amount"]);

                    }
                }

                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> EmployeeWageDeductions(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------8 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.08), // S No
                        (float)(PageSize.A4.GetWidth()*0.08), //AT
                        (float)(PageSize.A4.GetWidth()*0.24), // Name
                        (float)(PageSize.A4.GetWidth()*0.16), // Designation
                        (float)(PageSize.A4.GetWidth()*0.16), // Designation
                        (float)(PageSize.A4.GetWidth()*0.08), // Effective
                        (float)(PageSize.A4.GetWidth()*0.05), // Fix
                        (float)(PageSize.A4.GetWidth()*0.10) // Amount
                }
            ).SetFontSize(7).SetFixedLayout().SetBorder(Border.NO_BORDER);


            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotal = 0, GroupTotal = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_EmployeesListWithDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Deductible" ? "DeductibleName" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Prefix")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Prefix")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotal = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(5).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(5).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveDate"]).ToString("MMM-yy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Prefix"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        SNo = SNo + 1;

                        GroupTotal += Convert.ToDouble(sqlReader["Amount"]);

                        GrandTotal += Convert.ToDouble(sqlReader["Amount"]);

                    }
                }

                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));

                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> EmployeeList(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {

            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 30f, "----- Employees List During Period " + "From: " + datefrom.Value.ToString("dd-MMM-yy") + " TO " + datetill.Value.ToString("dd-MMM-yy") + "-----", false);

            /////////////------------------------------table for Detail------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.05),//S No
                        (float)(PageSize.A4.GetWidth() * 0.05),//ATNo
                        (float)(PageSize.A4.GetWidth() * 0.14),//Name 
                        (float)(PageSize.A4.GetWidth() * 0.11),//Department 
                        (float)(PageSize.A4.GetWidth() * 0.11),//Designation 
                        (float)(PageSize.A4.GetWidth() * 0.07),//CNIC
                        (float)(PageSize.A4.GetWidth() * 0.07),//Cell No
                        (float)(PageSize.A4.GetWidth() * 0.04),//Shift Prefix 
                        (float)(PageSize.A4.GetWidth() * 0.08),//OT Policy Name
                        (float)(PageSize.A4.GetWidth() * 0.05),//Joining Date
                        (float)(PageSize.A4.GetWidth() * 0.06),//Basic Wage
                        (float)(PageSize.A4.GetWidth() * 0.06),//Allowances 
                        (float)(PageSize.A4.GetWidth() * 0.06),//Deductibles 
                        (float)(PageSize.A4.GetWidth() * 0.05),//Transfer Mode
                        (float)(PageSize.A4.GetWidth() * 0.04)//Effective From
                }
            ).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);


            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S. No.")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Department")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("CNIC")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Contact No")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Shift")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("OT Policy")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Joining Date")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Bais Salary")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Allowances")).SetBold().SetTextAlignment(TextAlignment.CENTER));
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Deductibles")).SetBold().SetTextAlignment(TextAlignment.CENTER));
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Pay Mode")).SetBold());
            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Wage Eff")).SetBold());

            int SNo = 1;

            var Allowances = new List<(string, string, string)>();
            var Deductibles = new List<(string, string, string)>();

            string ATNo = "", EmpName = "", Department = "", Designation = "", CNIC = "", CellNo = "", Shift = "", OT = "", Join = "", Basic = "", Mode = "", Eff = "";

            double GrandTotalBasic = 0, GroupTotalBasic = 0;


            using (var command = db.Database.GetDbConnection().CreateCommand())
            {  
                command.CommandText = "EXECUTE [dbo].[Report_WPT_EmployeesListWithDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Shift" ? "ShiftName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          GroupBy == "OT Policy" ? "PolicyName" :
                                          GroupBy == "Pay Mode" ? "TransactionMode" :
                                          GroupBy == "Allowance" ? "AllowanceName" :
                                          GroupBy == "Deductible" ? "DeductibleName" :
                                          GroupBy == "Level" ? "LevelName" :
                                          "";

                int EmpID = 0;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {

                        if (EmpID != (int)sqlReader["ID"])
                        {
                            if (EmpID > 0)
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(ATNo)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(EmpName)).SetKeepTogether(true).SetBold());
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Department)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Designation)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(CNIC)).SetKeepTogether(true).SetFontSize(5));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(CellNo)).SetKeepTogether(true).SetFontSize(5));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Shift)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(OT)).SetKeepTogether(true).SetFontSize(5));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Join)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Basic)).SetKeepTogether(true));
                                //---------------------------------------------------------------------------------------------//
                                Paragraph p = new Paragraph().Add("");

                                foreach (var itm in Allowances)
                                {
                                    if (itm.Item1.Length > 0)
                                        p.Add(itm.Item2 + ": ").Add(itm.Item3).Add("\n");
                                }
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(p)).SetKeepTogether(true));

                                p = new Paragraph();
                                foreach (var itm in Deductibles)
                                {
                                    if (itm.Item1.Length > 0)
                                        p.Add(itm.Item2 + ": ").Add(itm.Item3).Add("\n");
                                }
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(p)).SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Mode)).SetKeepTogether(true).SetFontSize(4));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Eff)).SetKeepTogether(true));
                                SNo += 1;

                                GroupTotalBasic += Convert.ToDouble(Basic);
                                GrandTotalBasic += Convert.ToDouble(Basic);
                            }


                            EmpID = (int)sqlReader["ID"];


                            ATNo = sqlReader["ATEnrollmentNo_Default"].ToString();
                            EmpName = sqlReader["EmployeeName"].ToString();
                            Department = sqlReader["DepartmentName"].ToString();
                            Designation = sqlReader["Designation"].ToString();
                            CNIC = sqlReader["CNIC"].ToString();
                            CellNo = sqlReader["CellPhoneNo"].ToString();
                            Shift = sqlReader["ShiftPrefix"].ToString();
                            OT = sqlReader["PolicyName"].ToString();
                            Join = ((DateTime)sqlReader["JoiningDate"]).ToString("MMM-yyyy");
                            Basic = sqlReader["BasicWage"].ToString();
                            Mode = sqlReader["TransactionMode"].ToString();
                            Eff = ((DateTime)sqlReader["EffectiveDate"]).ToString("MMM-yy");

                            Allowances.Clear();
                            Allowances.Add((sqlReader["AllowanceID"].ToString(), sqlReader["AllowancePrefix"].ToString(), sqlReader["AllowanceAmount"].ToString()));

                            Deductibles.Clear();
                            Deductibles.Add((sqlReader["DeductibleID"].ToString(), sqlReader["DeductiblePrefix"].ToString(), sqlReader["DeductibleAmount"].ToString()));

                        }
                        else
                        {

                            if (!Allowances.Exists(f => f.Item1 == sqlReader["AllowanceID"].ToString()))
                                Allowances.Add((sqlReader["AllowanceID"].ToString(), sqlReader["AllowancePrefix"].ToString(), sqlReader["AllowanceAmount"].ToString()));

                            if (!Deductibles.Exists(f => f.Item1 == sqlReader["DeductibleID"].ToString()))
                                Deductibles.Add((sqlReader["DeductibleID"].ToString(), sqlReader["DeductiblePrefix"].ToString(), sqlReader["DeductibleAmount"].ToString()));

                        }

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {

                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalBasic.ToString())).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }


                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 15).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 15).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            GroupTotalBasic = 0;
                        }
                    }


                    //-----------------------------last row---------------------------------------------//
                    if (EmpID > 0)
                    {
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(ATNo)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(EmpName)).SetKeepTogether(true).SetBold());
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Department)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Designation)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(CNIC)).SetKeepTogether(true).SetFontSize(5));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(CellNo)).SetKeepTogether(true).SetFontSize(5));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Shift)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(OT)).SetKeepTogether(true).SetFontSize(5));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Join)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Basic)).SetKeepTogether(true));
                        //---------------------------------------------------------------------------------------------//
                        Paragraph p = new Paragraph().Add("");

                        foreach (var itm in Allowances)
                        {
                            if (itm.Item1.Length > 0)
                                p.Add(itm.Item2 + ": ").Add(itm.Item3).Add("\n");
                        }
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(p)).SetKeepTogether(true));

                        p = new Paragraph();
                        foreach (var itm in Deductibles)
                        {
                            if (itm.Item1.Length > 0)
                                p.Add(itm.Item2 + ": ").Add(itm.Item3).Add("\n");
                        }
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(p)).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Mode)).SetKeepTogether(true).SetFontSize(4));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Eff)).SetKeepTogether(true));

                        GroupTotalBasic += Convert.ToDouble(Basic);
                        GrandTotalBasic += Convert.ToDouble(Basic);



                        pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalBasic.ToString())).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                    }
                }
                
            }

            pdftableMain.AddCell(new Cell(1, 15).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderBottom(new SolidBorder(0.5f)));

            pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GrandTotalBasic.ToString())).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }

        #endregion

    }
    public class PolicyGeneralRepository : IPolicyGeneral
    {
        private readonly OreasDbContext db;
        public PolicyGeneralRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        public async Task<object> Load()
        {
            var qry = from o in await db.tbl_WPT_PolicyGenerals.ToListAsync()
                      select new
                      {
                          o.ID,
                          o.CalendarYear_StartMonth,
                          o.CalendarYear_StartDayNoOfEveryMonth,
                          o.CalendarYear_RecreateOnClosingMonth,
                          o.WageCash_RoundOnesIntoTens,
                          o.MinWDToGenerateWageForFirstMonth,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };
            return qry.FirstOrDefault();
        }

        public async Task<string> Post(tbl_WPT_PolicyGeneral tbl_WPT_PolicyGeneral, string operation, string userName)
        {
            //if (operation == "Save New")
            //{
            //    tbl_WPT_PolicyGeneral.CreatedBy = userName;
            //    tbl_WPT_PolicyGeneral.CreatedDate = DateTime.Now;
            //    db.tbl_WPT_PolicyGenerals.Add(tbl_WPT_PolicyGeneral);
            //    await db.SaveChangesAsync();
            //}
            if (operation == "Save Update")
            {
                tbl_WPT_PolicyGeneral.ModifiedBy = userName;
                tbl_WPT_PolicyGeneral.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PolicyGeneral).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            //else if (operation == "Save Delete")
            //{
            //    db.tbl_WPT_PolicyGenerals.Remove(db.tbl_WPT_PolicyGenerals.Find(tbl_WPT_PolicyGeneral.ID));
            //    await db.SaveChangesAsync();
            //}
            return "OK";
        }
    }
    public class PolicyPenaltyRepository : IPolicyPenalty
    {
        private readonly OreasDbContext db;
        public PolicyPenaltyRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Policy Penalty

        public async Task<object> GetPolicyPenalty(int id)
        {
            var qry = from o in await db.tbl_WPT_PolicyPenaltyOnWTs.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PenaltyAbsentAtEvery_LI,
                          o.PenaltyHalfShiftFromEvery_LI,
                          o.MonthlyLateInGraceLimit_Minutes_MGLI,
                          o.PenaltyHalfShiftFromEveryMinutes_MGLI,
                          o.PenaltyAbsentAtEvery_EO,
                          o.PenaltyHalfShiftFromEvery_EO,
                          o.PenaltyAbsentAtEvery_HS,
                          o.KeepHalfShiftFromEvery_HS,
                          o.PenaltyAbsentOnMissingINorOUT,
                          o.PenaltyHalfShiftOnMissingINorOUT,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLPolicyPenalty()
        {
            return new[]
            {
                new { n = "by Policy Name", v = "byPolicyName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPolicyPenalty(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PolicyPenaltyOnWTs
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byPolicyName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PolicyPenaltyOnWTs
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byPolicyName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PenaltyAbsentAtEvery_LI,
                          o.PenaltyHalfShiftFromEvery_LI,
                          o.MonthlyLateInGraceLimit_Minutes_MGLI,
                          o.PenaltyHalfShiftFromEveryMinutes_MGLI,
                          o.PenaltyAbsentAtEvery_EO,
                          o.PenaltyHalfShiftFromEvery_EO,
                          o.PenaltyAbsentAtEvery_HS,
                          o.KeepHalfShiftFromEvery_HS,
                          o.PenaltyAbsentOnMissingINorOUT,
                          o.PenaltyHalfShiftOnMissingINorOUT,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfDesignation = o.tbl_WPT_PolicyPenaltyOnWTDetail_Designations.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostPolicyPenalty(tbl_WPT_PolicyPenaltyOnWT tbl_WPT_PolicyPenaltyOnWT, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_PolicyPenaltyOnWT.CreatedBy = userName;
                tbl_WPT_PolicyPenaltyOnWT.CreatedDate = DateTime.Now;
                db.tbl_WPT_PolicyPenaltyOnWTs.Add(tbl_WPT_PolicyPenaltyOnWT);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PolicyPenaltyOnWT.ModifiedBy = userName;
                tbl_WPT_PolicyPenaltyOnWT.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PolicyPenaltyOnWT).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_PolicyPenaltyOnWTs.Remove(db.tbl_WPT_PolicyPenaltyOnWTs.Find(tbl_WPT_PolicyPenaltyOnWT.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Policy Penalty Designation

        public async Task<object> GetPolicyPenaltyDesignation(int id)
        {
            var qry = from o in await db.tbl_WPT_PolicyPenaltyOnWTDetail_Designations.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PolicyPenaltyOnWT_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public object GetWCLPolicyPenaltyDesignation()
        {
            return new[]
            {
                new { n = "by Designation", v = "byDesignation" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPolicyPenaltyDesignation(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PolicyPenaltyOnWTDetail_Designations
                                               .Where(w => w.FK_tbl_WPT_PolicyPenaltyOnWT_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PolicyPenaltyOnWTDetail_Designations
                                  .Where(w => w.FK_tbl_WPT_PolicyPenaltyOnWT_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PolicyPenaltyOnWT_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostPolicyPenaltyDesignation(tbl_WPT_PolicyPenaltyOnWTDetail_Designation tbl_WPT_PolicyPenaltyOnWTDetail_Designation, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_PolicyPenaltyOnWTDetail_Designation.CreatedBy = userName;
                tbl_WPT_PolicyPenaltyOnWTDetail_Designation.CreatedDate = DateTime.Now;
                db.tbl_WPT_PolicyPenaltyOnWTDetail_Designations.Add(tbl_WPT_PolicyPenaltyOnWTDetail_Designation);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PolicyPenaltyOnWTDetail_Designation.ModifiedBy = userName;
                tbl_WPT_PolicyPenaltyOnWTDetail_Designation.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PolicyPenaltyOnWTDetail_Designation).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_PolicyPenaltyOnWTDetail_Designations.Remove(db.tbl_WPT_PolicyPenaltyOnWTDetail_Designations.Find(tbl_WPT_PolicyPenaltyOnWTDetail_Designation.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

    }
    public class ShiftRepository : IShift
    {
        private readonly OreasDbContext db;
        public ShiftRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }        

        #region Shift

        public object GetWCLShift()
        {
            return new[]
            {
                new { n = "by Shift Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadShift(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Shifts
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.ShiftName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Shifts
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.ShiftName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.ShiftName,
                          o.Prefix,
                          StartTime = DateTime.Today.Add(o.StartTime).ToString("hh:mm tt"),
                          LateInTime = DateTime.Today.Add(o.LateInTime).ToString("hh:mm:ss tt"),
                          EarlyOutTime = DateTime.Today.Add(o.EarlyOutTime).ToString("hh:mm:ss tt"),
                          EndTime = DateTime.Today.Add(o.EndTime).ToString("hh:mm tt"),
                          CheckInStartTime = DateTime.Today.Add(o.CheckInStartTime).ToString("hh:mm tt"),
                          CheckOutEndTime = DateTime.Today.Add(o.CheckOutEndTime).ToString("hh:mm tt"),
                          o.HalfShiftLimit_Minutes,
                          o.ShiftLimit_Minutes,
                          o.OTMargin_Minutes,
                          o.LI,
                          o.EO,
                          o.OT_HD,
                          o.OT_BeforeShift_NON_HD,
                          o.OT_AfterShift_NON_HD,
                          o.HS,
                          o.HD,
                          o.ShiftLimit,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          TotalAllocated = o.tbl_WPT_Employees.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostShift(tbl_WPT_Shift tbl_WPT_Shift, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_Shift.CreatedBy = userName;
                tbl_WPT_Shift.CreatedDate = DateTime.Now;
                db.tbl_WPT_Shifts.Add(tbl_WPT_Shift);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_Shift.ModifiedBy = userName;
                tbl_WPT_Shift.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_Shift).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Shifts.Remove(db.tbl_WPT_Shifts.Find(tbl_WPT_Shift.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        public async Task<object> GetShift(int id)
        {
            var qry = from o in await db.tbl_WPT_Shifts.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.ShiftName,
                          o.Prefix,
                          StartTime = DateTime.Today.Add(o.StartTime),//new { Hours = o.StartTime.Hours, Minutes= o.StartTime.Minutes, Seconds = o.StartTime.Seconds },
                          LateInTime = DateTime.Today.Add(o.LateInTime),
                          EarlyOutTime = DateTime.Today.Add(o.EarlyOutTime),
                          EndTime = DateTime.Today.Add(o.EndTime),
                          CheckInStartTime = DateTime.Today.Add(o.CheckInStartTime),
                          CheckOutEndTime = DateTime.Today.Add(o.CheckOutEndTime),
                          o.HalfShiftLimit_Minutes,
                          o.ShiftLimit_Minutes,
                          o.OTMargin_Minutes,
                          o.LI,
                          o.EO,
                          o.HS,
                          o.HD,
                          o.OT_HD,
                          o.OT_BeforeShift_NON_HD,
                          o.OT_AfterShift_NON_HD,
                          o.ShiftLimit,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                      };

            return qry.FirstOrDefault();
        }

        #endregion

        #region Default Employees Shift       
        public object GetLBLDefaultEmployeeShift()
        {
            return new[]
            {
                new { n = "By Active", v = "Active" }, new { n = "By InActive", v = "InActive" }
            }.ToList();
        }
        public object GetWCLDefaultEmployeeShift()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byName" }, new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadDefaultEmployeeShift(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Employees
                                               .Where(w => w.FK_tbl_WPT_Shift_ID_Default == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterByLoad)
                                                       ||
                                                       FilterByLoad == "Active" && !w.InactiveDate.HasValue
                                                       ||
                                                       FilterByLoad == "InActive" && w.InactiveDate.HasValue
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Employees
                                               .Where(w => w.FK_tbl_WPT_Shift_ID_Default == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterByLoad)
                                                       ||
                                                       FilterByLoad == "Active" && !w.InactiveDate.HasValue
                                                       ||
                                                       FilterByLoad == "InActive" && w.InactiveDate.HasValue
                                                     )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.EmployeeNo,
                          o.EmployeeName,
                          o.ATEnrollmentNo_Default,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        public async Task<string> PostDefaultEmployeeShiftBulk(int ShiftID = 0, int SectionID = 0, int DesignationID = 0, string BulkBy = "All", string userName = null)
        {

          await db.Database.ExecuteSqlRawAsync("UPDATE [dbo].[tbl_WPT_Employee] SET [FK_tbl_WPT_Shift_ID_Default] =@ShiftID, [ModifiedBy]=@User,[ModifiedDate]=GETDATE()  WHERE ((@SectionID>0 and @DesignationID>0 and FK_tbl_WPT_DepartmentDetail_Section_ID=@SectionID and FK_tbl_WPT_Designation_ID=@DesignationID) or (@SectionID=0 and @DesignationID>0 and FK_tbl_WPT_Designation_ID=@DesignationID) or (@SectionID>0 and @DesignationID=0 and FK_tbl_WPT_DepartmentDetail_Section_ID=@SectionID) ) and ((@BulkBy='All') or (@BulkBy='Active' and InactiveDate is null) or (@BulkBy='InActive' and InactiveDate is not null))",
                  new SqlParameter("@ShiftID", SqlDbType.Int) { Value = ShiftID },
                  new SqlParameter("@SectionID", SqlDbType.Int) { Value = SectionID },
                  new SqlParameter("@DesignationID", SqlDbType.Int) { Value = DesignationID },
                  new SqlParameter("@BulkBy", SqlDbType.VarChar) { Value = BulkBy },
                  new SqlParameter("@User", SqlDbType.VarChar) { Value = userName }
                  );
            
            await db.SaveChangesAsync();

            return "OK";
        }

        #endregion
    }
    public class MachineRepository : IMachine
    {
        private readonly OreasDbContext db;
        public MachineRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        public async Task<tbl_WPT_Machine> GetMachineObject(int id)
        {
            var qry = await db.tbl_WPT_Machines.FindAsync(id);

            return qry;
        }
        public async Task<object> GetMachine(int id)
        {
            var qry = from o in await db.tbl_WPT_Machines.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.Name,
                          o.No,
                          o.IP,
                          o.PortNo,
                          o.AutoClearLogAfterDownload,
                          LastATLogDownloanded = o.LastATLogDownloanded.HasValue ? o.LastATLogDownloanded.Value.ToString() : "",
                          LastATLogClear = o.LastATLogClear.HasValue ? o.LastATLogClear.Value.ToString() : "",
                          o.LastATLogCount,
                          ScheduledDownloadDailyAT = o.ScheduledDownloadDailyAT.HasValue ? DateTime.Today.Add(o.ScheduledDownloadDailyAT.Value) : (DateTime?)null,
                          ScheduledDownloadDailyAT2 = o.ScheduledDownloadDailyAT2.HasValue ? DateTime.Today.Add(o.ScheduledDownloadDailyAT2.Value) : (DateTime?)null,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLMachine()
        {
            return new[]
            {
                new { n = "by Machine Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadMachine(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_Machines
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.Name.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Machines
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.Name.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.Name,
                          o.No,
                          o.IP,
                          o.PortNo,
                          o.AutoClearLogAfterDownload,
                          LastATLogDownloanded = o.LastATLogDownloanded.HasValue ? o.LastATLogDownloanded.Value.ToString("dd-MMM-yy HH:mm tt") : "",
                          LastATLogClear = o.LastATLogClear.HasValue ? o.LastATLogClear.Value.ToString("dd-MMM-yy HH:mm tt") : "",
                          o.LastATLogCount,
                          ScheduledDownloadDailyAT = o.ScheduledDownloadDailyAT.HasValue ? DateTime.Today.Add(o.ScheduledDownloadDailyAT.Value).ToString("hh:mm tt") : "Not Set",
                          ScheduledDownloadDailyAT2 = o.ScheduledDownloadDailyAT2.HasValue ? DateTime.Today.Add(o.ScheduledDownloadDailyAT2.Value).ToString("hh:mm tt") : "Not Set",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostMachine(tbl_WPT_Machine tbl_WPT_Machine, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {    
                tbl_WPT_Machine.CreatedBy = userName;
                tbl_WPT_Machine.CreatedDate = DateTime.Now;
                tbl_WPT_Machine.LastATLogCount = 0;

                if (tbl_WPT_Machine.ScheduledDownloadDailyAT > tbl_WPT_Machine.ScheduledDownloadDailyAT2)
                    return "Second Scheduled Time should be later then First";

                db.tbl_WPT_Machines.Add(tbl_WPT_Machine);
                await db.SaveChangesAsync();

                //if (tbl_WPT_Machine.ScheduledDownloadDailyAT != null)
                //{
                //    await mySchedular.registerJobAsync(tbl_WPT_Machine);
                //}
            }
            else if (operation == "Save Update")
            {                             

                //await mySchedular.unregisterJobAsync(tbl_WPT_Machine);

                tbl_WPT_Machine.ModifiedBy = userName;
                tbl_WPT_Machine.ModifiedDate = DateTime.Now;

                if(tbl_WPT_Machine.ScheduledDownloadDailyAT> tbl_WPT_Machine.ScheduledDownloadDailyAT2)
                    return "Second Scheduled Time should be later then First";

                db.Entry(tbl_WPT_Machine).State = EntityState.Modified;

                db.Entry(tbl_WPT_Machine).Property(x => x.LastATLogDownloanded).IsModified = false;
                db.Entry(tbl_WPT_Machine).Property(x => x.LastATLogClear).IsModified = false;

                await db.SaveChangesAsync();

                //if (tbl_WPT_Machine.ScheduledDownloadDailyAT != null)
                //{
                //    await mySchedular.registerJobAsync(tbl_WPT_Machine);
                //}
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_Machines.Remove(db.tbl_WPT_Machines.Find(tbl_WPT_Machine.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<string> PostMachineAttendance(DataTable _table)
        {

            SqlParameter CRUD_Msg = new SqlParameter("CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter AT = new SqlParameter("AT", SqlDbType.Structured) { TypeName = "dbo.MachineAttendance", Value = _table };
            SqlParameter aTLogDownloadTime = new SqlParameter("ATLogDownloadTime", SqlDbType.DateTime) { Value = DateTime.Now };

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[USP_WPT_DownloadMachineAttendance] @CRUD_Msg OUTPUT,@AT, @ATLogDownloadTime ",
                                                 CRUD_Msg, AT, aTLogDownloadTime);
            return (string)CRUD_Msg.Value;
        }
        public async Task<string> PostMachineAttendanceClear(int MachineID, int NoOfRecords)
        {
            var updatemachine = db.tbl_WPT_Machines.Find(MachineID);
            if (updatemachine != null)
            {
                updatemachine.LastATLogClear = DateTime.Now;
                updatemachine.LastATLogCount = NoOfRecords;

                db.Entry(updatemachine).State = EntityState.Modified;
                await db.SaveChangesAsync();

                return "OK";
            }
            else
            {
                return "Unable to update Machine Record after Clear data";
            }
            

        }
    }
    public class TransactionModeRepository : ITransactionMode
    {
        private readonly OreasDbContext db;
        public TransactionModeRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }        

        public async Task<object> Get(int id)
        {
            var qry = from o in await db.tbl_WPT_TransactionModes.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.TransactionMode,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLTransactionMode()
        {
            return new[]
            {
                new { n = "by Holiday Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> Load(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_TransactionModes
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.TransactionMode.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_TransactionModes
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.TransactionMode.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.TransactionMode,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> Post(tbl_WPT_TransactionMode tbl_WPT_TransactionMode, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_TransactionMode.CreatedBy = userName;
                tbl_WPT_TransactionMode.CreatedDate = DateTime.Now;
                db.tbl_WPT_TransactionModes.Add(tbl_WPT_TransactionMode);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_TransactionMode.ModifiedBy = userName;
                tbl_WPT_TransactionMode.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_TransactionMode).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_TransactionModes.Remove(db.tbl_WPT_TransactionModes.Find(tbl_WPT_TransactionMode.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

    }
    public class ATTimeGraceRepository : IATTimeGrace
    {
        private readonly OreasDbContext db;
        public ATTimeGraceRepository(OreasDbContext db)
        {
            this.db = db;
        }

        #region Master

        public async Task<object> GetATTimeGrace(int id)
        {
            var qry = from o in await db.tbl_WPT_ATTimeGraces.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DateFrom = o.DateFrom.ToString("dd-MMM-yyyy"),
                          DateTill = o.DateTill.ToString("dd-MMM-yyyy"),
                          o.Ignore_LI,
                          o.Ignore_EO,
                          o.Ignore_HS,
                          o.Ignore_OT,
                          o.Ignore_Present,
                          o.Ignore_Absent,
                          o.Ignore_AutoLeaves,
                          o.Ignore_Holidays,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLATTimeGrace()
        {
            return new[]
            {
                new { n = "by Doc No", v = "byDocNo" },new { n = "by Employee Name", v = "byEmployeeName" },new { n = "by AT No", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadATTimeGrace(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_ATTimeGraces
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDocNo" && w.DocNo.ToString().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_ATTimeGraceEmployeeLinks.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_ATTimeGraceEmployeeLinks.Any(a => a.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower()))
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ATTimeGraces
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDocNo" && w.DocNo.ToString().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_ATTimeGraceEmployeeLinks.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_ATTimeGraceEmployeeLinks.Any(a => a.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower()))
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DateFrom = o.DateFrom.ToString("dd-MMM-yyyy"),
                          DateTill = o.DateTill.ToString("dd-MMM-yyyy"),
                          o.Ignore_LI,
                          o.Ignore_EO,
                          o.Ignore_HS,
                          o.Ignore_OT,
                          o.Ignore_Present,
                          o.Ignore_Absent,
                          o.Ignore_AutoLeaves,
                          o.Ignore_Holidays,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          TotalEmployees = o.tbl_WPT_ATTimeGraceEmployeeLinks?.Count() ?? 0
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostATTimeGrace(tbl_WPT_ATTimeGrace tbl_WPT_ATTimeGrace, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100 };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_ATTimeGrace.CreatedBy = userName;
                tbl_WPT_ATTimeGrace.CreatedDate = DateTime.Now;
                //db.tbl_WPT_ATTimeGraces.Add(tbl_WPT_ATTimeGrace);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_ATTimeGrace.ModifiedBy = userName;
                tbl_WPT_ATTimeGrace.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_ATTimeGrace).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_ATTimeGraces.Remove(db.tbl_WPT_ATTimeGraces.Find(tbl_WPT_ATTimeGrace.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_ATTimeGrace] 
                       @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                      ,@ID={3},@DocNo={4},@DateFrom={5},@DateTill={6},@Ignore_LI={7},@Ignore_EO={8},@Ignore_HS={9},@Ignore_OT={10}
                      ,@Ignore_Present={11},@Ignore_Absent={12},@Ignore_AutoLeaves={13},@Ignore_Holidays={14},@Remarks={15}
                      ,@CreatedBy={16},@CreatedDate={17},@ModifiedBy={18},@ModifiedDate={19}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_ATTimeGrace.ID, tbl_WPT_ATTimeGrace.DocNo, tbl_WPT_ATTimeGrace.DateFrom, tbl_WPT_ATTimeGrace.DateTill, tbl_WPT_ATTimeGrace.Ignore_LI, tbl_WPT_ATTimeGrace.Ignore_EO, tbl_WPT_ATTimeGrace.Ignore_HS, tbl_WPT_ATTimeGrace.Ignore_OT,
                tbl_WPT_ATTimeGrace.Ignore_Present, tbl_WPT_ATTimeGrace.Ignore_Absent, tbl_WPT_ATTimeGrace.Ignore_AutoLeaves, tbl_WPT_ATTimeGrace.Ignore_Holidays, tbl_WPT_ATTimeGrace.Remarks,
                tbl_WPT_ATTimeGrace.CreatedBy, tbl_WPT_ATTimeGrace.CreatedDate, tbl_WPT_ATTimeGrace.ModifiedBy, tbl_WPT_ATTimeGrace.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }


        #endregion

        #region Detail Link Employee
        public async Task<object> GetATTimeGraceEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_ATTimeGraceEmployeeLinks.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ATTimeGrace_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLATTimeGraceEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadATTimeGraceEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();
            pageddata.PageSize = 10;

            int NoOfRecords = await db.tbl_WPT_ATTimeGraceEmployeeLinks
                                               .Where(w=> w.FK_tbl_WPT_ATTimeGrace_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ATTimeGraceEmployeeLinks
                                  .Where(w => w.FK_tbl_WPT_ATTimeGrace_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ATTimeGrace_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [AT #: " + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostATTimeGraceEmployee(tbl_WPT_ATTimeGraceEmployeeLink tbl_WPT_ATTimeGraceEmployeeLink, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_ATTimeGraceEmployeeLink.CreatedBy = userName;
                tbl_WPT_ATTimeGraceEmployeeLink.CreatedDate = DateTime.Now;
                db.tbl_WPT_ATTimeGraceEmployeeLinks.Add(tbl_WPT_ATTimeGraceEmployeeLink);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_ATTimeGraceEmployeeLink.ModifiedBy = userName;
                tbl_WPT_ATTimeGraceEmployeeLink.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_ATTimeGraceEmployeeLink).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_ATTimeGraceEmployeeLinks.Remove(db.tbl_WPT_ATTimeGraceEmployeeLinks.Find(tbl_WPT_ATTimeGraceEmployeeLink.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<string> ATTimeGraceEmployeeUploadExcelFile(List<string> ATGraceExcelDataList, string operation, string userName, int MasterID = 0)
        {
            if (operation == "Save New" && MasterID > 0)
            {
                var empObject = (tbl_WPT_Employee)null;

                List<tbl_WPT_ATTimeGraceEmployeeLink> ATTimeGraceEmployeeLinks = new List<tbl_WPT_ATTimeGraceEmployeeLink>();

                foreach (var item in ATGraceExcelDataList)
                {
                    empObject = await db.tbl_WPT_Employees.Where(w => w.ATEnrollmentNo_Default == item).OrderByDescending(o => o.JoiningDate).FirstOrDefaultAsync();

                    if (empObject != null)
                    {
                        if (db.tbl_WPT_ATTimeGraceEmployeeLinks.Where(w => w.FK_tbl_WPT_ATTimeGrace_ID == MasterID && w.FK_tbl_WPT_Employee_ID == empObject.ID).Count() == 0)
                        {
                            ATTimeGraceEmployeeLinks.Add(new tbl_WPT_ATTimeGraceEmployeeLink() { ID = 0, FK_tbl_WPT_ATTimeGrace_ID = MasterID, FK_tbl_WPT_Employee_ID = empObject.ID, CreatedBy = userName, CreatedDate = DateTime.Now });
                        }
                    }

                }
                if (ATTimeGraceEmployeeLinks.Count() > 0)
                {
                    db.tbl_WPT_ATTimeGraceEmployeeLinks.AddRange(ATTimeGraceEmployeeLinks);
                    db.SaveChanges();
                }

            }
            else
            {
                return "Wrong Operation";
            }

            return "OK";
        }

        #endregion
    }
    public class AttendanceRepository : IAttendance
    {
        private readonly OreasDbContext db;
        public AttendanceRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }
        public async Task<object> GetLastOpenMonth()
        {   
               var qry = from o in await db.tbl_WPT_CalendarYear_Monthss.OrderBy(o => o.MonthStart).Where(w => w.IsClosed == false).ToListAsync()
                      select new
                      {
                          o.ID,
                          MonthStart = o.MonthStart.ToString("dd-MMM-yyyy"),
                          MonthEnd = o.MonthEnd.ToString("dd-MMM-yyyy"),
                          o.IsClosed,
                          CalendarYearID = o.FK_tbl_WPT_CalendarYear_ID,
                          o.tbl_WPT_CalendarYear.CalendarYear
                      };

            return qry.FirstOrDefault();
        }

        #region  Attendance Individual

        public async Task<object> GetAttendanceIndividual(int id)
        {
            var qry = from o in await db.tbl_WPT_AttendanceLogs.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.FK_tbl_WPT_Employee_ID.HasValue ? o.tbl_WPT_Employee.EmployeeName : "",
                          o.FK_tbl_WPT_Machine_ID,
                          FK_tbl_WPT_Machine_IDName = o.FK_tbl_WPT_Machine_ID.HasValue ? o.tbl_WPT_Machine.Name : "",
                          o.ATEnrollmentNo,
                          o.ATInOutMode,
                          ATInOutModeName = db.tbl_WPT_ATInOutModes.Where(w => w.ATInOutMode == o.ATInOutMode).FirstOrDefault().ATInOutModeName,
                          ATDateTime = o.ATDateTime.ToString(),
                          o.Loggedby
                      };

            return qry.FirstOrDefault();
        }
        public async Task<PagedData<object>> LoadAttendanceIndividual(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            var emp = db.tbl_WPT_Employees.Where(w => w.ID == MasterID).FirstOrDefault();
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_AttendanceLogs
                                               .Where(w=> w.FK_tbl_WPT_Employee_ID == MasterID || w.ATEnrollmentNo == emp.ATEnrollmentNo_Default)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                     )
                                               .Where(w=> w.ATDateTime >= FilterValueByDateRangeFrom && w.ATDateTime <= FilterValueByDateRangeTill)
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));

            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_AttendanceLogs                      
                                        .Where(w => w.FK_tbl_WPT_Employee_ID == MasterID || w.ATEnrollmentNo == emp.ATEnrollmentNo_Default)
                                        .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                          )
                                        .Where(w => w.ATDateTime >= FilterValueByDateRangeFrom && w.ATDateTime <= FilterValueByDateRangeTill)
                                        .OrderByDescending(i => i.ATDateTime).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.FK_tbl_WPT_Employee_ID.HasValue ? o.tbl_WPT_Employee.EmployeeName : "",
                          o.FK_tbl_WPT_Machine_ID,
                          FK_tbl_WPT_Machine_IDName = o.FK_tbl_WPT_Machine_ID.HasValue? o.tbl_WPT_Machine.Name : "",
                          o.ATEnrollmentNo,
                          o.ATInOutMode,
                          ATInOutModeName = db.tbl_WPT_ATInOutModes.Where(w=> w.ATInOutMode == o.ATInOutMode)?.FirstOrDefault().ATInOutModeName ?? "No Mode Found",
                          ATDateTime = o.ATDateTime.ToString("dd-MMM-yy hh:mm:ss tt"),
                          o.Loggedby
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostAttendanceIndividual(tbl_WPT_AttendanceLog tbl_WPT_AttendanceLog, string operation = "", string userName = "")
        {
            tbl_WPT_AttendanceLog.Loggedby = 1;
            if (operation == "Save New")
            {
                if (tbl_WPT_AttendanceLog.FK_tbl_WPT_Employee_ID.HasValue == false && string.IsNullOrEmpty(tbl_WPT_AttendanceLog.ATEnrollmentNo))
                {
                    return "Employee or AT No should be selected";
                }
                db.tbl_WPT_AttendanceLogs.Add(tbl_WPT_AttendanceLog);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                if (tbl_WPT_AttendanceLog.FK_tbl_WPT_Employee_ID.HasValue == false && string.IsNullOrEmpty(tbl_WPT_AttendanceLog.ATEnrollmentNo))
                {
                    return "Employee or AT No should be selected";
                }
                db.Entry(tbl_WPT_AttendanceLog).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_AttendanceLogs.Remove(db.tbl_WPT_AttendanceLogs.Find(tbl_WPT_AttendanceLog.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region attendance Together
        public object GetWCLATTogether()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by ATNo", v = "byATNo" },new { n = "by Designation", v = "byDesignation" },new { n = "by Department", v = "byDepartment" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadATTogether(int CurrentPage = 1, DateTime? MonthStart = null, DateTime? MonthEnd = null, string FilterByText = null, string FilterValueByText = null)
        {
            if (MonthEnd == null)
                MonthEnd = DateTime.Now;
            if (MonthStart == null)
                MonthStart = DateTime.Now;

            PagedData<object> pageddata = new PagedData<object>();
            pageddata.PageSize = 5;

            int NoOfRecords = await db.tbl_WPT_Employees
                                               .Where(w =>
                                                        w.JoiningDate <= MonthEnd
                                                        &&
                                                        (w.InactiveDate.HasValue ?  w.InactiveDate.Value >= MonthStart : true)
                                                     )
                                                .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byEmployeeName" && w.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byATNo" && w.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower()
                                                        ||
                                                        FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byDepartment" && w.tbl_WPT_DepartmentDetail_Section.tbl_WPT_Department.DepartmentName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_Employees
                                  .Where(w =>
                                         w.JoiningDate <= MonthEnd
                                         &&
                                         (w.InactiveDate.HasValue ? w.InactiveDate.Value >= MonthStart : true)
                                      )
                                  .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byEmployeeName" && w.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                            ||
                                            FilterByText == "byATNo" && w.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower()
                                            ||
                                            FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                            ||
                                            FilterByText == "byDepartment" && w.tbl_WPT_DepartmentDetail_Section.tbl_WPT_Department.DepartmentName.ToLower().Contains(FilterValueByText.ToLower())
                                           )
                                  .OrderBy(i => i.JoiningDate).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.ATEnrollmentNo_Default,
                          o.EmployeeName
                      };

            //var aa = qry.Skip(1).Take(1).Select(x => new { x.ID, x.ATEnrollmentNo_Default }).ToList();

   
            //-----------------------------------------------//
            var TotalP = new SqlParameter("TotalP", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalA = new SqlParameter("TotalA", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalAHD = new SqlParameter("TotalAHD", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalAP = new SqlParameter("TotalAP", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalHD = new SqlParameter("TotalHD", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalOT = new SqlParameter("TotalOT", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalOTD = new SqlParameter("TotalOTD", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalLI = new SqlParameter("TotalLI", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalEO = new SqlParameter("TotalEO", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalHS = new SqlParameter("TotalHS", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalHSP = new SqlParameter("TotalHSP", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
            var TotalFinalP = new SqlParameter("TotalFinalP", SqlDbType.Float) { Direction = System.Data.ParameterDirection.Output };
            var TotalDays = new SqlParameter("TotalDays", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };

            var MonthFrom = new SqlParameter("MonthFrom", SqlDbType.Date) { Value = MonthStart };
            var MonthTill = new SqlParameter("MonthTill", SqlDbType.Date) { Value = MonthEnd };

            var EmpID = new SqlParameter("EmpID", SqlDbType.Int) { Value = 0 };
            var IsDetail = new SqlParameter("IsDetail", SqlDbType.Int) { Value = 2 };
            var TotalLeaveValue = new SqlParameter("TotalLeaveValue", SqlDbType.Float) { Direction = System.Data.ParameterDirection.Output };
            var TotalLeaveValueNonPaid = new SqlParameter("TotalLeaveValueNonPaid", SqlDbType.Float) { Direction = System.Data.ParameterDirection.Output };

            List<object> list = new List<object>();


            foreach (var item in qry)
            {
                TotalP.Value = 0; TotalA.Value = 0; TotalAHD.Value = 0; TotalAP.Value = 0; TotalHD.Value = 0; TotalOT.Value = 0; TotalOTD.Value = 0; TotalLI.Value = 0; TotalEO.Value = 0; TotalHS.Value = 0; TotalHSP.Value = 0; TotalFinalP.Value = 0; TotalDays.Value = 0; TotalLeaveValue.Value = 0; TotalLeaveValueNonPaid.Value = 0;
                EmpID.Value = item.ID;
                var getAT = from o in await db.GetATOutComeOfEmployees.FromSqlRaw("EXECUTE [dbo].[USP_WPT_GetATOutComeOfEmployee] @IsDetail={0},@EmpID={1},@MonthFrom={2},@MonthTill={3},@TotalP={4} OUTPUT,@TotalA={5} OUTPUT,@TotalAHD={6} OUTPUT,@TotalAP={7} OUTPUT,@TotalHD={8} OUTPUT,@TotalOT={9} OUTPUT,@TotalOTD={10} OUTPUT,@TotalLI={11} OUTPUT,@TotalEO={12} OUTPUT,@TotalHS={13} OUTPUT,@TotalHSP={14} OUTPUT,@TotalFinalP={15} OUTPUT,@TotalDays={16} OUTPUT,@TotalLeaveValue={17} OUTPUT,@TotalLeaveValueNonPaid={18} OUTPUT ",
                IsDetail, EmpID, MonthFrom, MonthTill, TotalP, TotalA, TotalAHD, TotalAP, TotalHD, TotalOT, TotalOTD, TotalLI, TotalEO, TotalHS, TotalHSP, TotalFinalP, TotalDays, TotalLeaveValue, TotalLeaveValueNonPaid).ToListAsync()
                           select new
                           {
                               InstanceDate = o.InstanceDate?.ToString("yyyy-MM-dd"),
                               CheckIn = o.CheckIn?.ToString("HH:mm:ss") ?? "xxx",
                               CheckOut = o.CheckOut?.ToString("HH:mm:ss") ?? "xxx",
                               o.P,
                               o.A,
                               o.AP,
                               o.AHD,
                               o.HD,
                               o.LI,
                               o.EO,
                               o.HS,
                               o.HSP,
                               ColorScheme = o.HD.Value ? "yellow" : o.P.Value ? "green" : o.A.Value || o.AP.Value || o.AHD.Value ? "red" : "white"

                           };
                list.Add(new { Name = item.EmployeeName, AT = getAT, TotalFinalP = (double)TotalFinalP.Value, TotalOT = (int)TotalOT.Value, TotalLI = (int)TotalLI.Value, TotalEO = (int)TotalEO.Value, TotalHS = (int)TotalHS.Value, TotalHSP = (int)TotalHSP.Value, TotalAP = (int)TotalAP.Value, TotalLeaveValue= (double)TotalLeaveValue.Value });

            }

            pageddata.Data = list.ToList();

            return pageddata;
        }

        #endregion

        #region Report     

        public List<ReportCallingModel> GetRLAttendance()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Calendar Format",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Attendance",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){ "ATNo", "Department", "Designation", "Gender" },
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Attendance By Part",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){ "ATNo", "Department", "Designation", "Gender" },
                    SeekBy = new List<string>(){ "Present", "Absent", "OverTime" }
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Attendance Absent",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){ "ATNo", "Department", "Designation", "Gender" },
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Missing Punch",
                    GroupBy = new List<string>(){ "Employee", "Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Department", "Designation" },
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Attendance Log",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Department", "Designation" },
                    SeekBy = null
                }
            };
        }
        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Calendar Format")
            {
                return await Task.Run(() => CalendarFormatAsync(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Attendance")
            {                
                return await Task.Run(() => Attendance(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Attendance By Part")
            {
                return await Task.Run(() => AttendanceByPart(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Attendance Absent")
            {
                return await Task.Run(() => AttendanceAbsent(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Missing Punch")
            {
                return await Task.Run(() => MissingPunch(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Attendance Log")
            {
                return await Task.Run(() => AttendanceLog(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }

        private async Task<byte[]> AttendanceByPart(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {

            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + " " + SeekBy + "-----", true, true, true);

            //--------------------------------5 column table of table------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10),//Sno
                        (float)(PageSize.A4.GetWidth()*0.10),//AT
                        (float)(PageSize.A4.GetWidth()*0.60),//Name                    
                        (float)(PageSize.A4.GetWidth()*0.10), //P/A
                        (float)(PageSize.A4.GetWidth()*0.10) //Days
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            string Periodrow = "Period Date From: " + datefrom.Value.ToString("dd-MMM-yyyy") + " To " + datetill.Value.ToString("dd-MMM-yyyy");

            page.InsertContent(new Cell().Add(new Paragraph().Add(Periodrow).SetBorder(Border.NO_BORDER).SetKeepTogether(true)));
      
            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_ATCollective] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                           GroupBy == "Designation" ? "Designation" :
                                           "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SeekBy)).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Days")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                command.CommandTimeout = 0;

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SeekBy)).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Days")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(
                            SeekBy=="Present" ? sqlReader["P"].ToString() : SeekBy == "Absent" ? sqlReader["A"].ToString() : sqlReader["OT"].ToString()
                            )).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["TD"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        SNo = SNo + 1;
                    }
                }

            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> Attendance(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + " " + SeekBy + "-----", false);

            //--------------------------------18 column table of table------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.05),//Sno
                        (float)(PageSize.A4.GetWidth()*0.05),//AT
                        (float)(PageSize.A4.GetWidth()*0.25),//Name                    
                        (float)(PageSize.A4.GetWidth()*0.04), //P
                        (float)(PageSize.A4.GetWidth()*0.04), //HD
                        (float)(PageSize.A4.GetWidth()*0.04), //A
                        (float)(PageSize.A4.GetWidth()*0.04), //AHD
                        (float)(PageSize.A4.GetWidth()*0.04), //LI
                        (float)(PageSize.A4.GetWidth()*0.04), //EO
                        (float)(PageSize.A4.GetWidth()*0.04), //HS
                        (float)(PageSize.A4.GetWidth()*0.04), //HSP
                        (float)(PageSize.A4.GetWidth()*0.04),
                        (float)(PageSize.A4.GetWidth()*0.04),
                        (float)(PageSize.A4.GetWidth()*0.04),
                        (float)(PageSize.A4.GetWidth()*0.04),
                        (float)(PageSize.A4.GetWidth()*0.04),
                        (float)(PageSize.A4.GetWidth()*0.04),
                        (float)(PageSize.A4.GetWidth()*0.04)
                }
            ).UseAllAvailableWidth().SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            string Periodrow = "Period Date From: " + datefrom.Value.ToString("dd-MMM-yyyy") + " To " + datetill.Value.ToString("dd-MMM-yyyy");

            page.InsertContent(new Cell().Add(new Paragraph().Add(Periodrow).SetBorder(Border.NO_BORDER).SetKeepTogether(true)));
            int totalP = 0; int totalOT = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_ATCollective] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                           GroupBy == "Designation" ? "Designation" :
                                           "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("P")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HD")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("A")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AHD")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AP")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("LI")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("EO")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HSP")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("PL")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("NPL")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OTD")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Days")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OT")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("TFP")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                command.CommandTimeout = 0;

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                      
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 18).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 18).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("P")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HD")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("A")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AHD")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AP")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("LI")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("EO")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HSP")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("PL")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("NPL")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OTD")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Days")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OT")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("TFP")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));



                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["P"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["HD"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["A"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AHD"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AP"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LI"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EO"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["HS"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["HSP"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["TLV"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["TLVNP"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["OTD"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["TD"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["OT"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["TFP"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        SNo = SNo + 1;
                        totalP += Convert.ToInt32(sqlReader["P"]);
                        totalOT += Convert.ToInt32(sqlReader["OT"]);
                    }
                }

            }

            pdftableMain.AddCell(new Cell(1, 18).Add(new Paragraph().Add("")).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("")).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(totalP.ToString())).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add("")).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(totalOT.ToString())).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("")).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> AttendanceLog(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            string Periodrow = "Period Date From: " + datefrom.Value.ToString("dd-MMM-yyyy") + " To " + datetill.Value.ToString("dd-MMM-yyyy");

            page.InsertContent(new Cell().Add(new Paragraph().Add(Periodrow).SetBorder(Border.NO_BORDER).SetKeepTogether(true)));

            //--------------------------------8 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.07),//S.No
                        (float)(PageSize.A4.GetWidth()*0.07),//AT
                        (float)(PageSize.A4.GetWidth()*0.23),//Emp Name
                        (float)(PageSize.A4.GetWidth()*0.16),//Depar
                        (float)(PageSize.A4.GetWidth()*0.17),//Design
                        (float)(PageSize.A4.GetWidth()*0.05),//Log by
                        (float)(PageSize.A4.GetWidth()*0.08),//Mode
                        (float)(PageSize.A4.GetWidth()*0.08),//Date 
                        (float)(PageSize.A4.GetWidth()*0.08)//Time 
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_ATCollective] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;
                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;

                bool firstrow = true;


                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {
                            if (string.IsNullOrEmpty(GroupbyFieldName))
                            {
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Log By")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Mode")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Date")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Time")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            }
                            firstrow = false;
                        }
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Log By")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Mode")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Date")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Time")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Loggedby"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATInOutModeName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["ATDateTime"]).ToString("dd-MM-yy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["ATDateTime"]).ToString("hh:mm:tt"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;
                    }
                }

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> MissingPunch(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            string Periodrow = "Period Date From: " + datefrom.Value.ToString("dd-MMM-yyyy") + " To " + datetill.Value.ToString("dd-MMM-yyyy");

            page.InsertContent(new Cell().Add(new Paragraph().Add(Periodrow).SetBorder(Border.NO_BORDER).SetKeepTogether(true)));

            //--------------------------------5 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10),//
                        (float)(PageSize.A4.GetWidth()*0.10),//
                        (float)(PageSize.A4.GetWidth()*0.40),//
                        (float)(PageSize.A4.GetWidth()*0.20),//
                        (float)(PageSize.A4.GetWidth()*0.20)//
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_ATCollective] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Employee" ? "EmployeeName" :
                                          GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Check-IN")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Check-Out")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                int SNo = 1;                

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Check-IN")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Check-Out")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));



                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["FirstCheckIn"].ToString() != "" ? ((DateTime)sqlReader["FirstCheckIn"]).ToString("dd-MM-yy hh:mm:tt") : "Missing")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LastCheckOut"].ToString() != "" ? ((DateTime)sqlReader["LastCheckOut"]).ToString("dd-MM-yy hh:mm:tt") : "Missing")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;
                    }
                }

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> AttendanceAbsent(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true, true, true);

            //--------------------------------5 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10),//Sno
                        (float)(PageSize.A4.GetWidth()*0.10),//AT
                        (float)(PageSize.A4.GetWidth()*0.30),//Name                    
                        (float)(PageSize.A4.GetWidth()*0.25), //Department
                        (float)(PageSize.A4.GetWidth()*0.25) //Designation
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            string Periodrow = "Period Date From: " + datefrom.Value.ToString("dd-MMM-yyyy") + " To " + datetill.Value.ToString("dd-MMM-yyyy");

            page.InsertContent(new Cell().Add(new Paragraph().Add(Periodrow).SetBorder(Border.NO_BORDER).SetKeepTogether(true)));

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_ATCollective] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;
                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;                
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                }

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        SNo = SNo + 1;
                    }
                }

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> CalendarFormatAsync(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 30f, "", true);

            //--------------------------------7 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.14),
                        (float)(PageSize.A4.GetWidth()*0.14),
                        (float)(PageSize.A4.GetWidth()*0.14),
                        (float)(PageSize.A4.GetWidth()*0.14),
                        (float)(PageSize.A4.GetWidth()*0.14),
                        (float)(PageSize.A4.GetWidth()*0.14),
                        (float)(PageSize.A4.GetWidth()*0.14)
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            //--------------------------------Day Detail------------------------------//
            Table CalenderCell_Table = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.25),(float)(PageSize.A4.GetWidth()*0.25),
                        (float)(PageSize.A4.GetWidth()*0.25),(float)(PageSize.A4.GetWidth()*0.25)
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            string firstdayName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.DayNames[(int)datefrom.Value.DayOfWeek].ToLower();

            int ColNo = 0;

            if (firstdayName == "sunday") ColNo = 0;
            if (firstdayName == "monday") ColNo = 1;
            if (firstdayName == "tuesday") ColNo = 2;
            if (firstdayName == "wednesday") ColNo = 3;
            if (firstdayName == "thursday") ColNo = 4;
            if (firstdayName == "friday") ColNo = 5;
            if (firstdayName == "saturday") ColNo = 6;

            double LV = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "SELECT  TOP (1) dbo.tbl_WPT_Employee.EmployeeNo, dbo.tbl_WPT_Employee.EmployeeName, dbo.tbl_WPT_Designation.Designation, dbo.tbl_WPT_Employee.ATEnrollmentNo_Default, dbo.tbl_WPT_Department.DepartmentName FROM  dbo.tbl_WPT_Employee INNER JOIN dbo.tbl_WPT_Designation ON dbo.tbl_WPT_Employee.FK_tbl_WPT_Designation_ID = dbo.tbl_WPT_Designation.ID INNER JOIN dbo.tbl_WPT_DepartmentDetail_Section ON dbo.tbl_WPT_Employee.FK_tbl_WPT_DepartmentDetail_Section_ID = dbo.tbl_WPT_DepartmentDetail_Section.ID INNER JOIN dbo.tbl_WPT_Department ON dbo.tbl_WPT_DepartmentDetail_Section.FK_tbl_WPT_Department_ID = dbo.tbl_WPT_Department.ID WHERE (dbo.tbl_WPT_Employee.ID = @EmpID)";
                command.CommandType = CommandType.Text;

                var IDparameter = command.CreateParameter();
                IDparameter.ParameterName = "@EmpID";
                IDparameter.Value = id;
                IDparameter.DbType = DbType.Int32;

                command.Parameters.Add(IDparameter);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {                        
                        pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Attendance Record of " + sqlReader["EmployeeName"].ToString() + "[ENo:" + sqlReader["EmployeeNo"].ToString() + "]" + "[MNo:" + sqlReader["ATEnrollmentNo_Default"].ToString() + "] " + datefrom.Value.ToString("dd-MMM-yyyy") + " To " + datetill.Value.ToString("dd-MMM-yyyy"))).SetTextAlignment(TextAlignment.CENTER).SetFontSize(8));
                    }
                }

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Sunday")).SetBorder(new SolidBorder(0.5f)));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Monday")).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 255, 153)));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Tuesday")).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(224, 224, 209)));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wednesday")).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(179, 255, 255)));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Thursday")).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(242, 242, 242)));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Friday")).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(214, 245, 214)));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Saturday")).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(179, 217, 255)));

                //-----------------------------------------detail--------------------------------------//
                command.Parameters.Remove(IDparameter);
                command.CommandText = "EXECUTE [dbo].[USP_WPT_GetATOutComeOfEmployee] 1,@EmpID,@DateFrom,@DateTill,@TotalP OUTPUT,@TotalA OUTPUT,@TotalAHD OUTPUT,@TotalAP OUTPUT,@TotalHD OUTPUT,@TotalOT OUTPUT,@TotalOTD OUTPUT,@TotalLI OUTPUT,@TotalEO OUTPUT,@TotalHS OUTPUT,@TotalHSP OUTPUT,@TotalFinalP OUTPUT,@TotalDays OUTPUT,@TotalLeaveValue OUTPUT,@TotalLeaveValueNonPaid OUTPUT ";

                var EmpID = new SqlParameter("@EmpID", SqlDbType.Int) { Value= id };
                var PDateFrom = new SqlParameter("@DateFrom", SqlDbType.Date) { Value = datefrom.Value.ToString() };
                var PDateTill = new SqlParameter("@DateTill", SqlDbType.Date) { Value = datetill.Value.ToString() };

                var TotalP = new SqlParameter("@TotalP", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalA = new SqlParameter("@TotalA", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalAP = new SqlParameter("@TotalAP", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalAHD = new SqlParameter("@TotalAHD", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalHD = new SqlParameter("@TotalHD", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalOT = new SqlParameter("@TotalOT", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalOTD = new SqlParameter("@TotalOTD", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalLI = new SqlParameter("@TotalLI", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalEO = new SqlParameter("@TotalEO", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalHS = new SqlParameter("@TotalHS", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalHSP = new SqlParameter("@TotalHSP", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalFinalP = new SqlParameter("@TotalFinalP", SqlDbType.Float) { Direction = System.Data.ParameterDirection.Output };
                var TotalDays = new SqlParameter("@TotalDays", SqlDbType.Int) { Direction = System.Data.ParameterDirection.Output };
                var TotalLeaveValue = new SqlParameter("@TotalLeaveValue", SqlDbType.Float) { Direction = System.Data.ParameterDirection.Output };
                var TotalLeaveValueNonPaid = new SqlParameter("@TotalLeaveValueNonPaid", SqlDbType.Float) { Direction = System.Data.ParameterDirection.Output };

                
                
                command.Parameters.Add(EmpID);
                command.Parameters.Add(PDateFrom);
                command.Parameters.Add(PDateTill);
                command.Parameters.Add(TotalP);
                command.Parameters.Add(TotalA);
                command.Parameters.Add(TotalAHD);
                command.Parameters.Add(TotalAP);
                command.Parameters.Add(TotalHD);
                command.Parameters.Add(TotalOT);
                command.Parameters.Add(TotalOTD);
                command.Parameters.Add(TotalLI);
                command.Parameters.Add(TotalEO);
                command.Parameters.Add(TotalHS); 
                command.Parameters.Add(TotalHSP);
                command.Parameters.Add(TotalFinalP);
                command.Parameters.Add(TotalDays);
                command.Parameters.Add(TotalLeaveValue); 
                command.Parameters.Add(TotalLeaveValueNonPaid);
                double TotalWDValue = 0;
                //-----------setting empty cell before date start --------------------//
                for (int i = 1; i <= ColNo; i++)
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("")).SetBorder(new SolidBorder(0.5f)));
                }

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        CalenderCell_Table.AddCell(new Cell(1, 4).Add(new Paragraph().Add(((DateTime)sqlReader["InstanceDate"]).ToString("dd-MMMM"))).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorderBottom(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(176, 196, 222)));

                        //------------------------------------------------------------//                        
                        LV = (double)sqlReader["LeaveValue"];

                        if ((bool)sqlReader["IsPaidLeave"] && LV > 0)
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("PL: " + LV.ToString())).SetFontSize(5).SetBackgroundColor(new DeviceRgb(215, 252, 3)).SetBorderBottom(new SolidBorder(0.5f)));
                        else
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("PL: 0")).SetFontSize(5).SetBorderBottom(new SolidBorder(0.5f)));


                        if (!(bool)sqlReader["IsPaidLeave"] && LV > 0)
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("NPL: " + LV.ToString())).SetFontSize(3).SetBackgroundColor(new DeviceRgb(215, 220, 3)).SetBorderBottom(new SolidBorder(0.5f)));
                        else
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("NPL: 0")).SetFontSize(3).SetBorderBottom(new SolidBorder(0.5f)));

                        TotalWDValue = TotalWDValue + Convert.ToDouble(sqlReader["WDValue"]) + LV;
                        CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add(sqlReader["WDValue"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        if ((bool)sqlReader["P"])
                            CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("P")).SetFontSize(6).SetTextAlignment(TextAlignment.CENTER).SetBorderBottom(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(0, 179, 0)));

                        else if ((bool)sqlReader["A"])
                            CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("A")).SetFontSize(6).SetTextAlignment(TextAlignment.CENTER).SetBorderBottom(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 153, 153)));

                        else if ((bool)sqlReader["AP"])
                            CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("AP")).SetFontSize(6).SetTextAlignment(TextAlignment.CENTER).SetBorderBottom(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 150, 150)));

                        else if ((bool)sqlReader["AHD"])
                            CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("AHD")).SetFontSize(6).SetTextAlignment(TextAlignment.CENTER).SetBorderBottom(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 163, 102)));

                        else if ((bool)sqlReader["HD"])
                            CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("HD")).SetFontSize(6).SetTextAlignment(TextAlignment.CENTER).SetBorderBottom(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(230, 230, 0)));

                        else
                            CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("X")).SetFontSize(5).SetBold().SetBorderBottom(new SolidBorder(0.5f)));



                        if ((bool)sqlReader["LI"])
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("LI")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 150, 150)));
                        else
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("LI")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LiSM"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        if ((bool)sqlReader["EO"])
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("EO")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 150, 150)));
                        else
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("EO")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EoSM"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));


                        if ((bool)sqlReader["HS"])
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 150, 150)));
                        else
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        if ((bool)sqlReader["HSP"])
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("HSP")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetBackgroundColor(new DeviceRgb(255, 150, 150)));
                        else
                            CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("HSP")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                       
                        CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add("OT")).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));
                        CalenderCell_Table.AddCell(new Cell(1, 1).Add(new Paragraph().Add(sqlReader["OT"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("IN")).SetFontSize(5).SetBorder(new SolidBorder(0.5f)));
                        CalenderCell_Table.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.IsNullOrEmpty(sqlReader["CheckIn"].ToString()) ? " " : ((DateTime)sqlReader["CheckIn"]).ToString("dd-MM-yy HH:mm:ss"))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        CalenderCell_Table.AddCell(new Cell().Add(new Paragraph().Add("OUT")).SetFontSize(5).SetBorder(new SolidBorder(0.5f)));
                        CalenderCell_Table.AddCell(new Cell(1, 3).Add(new Paragraph().Add(string.IsNullOrEmpty(sqlReader["CheckOut"].ToString()) ? " " : ((DateTime)sqlReader["CheckOut"]).ToString("dd-MM-yy HH:mm:ss"))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(6).SetBorder(new SolidBorder(0.5f)));

                        CalenderCell_Table.AddCell(new Cell(1, 4).Add(new Paragraph().Add("R: " + sqlReader["Remarks"].ToString())).SetTextAlignment(TextAlignment.LEFT).SetFontSize(4).SetBorder(new SolidBorder(0.5f)));

                        pdftableMain.AddCell(CalenderCell_Table);

                        if (ColNo == 6)
                        {

                            ColNo = 0;
                        }
                        else
                        {
                            ColNo = ColNo + 1;
                        }



                        CalenderCell_Table = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.25),(float)(PageSize.A4.GetWidth()*0.25),
                        (float)(PageSize.A4.GetWidth()*0.25),(float)(PageSize.A4.GetWidth()*0.25)}
                        ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

                    }
                }

                //--------insert empty columns after date end------------//
                for (int i = ColNo; i <= 6; i++)
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("")));

                }
                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(
                         "Summary: " + TotalFinalP.Value.ToString() + "/:" + TotalDays.Value.ToString() + " Days    "
                        + "[P: " + TotalP.Value.ToString() + "] "
                        + "[A: " + TotalA.Value.ToString() + "] "
                        + "[AHD: " + TotalAHD.Value.ToString() + "] "
                        + "[AP: " + TotalAP.Value.ToString() + "] "
                        + "[HD: " + TotalHD.Value.ToString() + "] "
                        + "[LI: " + TotalLI.Value.ToString() + "] "
                        + "[EO: " + TotalEO.Value.ToString() + "] "
                        + "[HS: " + TotalHS.Value.ToString() + "] "
                        + "[HSP: " + TotalHSP.Value.ToString() + "] "
                        + "[OT: " + TotalOT.Value.ToString() + "] "
                        + "[OTD: " + TotalOTD.Value.ToString() + "] "
                        + "[PL: " + TotalLeaveValue.Value.ToString() + "] "
                        + "[NPL: " + TotalLeaveValueNonPaid.Value.ToString() + "] "
                        + "[WD: " + TotalWDValue.ToString() + "] "
                    ))).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER);

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }

        #endregion
    }
    public class ATBulkManualRepository : IATBulkManual
    {
        private readonly OreasDbContext db;
        public ATBulkManualRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Master
        public async Task<object> GetATBulkManualMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_ATBulkManualMasters.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          o.ATDateTime,
                          o.FK_tbl_WPT_ATInOutMode_ID,
                          FK_tbl_WPT_ATInOutMode_IDName = o.tbl_WPT_ATInOutMode.ATInOutModeName,
                          o.Reason,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLATBulkManualMaster()
        {
            return new[]
            {
                new { n = "by Doc No", v = "byDocNo" }, new { n = "by Employee Name", v = "byEmployeeName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadATBulkManualMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null, string userName = "")
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_ATBulkManualMasters
                                    .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byDocNo" && w.DocNo.ToString() == FilterValueByText
                                            ||
                                            FilterByText == "byEmployeeName" && w.tbl_WPT_ATBulkManualDetail_Employees.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                            )
                                    .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ATBulkManualMasters
                                      .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byDocNo" && w.DocNo.ToString() == FilterValueByText
                                            ||
                                            FilterByText == "byEmployeeName" && w.tbl_WPT_ATBulkManualDetail_Employees.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                            )
                                      .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.DocNo,
                          o.ATDateTime,
                          o.FK_tbl_WPT_ATInOutMode_ID,
                          FK_tbl_WPT_ATInOutMode_IDName = o.tbl_WPT_ATInOutMode.ATInOutModeName,
                          o.Reason,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          TotalEmployees = o.tbl_WPT_ATBulkManualDetail_Employees.Count()
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostATBulkManualMaster(tbl_WPT_ATBulkManualMaster tbl_WPT_ATBulkManualMaster, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_ATBulkManualMaster.CreatedBy = userName;
                tbl_WPT_ATBulkManualMaster.CreatedDate = DateTime.Now;
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_ATBulkManualMaster.ModifiedBy = userName;
                tbl_WPT_ATBulkManualMaster.ModifiedDate = DateTime.Now;
                CRUD_Type.Value = "Update";

            }
            else if (operation == "Save Delete")
            {
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_ATBulkManualMaster] 
                 @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                ,@ID={3},@DocNo={4},@ATDateTime={5},@FK_tbl_WPT_ATInOutMode_ID={6},@Reason={7}
                ,@CreatedBy={8},@CreatedDate={9},@ModifiedBy={10},@ModifiedDate={11}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_ATBulkManualMaster.ID, tbl_WPT_ATBulkManualMaster.DocNo, tbl_WPT_ATBulkManualMaster.ATDateTime,
                tbl_WPT_ATBulkManualMaster.FK_tbl_WPT_ATInOutMode_ID, tbl_WPT_ATBulkManualMaster.Reason,
                tbl_WPT_ATBulkManualMaster.CreatedBy, tbl_WPT_ATBulkManualMaster.CreatedDate, tbl_WPT_ATBulkManualMaster.ModifiedBy, tbl_WPT_ATBulkManualMaster.ModifiedDate);

            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        #endregion

        #region Detail
        public async Task<object> GetATBulkManualDetail(int id)
        {
            var qry = from o in await db.tbl_WPT_ATBulkManualDetail_Employees.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ATBulkManualMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLATBulkManualDetail()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by Designation", v = "byDesignation" }, new { n = "by Department", v = "byDepartment" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadATBulkManualDetail(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_ATBulkManualDetail_Employees
                                               .Where(w => w.FK_tbl_WPT_ATBulkManualMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byDesignation" && w.tbl_WPT_Employee.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byDepartment" && w.tbl_WPT_Employee.tbl_WPT_DepartmentDetail_Section.tbl_WPT_Department.DepartmentName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ATBulkManualDetail_Employees
                                  .Where(w => w.FK_tbl_WPT_ATBulkManualMaster_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byDesignation" && w.tbl_WPT_Employee.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byDepartment" && w.tbl_WPT_Employee.tbl_WPT_DepartmentDetail_Section.tbl_WPT_Department.DepartmentName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ATBulkManualMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          ATLogDateTime = ""//o?.tbl_WPT_AttendanceLogs?.FirstOrDefault()?.ATDateTime.ToString("dd-MMM-yy hh:mm tt") ?? ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostATBulkManualDetail(tbl_WPT_ATBulkManualDetail_Employee tbl_WPT_ATBulkManualDetail_Employee, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_ATBulkManualDetail_Employee.CreatedBy = userName;
                tbl_WPT_ATBulkManualDetail_Employee.CreatedDate = DateTime.Now;
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_ATBulkManualDetail_Employee.ModifiedBy = userName;
                tbl_WPT_ATBulkManualDetail_Employee.ModifiedDate = DateTime.Now;
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_ATBulkManualDetail_Employee] 
                @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                ,@ID={3},@FK_tbl_WPT_ATBulkManualMaster_ID={4},@FK_tbl_WPT_Employee_ID={5}
                ,@CreatedBy={6},@CreatedDate={7},@ModifiedBy={8},@ModifiedDate={9}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_ATBulkManualDetail_Employee.ID, tbl_WPT_ATBulkManualDetail_Employee.FK_tbl_WPT_ATBulkManualMaster_ID, tbl_WPT_ATBulkManualDetail_Employee.FK_tbl_WPT_Employee_ID,
                tbl_WPT_ATBulkManualDetail_Employee.CreatedBy, tbl_WPT_ATBulkManualDetail_Employee.CreatedDate, tbl_WPT_ATBulkManualDetail_Employee.ModifiedBy, tbl_WPT_ATBulkManualDetail_Employee.ModifiedDate
                );

            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<string> ATBulkManualUploadExcelFile(List<string> EmployeeATNoExcelDataList, int MasterID, string operation, string userName)
        {
            string RespondMsg = "";
            if (operation == "Save New")
            {
                //------------Add compiled record to database--------------------//
                SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
                SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
                SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

                foreach (var item in EmployeeATNoExcelDataList)
                {
                    var temp = await db.tbl_WPT_Employees.Where(w => w.ATEnrollmentNo_Default == item).FirstOrDefaultAsync();

                    if (temp.ID > 0)
                    {
                        CRUD_Type.Value = "Insert";
                        CRUD_ID.Value = 0;
                        CRUD_Msg.Value = "";

                        await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_ATBulkManualDetail_Employee] 
                        @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                        ,@ID={3},@FK_tbl_WPT_ATBulkManualMaster_ID={4},@FK_tbl_WPT_Employee_ID={5}
                        ,@CreatedBy={6},@CreatedDate={7},@ModifiedBy={8},@ModifiedDate={9}",
                        CRUD_Type, CRUD_Msg, CRUD_ID,
                        0, MasterID, temp.ID,
                        userName, DateTime.Now, null, null
                        );

                        if ((string)CRUD_Msg.Value == "Successful")
                            RespondMsg = RespondMsg + "\n" + "For: " + temp.ATEnrollmentNo_Default + ", Exception: " + (string)CRUD_Msg.Value;
                    }

                }

            }
            else
            {
                RespondMsg = "Wrong Operation";
            }

            if (string.IsNullOrEmpty(RespondMsg))
                return "OK";
            else
                return RespondMsg;
        }

        #endregion

    }
    public class LeavePolicyRepository : ILeavePolicy
    {
        private readonly OreasDbContext db;
        public LeavePolicyRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Leave Policy Paid
        public async Task<object> GetLeavePolicy(int id)
        {
            var qry = from o in await db.tbl_WPT_LeavePolicys.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PolicyPrefix,
                          o.Leave,
                          o.WithOutRequest,
                          o.MonthlyRestrict_MaxNoOfLeavesCanAvail,
                          o.FK_tbl_WPT_LeaveCFOptions_ID,
                          FK_tbl_WPT_LeaveCFOptions_IDName = o.tbl_WPT_LeaveCFOptions.CFOption,
                          o.IsHOSApprovalReq,
                          o.IsHRApprovalReq,
                          o.FinalGranter,
                          o.EncashableLeave,
                          o.EncashablePeriod,
                          o.EL_MinBalance,
                          o.FK_tbl_WPT_CalculationMethod_ID_EL,
                          FK_tbl_WPT_CalculationMethod_ID_ELName = o.tbl_WPT_CalculationMethods.MethodName,
                          o.Min_WD_Per_ForELMonth,
                          o.CarryFowardLeave,
                          o.CFL_MinBalance,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLLeavePolicy()
        {
            return new[]
            {
                new { n = "by Policy Name", v = "byPolicyName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLeavePolicy(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LeavePolicys
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byPolicyName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LeavePolicys
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byPolicyName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PolicyPrefix,
                          o.Leave,
                          o.WithOutRequest,
                          o.MonthlyRestrict_MaxNoOfLeavesCanAvail,
                          o.FK_tbl_WPT_LeaveCFOptions_ID,
                          FK_tbl_WPT_LeaveCFOptions_IDName = o.tbl_WPT_LeaveCFOptions.CFOption,
                          o.IsHOSApprovalReq,
                          o.IsHRApprovalReq,
                          o.FinalGranter,
                          o.EncashableLeave,
                          o.EncashablePeriod,
                          o.EL_MinBalance,
                          o.FK_tbl_WPT_CalculationMethod_ID_EL,
                          FK_tbl_WPT_CalculationMethod_ID_ELName = o.tbl_WPT_CalculationMethods.MethodName,
                          o.Min_WD_Per_ForELMonth,
                          o.CarryFowardLeave,
                          o.CFL_MinBalance,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLeavePolicy(tbl_WPT_LeavePolicy tbl_WPT_LeavePolicy, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_LeavePolicy.CreatedBy = userName;
                tbl_WPT_LeavePolicy.CreatedDate = DateTime.Now;
                db.tbl_WPT_LeavePolicys.Add(tbl_WPT_LeavePolicy);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LeavePolicy.ModifiedBy = userName;
                tbl_WPT_LeavePolicy.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_LeavePolicy).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_LeavePolicys.Remove(db.tbl_WPT_LeavePolicys.Find(tbl_WPT_LeavePolicy.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        #endregion

        #region Leave Policy Non Paid
        public async Task<object> GetLeavePolicyNonPaid(int id)
        {
            var qry = from o in await db.tbl_WPT_LeavePolicyNonPaids.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PolicyPrefix,
                          o.IsHOSApprovalReq,
                          o.IsHRApprovalReq,
                          o.FinalGranter,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLLeavePolicyNonPaid()
        {
            return new[]
            {
                new { n = "by Policy Name", v = "byPolicyName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLeavePolicyNonPaid(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LeavePolicyNonPaids
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byPolicyName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LeavePolicyNonPaids
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byPolicyName" && w.PolicyName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.PolicyName,
                          o.PolicyPrefix,
                          o.IsHOSApprovalReq,
                          o.IsHRApprovalReq,
                          o.FinalGranter,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfDesignations = o.tbl_WPT_LeavePolicyNonPaid_Designations.Count()
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLeavePolicyNonPaid(tbl_WPT_LeavePolicyNonPaid tbl_WPT_LeavePolicyNonPaid, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_LeavePolicyNonPaid.CreatedBy = userName;
                tbl_WPT_LeavePolicyNonPaid.CreatedDate = DateTime.Now;
                db.tbl_WPT_LeavePolicyNonPaids.Add(tbl_WPT_LeavePolicyNonPaid);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LeavePolicyNonPaid.ModifiedBy = userName;
                tbl_WPT_LeavePolicyNonPaid.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_LeavePolicyNonPaid).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_LeavePolicyNonPaids.Remove(db.tbl_WPT_LeavePolicyNonPaids.Find(tbl_WPT_LeavePolicyNonPaid.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Leave Policy Non Paid Designation
        public async Task<object> GetLeavePolicyNonPaidDesignation(int id)
        {
            var qry = from o in await db.tbl_WPT_LeavePolicyNonPaid_Designations.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LeavePolicyNonPaid_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLLeavePolicyNonPaidDesignation()
        {
            return new[]
            {
                new { n = "by Designation", v = "byDesignation" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLeavePolicyNonPaidDesignation(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LeavePolicyNonPaid_Designations
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LeavePolicyNonPaid_Designations
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LeavePolicyNonPaid_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLeavePolicyNonPaidDesignation(tbl_WPT_LeavePolicyNonPaid_Designation tbl_WPT_LeavePolicyNonPaid_Designation, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_LeavePolicyNonPaid_Designation.CreatedBy = userName;
                tbl_WPT_LeavePolicyNonPaid_Designation.CreatedDate = DateTime.Now;
                db.tbl_WPT_LeavePolicyNonPaid_Designations.Add(tbl_WPT_LeavePolicyNonPaid_Designation);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LeavePolicyNonPaid_Designation.ModifiedBy = userName;
                tbl_WPT_LeavePolicyNonPaid_Designation.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_LeavePolicyNonPaid_Designation).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_LeavePolicyNonPaid_Designations.Remove(db.tbl_WPT_LeavePolicyNonPaid_Designations.Find(tbl_WPT_LeavePolicyNonPaid_Designation.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion
    }
    public class CalendarRepository : ICalendar
    {
        private readonly OreasDbContext db;
        public CalendarRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Calendar

        public async Task<object> GetCalendar(int id)
        {
            var qry = from o in await db.tbl_WPT_CalendarYears.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.CalendarYear,
                          NoOfLeaveEmp = o.tbl_WPT_CalendarYear_LeaveEmpss?.Count() ?? 0,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLCalendar()
        {
            return new[]
            {
                new { n = "by Year", v = "byYear" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadCalendar(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_CalendarYears
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byYear" && (w.CalendarYear.ToString() == FilterValueByText || w.CalendarYear.ToString() == FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYears
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byYear" && (w.CalendarYear.ToString() == FilterValueByText || w.CalendarYear.ToString() == FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.CalendarYear,
                          NoOfLeaveEmp = o.tbl_WPT_CalendarYear_LeaveEmpss?.Count() ?? 0,
                          NoOfOpen = o.tbl_WPT_CalendarYear_LeaveEmpss.Where(w => !w.IsClosed)?.Count() ?? 0,
                          NoOfClosed = o.tbl_WPT_CalendarYear_LeaveEmpss.Where(w => w.IsClosed)?.Count() ?? 0,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          CalendarStartYear = o.tbl_WPT_CalendarYear_Monthss?.FirstOrDefault()?.MonthStart.Year,
                          CalendarEndYear = o.tbl_WPT_CalendarYear_Monthss?.LastOrDefault()?.MonthEnd.Year,
                          CalendarStartMonthSName = o.tbl_WPT_CalendarYear_Monthss?.FirstOrDefault()?.MonthStart.ToString("MMMM"),
                          CalendarEndMonthName = o.tbl_WPT_CalendarYear_Monthss?.LastOrDefault()?.MonthEnd.ToString("MMMM"),
                          CalendarStartDay = o.tbl_WPT_CalendarYear_Monthss?.FirstOrDefault()?.MonthStart.Day,
                          CalendarEndDay = o.tbl_WPT_CalendarYear_Monthss?.LastOrDefault()?.MonthEnd.Day,
                          MonthList = o.tbl_WPT_CalendarYear_Monthss.Select(e=> new { ID = e.ID, Month = e.MonthStart.ToString("MMM-yyyy")})
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostCalendar(tbl_WPT_CalendarYear tbl_WPT_CalendarYear, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value="Failed to execute Operation" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };
            
            if (operation == "Save New")
            {
                tbl_WPT_CalendarYear.CreatedBy = userName;
                tbl_WPT_CalendarYear.CreatedDate = DateTime.Now;
                //db.tbl_WPT_CalendarYears.Add(tbl_WPT_CalendarYear);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_CalendarYear.ModifiedBy = userName;
                tbl_WPT_CalendarYear.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_CalendarYear).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_CalendarYears.Remove(db.tbl_WPT_CalendarYears.Find(tbl_WPT_CalendarYear.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }
           await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_CalendarYear] 
                @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT,@ID={3},@CalendarYear={4},@CreatedBy={5},@CreatedDate={6},@ModifiedBy={7},@ModifiedDate={8}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_CalendarYear.ID, tbl_WPT_CalendarYear.CalendarYear,
                tbl_WPT_CalendarYear.CreatedBy, tbl_WPT_CalendarYear.CreatedDate, tbl_WPT_CalendarYear.ModifiedBy, tbl_WPT_CalendarYear.ModifiedDate);
            

            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<string> CloseYear(int CalendarID, string userName = "")
        {
            var UID = userName;
            try
            {
                if (string.IsNullOrEmpty(MyGlobalInfo.CalendarYearClosingID))
                {
                    MyGlobalInfo.CalendarYearClosingID = UID;
                    var CalendarYearID = new SqlParameter("@CalendarYearID", SqlDbType.Int) { Value = CalendarID };
                    var ModifiedBy = new SqlParameter("@ModifiedBy", SqlDbType.VarChar) { Value = UID };
                    var Result_Msg = new SqlParameter("@Result_Msg", SqlDbType.VarChar) { Direction= ParameterDirection.Output, Size=50, Value="Failed" };

                    await db.Database.ExecuteSqlRawAsync("EXECUTE [dbo].[USP_WPT_LeaveClosingAll] @CalendarYearID,@ModifiedBy,@Result_Msg OUTPUT ", CalendarYearID, ModifiedBy, Result_Msg);
                    
                    MyGlobalInfo.CalendarYearClosingID = null;

                    if ((string)Result_Msg.Value == "Successful")
                        return "OK";
                    else
                        return (string)Result_Msg.Value;
                }
                else
                    return MyGlobalInfo.CalendarYearClosingID + ": is already started the closing process";
            }
            catch (Exception ex)
            {
                if (MyGlobalInfo.CalendarYearClosingID.Contains(UID))
                    MyGlobalInfo.CalendarYearClosingID = null;
                return "Please contact administrator " + ex.Message;
            }
            finally
            {
                MyGlobalInfo.CalendarYearClosingID = null;
            }
        }

        #endregion

        #region Calendar Month

        public async Task<object> GetCalendarMonth(int id)
        {
            var qry = (from o in await db.tbl_WPT_CalendarYear_Monthss.Where(w => w.ID == id).ToListAsync()
                       select new
                       {
                           o.ID,
                           o.FK_tbl_WPT_CalendarYear_ID,
                           IsMonthClosed = o.IsClosed,
                           o.MonthStart,
                           o.MonthEnd
                       }).FirstOrDefault();

            var qry2 = (from o in await db.tbl_WPT_CalendarYear_Monthss.Where(w => w.ID > id).OrderBy(o => o.ID).ToListAsync()
                        select new
                        {
                            o.ID,
                            o.FK_tbl_WPT_CalendarYear_ID,
                            IsMonthClosed = o.IsClosed,
                            o.MonthStart,
                            o.MonthEnd
                        }).FirstOrDefault();

            VM_CalendarYear_Months_Adjustment vm = new VM_CalendarYear_Months_Adjustment()
            {
                ID_M1 = qry.ID,
                FK_tbl_WPT_CalendarYear_ID_M1 = qry.FK_tbl_WPT_CalendarYear_ID,
                MonthStart_M1 = qry.MonthStart,
                MonthEnd_M1 = qry.MonthEnd,
                ID_M2 = qry2.ID,
                FK_tbl_WPT_CalendarYear_ID_M2 = qry2.FK_tbl_WPT_CalendarYear_ID,
                MonthStart_M2 = qry2.MonthStart,
                MonthEnd_M2 = qry2.MonthEnd
            };

            return vm;
        }
        public object GetWCLCalendarMonth()
        {
            return new[]
            {
                new { n = "by Month No", v = "byMonthNo" }
            }.ToList();
        }

        public async Task<PagedData<object>> LoadCalendarMonth(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();
            pageddata.PageSize = 12;
            int NoOfRecords = await db.tbl_WPT_CalendarYear_Monthss
                                               .Where(w => w.FK_tbl_WPT_CalendarYear_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byMonthNo" && w.MonthStart.Month == Convert.ToInt32(FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYear_Monthss
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byMonthNo" && w.MonthStart.Month == Convert.ToInt32(FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.tbl_WPT_CalendarYear.CalendarYear).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_ID,
                          IsMonthClosed = o.IsClosed,
                          MonthStart = o.MonthStart.ToString("dd-MMM-yyyy"),
                          MonthEnd = o.MonthEnd.ToString("dd-MMM-yyyy"),
                          MonthStartYear = o.MonthStart.ToString("yyyy"),
                          MonthEndYear = o.MonthEnd.ToString("yyyy"),
                          MonthStartMonth = o.MonthStart.ToString("MMMM"),
                          MonthEndMonth = o.MonthEnd.ToString("MMMM"),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostCalendarMonth(VM_CalendarYear_Months_Adjustment VM_CalendarYear_Months_Adjustment, string operation = "", string userName = "")
        {
            //0. validate date, month start of 2nd month should be the next day of month end of 1st month
            //1. Both month should be open
            //2. Holidays should be with in the range of month defined
            //3. Rosters should be with in the range of month defined
            //4. Loan/advance date should be apply with in the defined month range 

            //--------------- first validate business logic then apply the below code to save both months------------------//

            //tbl_WPT_CalendarYear_Months month1 = db.tbl_WPT_CalendarYear_Monthss.Where(w => w.ID == vm_CalendarYear_Months_Adjustment.ID_M1).FirstOrDefault();

            //month1.MonthStart = vm_CalendarYear_Months_Adjustment.MonthStart_M1;
            //month1.MonthEnd = vm_CalendarYear_Months_Adjustment.MonthEnd_M1;
            //month1.ModifiedBy = User.Identity.Name;
            //month1.ModifiedDate = DateTime.Now;

            //tbl_WPT_CalendarYear_Months month2 = db.tbl_WPT_CalendarYear_Monthss.Where(w => w.ID == vm_CalendarYear_Months_Adjustment.ID_M2).FirstOrDefault();

            //month2.MonthStart = vm_CalendarYear_Months_Adjustment.MonthStart_M2;
            //month2.MonthEnd = vm_CalendarYear_Months_Adjustment.MonthEnd_M2;
            //month2.ModifiedBy = User.Identity.Name;
            //month2.ModifiedDate = DateTime.Now;


            //db.Entry(month1).State = EntityState.Modified;
            //db.Entry(month2).State = EntityState.Modified;
            await db.SaveChangesAsync();

            if (operation == "Save New")
            {
                
            }
            else if (operation == "Save Update")
            {
               
            }
            else if (operation == "Save Delete")
            {
                
            }
            return "OK";
        }


        #endregion

        #region Calendar Employee For Paid Leave

        public async Task<object> GetCalendarEmployeeForPL(int id)
        {
            var qry = from o in await db.tbl_WPT_CalendarYear_LeaveEmpss.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.EmployeeNo + "]",
                          o.IsClosed,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLCalendarEmployeeForPL()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadCalendarEmployeeForPL(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_CalendarYear_LeaveEmpss
                                               .Where(w=> w.FK_tbl_WPT_CalendarYear_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYear_LeaveEmpss
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.EmployeeNo + "]",
                          LeaveCount = o.tbl_WPT_CalendarYear_LeaveEmps_Leavess?.Count() ?? 0,
                          TopLeaveName = o.tbl_WPT_CalendarYear_LeaveEmps_Leavess?.LastOrDefault()?.tbl_WPT_LeavePolicy.PolicyName ?? "",
                          TopLeaveOpening = o.tbl_WPT_CalendarYear_LeaveEmps_Leavess?.LastOrDefault()?.Opening ?? 0,
                          o.IsClosed,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostCalendarEmployeeForPL(tbl_WPT_CalendarYear_LeaveEmps tbl_WPT_CalendarYear_LeaveEmps, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed to execute Operation" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };
            if (operation == "Save New")
            {
                tbl_WPT_CalendarYear_LeaveEmps.CreatedBy = userName;
                tbl_WPT_CalendarYear_LeaveEmps.CreatedDate = DateTime.Now;
                //db.tbl_WPT_CalendarYear_LeaveEmpss.Add(tbl_WPT_CalendarYear_LeaveEmps);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_CalendarYear_LeaveEmps.ModifiedBy = userName;
                tbl_WPT_CalendarYear_LeaveEmps.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_CalendarYear_LeaveEmps).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_CalendarYear_LeaveEmpss.Remove(db.tbl_WPT_CalendarYear_LeaveEmpss.Find(tbl_WPT_CalendarYear_LeaveEmps.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_CalendarYear_LeaveEmps] 
                 @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT,@ID={3},@FK_tbl_WPT_CalendarYear_ID={4},@FK_tbl_WPT_Employee_ID={5},@IsClosed={6},@CreatedBy={7},@CreatedDate={8},@ModifiedBy={9},@ModifiedDate={10}",
                 CRUD_Type, CRUD_Msg, CRUD_ID, tbl_WPT_CalendarYear_LeaveEmps.ID, tbl_WPT_CalendarYear_LeaveEmps.FK_tbl_WPT_CalendarYear_ID,
                 tbl_WPT_CalendarYear_LeaveEmps.FK_tbl_WPT_Employee_ID, tbl_WPT_CalendarYear_LeaveEmps.IsClosed,
                 tbl_WPT_CalendarYear_LeaveEmps.CreatedBy, tbl_WPT_CalendarYear_LeaveEmps.CreatedDate, tbl_WPT_CalendarYear_LeaveEmps.ModifiedBy, tbl_WPT_CalendarYear_LeaveEmps.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }


        #endregion

        #region Calendar Paid Leaves of Employees

        public async Task<object> GetCalendarPLOfEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_CalendarYear_LeaveEmps_Leavess.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_LeaveEmps_ID,
                          o.FK_tbl_WPT_LeavePolicy_ID,
                          FK_tbl_WPT_LeavePolicy_IDName = o.tbl_WPT_LeavePolicy.PolicyName,
                          o.FK_tbl_WPT_CalendarYear_Months_ID_Apply,
                          FK_tbl_WPT_CalendarYear_Months_ID_ApplyName = o.tbl_WPT_CalendarYear_Months_Apply.MonthStart.ToString("MMMM-yyyy"),
                          o.Opening,
                          o.FK_tbl_WPT_CalendarYear_Months_ID_Expire,
                          FK_tbl_WPT_CalendarYear_Months_ID_ExpireName = o.tbl_WPT_CalendarYear_Months_Expire?.MonthStart.ToString("MMMM") ?? "",
                          o.AllowedFromNextYear,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLCalendarPLOfEmployee()
        {
            return new[]
            {
                new { n = "by Leave Policy Name", v = "byLeavePolicyName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadCalendarPLOfEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_CalendarYear_LeaveEmps_Leavess
                                               .Where(w => w.FK_tbl_WPT_CalendarYear_LeaveEmps_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byLeavePolicyName" && w.tbl_WPT_LeavePolicy.PolicyName.ToLower().Contains(FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYear_LeaveEmps_Leavess
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_LeaveEmps_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byLeavePolicyName" && w.tbl_WPT_LeavePolicy.PolicyName.ToLower().Contains(FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_LeaveEmps_ID,
                          o.FK_tbl_WPT_LeavePolicy_ID,
                          FK_tbl_WPT_LeavePolicy_IDName = o.tbl_WPT_LeavePolicy.PolicyName,
                          o.FK_tbl_WPT_CalendarYear_Months_ID_Apply,
                          FK_tbl_WPT_CalendarYear_Months_ID_ApplyName = o.tbl_WPT_CalendarYear_Months_Apply.MonthStart.ToString("MMMM-yyyy"),
                          o.Opening,
                          o.FK_tbl_WPT_CalendarYear_Months_ID_Expire,
                          FK_tbl_WPT_CalendarYear_Months_ID_ExpireName = o.tbl_WPT_CalendarYear_Months_Expire?.MonthStart.ToString("MMMM") ?? "",
                          o.AllowedFromNextYear,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostCalendarPLOfEmployee(tbl_WPT_CalendarYear_LeaveEmps_Leaves tbl_WPT_CalendarYear_LeaveEmps_Leaves, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_CalendarYear_LeaveEmps_Leaves.CreatedBy = userName;
                tbl_WPT_CalendarYear_LeaveEmps_Leaves.CreatedDate = DateTime.Now;
                db.tbl_WPT_CalendarYear_LeaveEmps_Leavess.Add(tbl_WPT_CalendarYear_LeaveEmps_Leaves);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_CalendarYear_LeaveEmps_Leaves.ModifiedBy = userName;
                tbl_WPT_CalendarYear_LeaveEmps_Leaves.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_CalendarYear_LeaveEmps_Leaves).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_CalendarYear_LeaveEmps_Leavess.Remove(db.tbl_WPT_CalendarYear_LeaveEmps_Leavess.Find(tbl_WPT_CalendarYear_LeaveEmps_Leaves.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }


        #endregion

        #region Report     

        public List<ReportCallingModel> GetRLCalendar()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Monthly Used Register",
                    GroupBy = new List<string>(){ "Department", "Designation" },
                    OrderBy = new List<string>(){ "ATNo", "Department", "Designation" },
                    SeekBy = new List<string>(){ "All", "Open", "Closed" }
                }
            };
        }
        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Monthly Used Register")
            {
                return await Task.Run(() => MonthlyUsedRegisterAsync(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Annual Employee Leaves Record")
            {
                return await Task.Run(() => AnnualEmployeeLeavesRecord(id, rn, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }
        private async Task<byte[]> AnnualEmployeeLeavesRecord(int id = 0, string rn = "", string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 20f, "----- FullYearLeaveCalendar -----" + DateTime.Now.ToString("dd-MMM-yyyy") + "-----", true);

            Table pdftableMain = new Table(new float[] { 100, 100, 100 }).UseAllAvailableWidth().SetFontSize(7);

            DateTime datefrom = new DateTime();
            DateTime datetill = new DateTime();
            string firstdayName = "";
            Table pdftable;
            int ColNo = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "SELECT TOP(1) dbo.tbl_WPT_Employee.EmployeeNo, dbo.tbl_WPT_Employee.ATEnrollmentNo_Default, dbo.tbl_WPT_Employee.EmployeeName, dbo.tbl_WPT_CalendarYear.CalendarYear FROM dbo.tbl_WPT_CalendarYear_LeaveEmps INNER JOIN dbo.tbl_WPT_Employee ON dbo.tbl_WPT_CalendarYear_LeaveEmps.FK_tbl_WPT_Employee_ID = dbo.tbl_WPT_Employee.ID INNER JOIN dbo.tbl_WPT_CalendarYear ON dbo.tbl_WPT_CalendarYear_LeaveEmps.FK_tbl_WPT_CalendarYear_ID = dbo.tbl_WPT_CalendarYear.ID WHERE (dbo.tbl_WPT_CalendarYear_LeaveEmps.ID = @EmpCalendarID) ";
                command.CommandType = CommandType.Text;

                var EmpCalendarID = command.CreateParameter();
                EmpCalendarID.ParameterName = "@EmpCalendarID"; EmpCalendarID.DbType = DbType.Int32; EmpCalendarID.Value = id;
                command.Parameters.Add(EmpCalendarID);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        pdftableMain.AddCell(
                            new Cell(1, 3)
                            .Add(new Paragraph()
                                               .Add(new Text("Name: ").SetBold())
                                               .Add(sqlReader["EmployeeName"].ToString())
                                               .Add(new Text("  ATNo: ").SetBold())
                                               .Add(sqlReader["EmployeeNo"].ToString())
                                               .Add(new Text("  For the Year: ").SetBold())
                                               .Add(new Text(sqlReader["CalendarYear"].ToString()).SetBold())
                                ).SetFontSize(10).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.CENTER)
                            );
                    }
                }

                command.Parameters.Remove(EmpCalendarID);

                var LeavetupleList = new List<(string, DateTime, DateTime, string)>();

                command.CommandText = "EXECUTE [dbo].[Report_WPT_CalendarDetail] @ReportName,null,null,@MasterID,null,null,null,0 ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);


                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        LeavetupleList.Add((sqlReader["PolicyPrefix"].ToString(), (DateTime)sqlReader["LeaveFrom"], (DateTime)sqlReader["LeaveTill"], sqlReader["LeaveValue"].ToString()));
                    }
                }
                command.Parameters.Remove(ReportName); command.Parameters.Remove(MasterID);

                //-----------------------------get Heading-----------------------------//
                command.CommandText = "SELECT dbo.tbl_WPT_CalendarYear_Months.MonthStart, dbo.tbl_WPT_CalendarYear_Months.MonthEnd FROM dbo.tbl_WPT_CalendarYear_LeaveEmps INNER JOIN dbo.tbl_WPT_CalendarYear_Months ON dbo.tbl_WPT_CalendarYear_LeaveEmps.FK_tbl_WPT_CalendarYear_ID = dbo.tbl_WPT_CalendarYear_Months.FK_tbl_WPT_CalendarYear_ID WHERE (dbo.tbl_WPT_CalendarYear_LeaveEmps.ID = @EmpCalendarID) ";
                command.CommandType = CommandType.Text;
                command.Parameters.Add(EmpCalendarID);

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {

                        datefrom = (DateTime)sqlReader["MonthStart"];
                        datetill = (DateTime)sqlReader["MonthEnd"];

                        pdftable = new Table(new float[] { 100, 100, 100, 100, 100, 100, 100 }).SetFontSize(6);

                        pdftable.AddCell(new Cell(1, 7).Add(new Paragraph(datefrom.ToString("MMMM-yyyy"))).SetBackgroundColor(ColorConstants.GRAY).SetFontColor(ColorConstants.WHITE).SetTextAlignment(TextAlignment.CENTER).SetFontSize(8));

                        pdftable.AddCell(new Cell().Add(new Paragraph("Sun")).SetTextAlignment(TextAlignment.RIGHT));
                        pdftable.AddCell(new Cell().Add(new Paragraph("Mon")).SetTextAlignment(TextAlignment.RIGHT));
                        pdftable.AddCell(new Cell().Add(new Paragraph("Tue")).SetTextAlignment(TextAlignment.RIGHT));
                        pdftable.AddCell(new Cell().Add(new Paragraph("Wed")).SetTextAlignment(TextAlignment.RIGHT));
                        pdftable.AddCell(new Cell().Add(new Paragraph("Thu")).SetTextAlignment(TextAlignment.RIGHT));
                        pdftable.AddCell(new Cell().Add(new Paragraph("Fri")).SetTextAlignment(TextAlignment.RIGHT));
                        pdftable.AddCell(new Cell().Add(new Paragraph("Sat")).SetTextAlignment(TextAlignment.RIGHT));

                        firstdayName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.DayNames[(int)datefrom.DayOfWeek].ToLower();

                        if (firstdayName == "sunday") ColNo = 0; if (firstdayName == "monday") ColNo = 1;
                        if (firstdayName == "tuesday") ColNo = 2; if (firstdayName == "wednesday") ColNo = 3;
                        if (firstdayName == "thursday") ColNo = 4; if (firstdayName == "friday") ColNo = 5;
                        if (firstdayName == "saturday") ColNo = 6;

                        for (int i = 1; i <= ColNo; i++)
                        {
                            pdftable.AddCell(new Cell().Add(new Paragraph("")));
                        }

                        while (datefrom <= datetill)
                        {
                            var Found = LeavetupleList.Where(c => datefrom >= c.Item2 && datefrom <= c.Item3).FirstOrDefault(); //LeavetupleList.Where(c => c.Item2  >= datefrom && c.Item3  <=  datefrom).FirstOrDefault();


                            if (Found.Item1 != null) //(Found.Item2 >= datefrom && Found.Item3 <= datefrom)
                                pdftable.AddCell(new Cell()
                                    .Add(new Paragraph(datefrom.ToString("dd")).SetTextAlignment(TextAlignment.RIGHT))
                                    .Add(new Paragraph(Found.Item1).SetTextAlignment(TextAlignment.CENTER).SetFontSize(3))
                                    .Add(new Paragraph(Found.Item4).SetTextAlignment(TextAlignment.CENTER).SetFontSize(3))
                                    .SetBackgroundColor(new DeviceRgb(242, 107, 154))
                                    );
                            else
                                pdftable.AddCell(new Cell()
                                    .Add(new Paragraph(datefrom.ToString("dd")))
                                    .Add(new Paragraph("\n").SetFontSize(3))
                                    .Add(new Paragraph("\n").SetFontSize(3))
                                    .SetTextAlignment(TextAlignment.RIGHT));

                            datefrom = datefrom.AddDays(1);
                        }

                        pdftableMain.AddCell(new Cell().Add(pdftable).SetBorder(Border.NO_BORDER));


                    }
                }

            }
            
            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> MonthlyUsedRegisterAsync(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- Leave Monthly Usage List " + SeekBy + "-----", false);

            /////////////------------------------------table for Detail 23------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05), //S.No
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05), //ATNO
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.17),  //Name
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.13),  //Policy Name
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05),  //Policy Leave
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.06),  //Apply Month                        
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.06),  //Expire Month
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05),  //Opening
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.04),  //Allowed From Next Year
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.02),  //
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05),  //Annual Usage
                        (float)(PageSize.A4.Rotate().GetWidth() * 0.05)  //Balance
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "SELECT TOP(1)  CalendarYear FROM dbo.tbl_WPT_CalendarYear WHERE  (ID = @CalendarID)";
                command.CommandType = CommandType.Text;

                var CalendarID = command.CreateParameter();
                CalendarID.ParameterName = "@CalendarID"; CalendarID.DbType = DbType.Int32; CalendarID.Value = id;
                command.Parameters.Add(CalendarID);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        pdftableMain.AddCell(
                            new Cell(1, 23)
                            .Add(new Paragraph()
                                               .Add(new Text("For The Year of:  "))
                                               .Add(sqlReader["CalendarYear"].ToString())

                                ).SetBold().SetFontSize(10).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.CENTER)
                            );
                    }
                }

                command.Parameters.Remove(CalendarID);

                command.CommandText = "EXECUTE [dbo].[Report_WPT_CalendarDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";
                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {

                    pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add("Month")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Policy Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Policy Leaves")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Apply")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Expire")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Opening")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Next Year")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("01")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("02")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("03")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("04")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("05")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("06")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("07")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("08")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("09")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("10")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("11")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("12")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Annual Usage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));

                }

                //await command.Connection.CloseAsync();
                //await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                                pdftableMain.AddCell(new Cell(1, 23).Add(new Paragraph().Add("\n")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();

                            if (GroupID > 0)
                            {
                                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(GroupbyValue)).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add("Month")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            else
                            {

                                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 12).Add(new Paragraph().Add("Month")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Policy Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Policy Leaves")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Apply")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Expire")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Opening")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Next Year")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("01")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("02")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("03")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("04")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("05")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("06")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("07")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("08")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("09")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("10")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("11")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("12")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Annual Usage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));

                        }
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(new Link(sqlReader["EmployeeName"].ToString(), PdfAction.CreateURI(uri + "?rn=Annual Employee Leaves Record" + "&id=" + sqlReader["EmpCalendarID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["PolicyName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Leave"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["ApplyMonth"]).ToString("MMMM"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ExpireMonth"].ToString().Length > 0 ? ((DateTime)sqlReader["ExpireMonth"]).ToString("MMMM") : "")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Opening"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AllowedFromNextYear"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month1Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month2Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month3Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month4Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month5Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month6Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month7Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month8Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month9Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month10Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month11Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Month12Usage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AnnualUsage"].ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((double)sqlReader["Opening"] + (double)sqlReader["AllowedFromNextYear"] - (double)sqlReader["AnnualUsage"]).ToString())).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        SNo = SNo + 1;
                    }
                }

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }

        #endregion
    }
    public class LeaveRequisitionRepository : ILeaveRequisition
    {
        private readonly OreasDbContext db;
        public LeaveRequisitionRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Calendar Month
        public object GetWCLCalendarMonth()
        {
            return new[]
             {
                new { n = "by Month No", v = "byMonthNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadCalendarMonth(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();
            pageddata.PageSize = 12;

            int NoOfRecords = await db.tbl_WPT_CalendarYear_Monthss
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byMonthNo" && w.MonthStart.Month == Convert.ToInt32(FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYear_Monthss
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byMonthNo" && w.MonthStart.Month == Convert.ToInt32(FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.tbl_WPT_CalendarYear.CalendarYear).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfRequests = o.tbl_WPT_LeaveRequisitions?.Count() ?? 0,
                          IsMonthClosed = o.IsClosed,
                          CalendarMonthStartDate = o.MonthStart.ToString("dd-MMM-yyyy"),
                          CalendarMonthEndDate = o.MonthEnd.ToString("dd-MMM-yyyy"),
                          MonthStartYear = o.MonthStart.ToString("yyyy"),
                          MonthEndYear = o.MonthEnd.ToString("yyyy"),
                          MonthStartMonth = o.MonthStart.ToString("MMMM"),
                          MonthEndMonth = o.MonthEnd.ToString("MMMM"),
                          MonthStartDay = o.MonthStart.ToString("dd"),
                          MonthEndDay = o.MonthEnd.ToString("dd")
                      };




            pageddata.Data = qry;

            return pageddata;
        }


        #endregion

        #region Leave Requisition
        public object GetWCLLeaveRequisition()
        {
            return new[]
             {
                new { n = "by Employee Name", v = "byEmpName" }, new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public object GetWCLBLeaveRequisition()
        {
            return new[]
            {
                new { n = "by HR Pending", v = "byHRPending" },new { n = "by HR Approved", v = "byHRApproved" },new { n = "by HR Rejected", v = "byHRRejected" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLeaveRequisition(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LeaveRequisitions
                                               .Where(w=> w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmpName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .Where(w =>
                                                            string.IsNullOrEmpty(FilterByLoad) 
                                                            || 
                                                            (FilterByLoad == "byHRPending" && w.FK_tbl_WPT_ActionList_ID_HR == 3) 
                                                            || 
                                                            (FilterByLoad == "byHRApproved" && w.FK_tbl_WPT_ActionList_ID_HR == 1) 
                                                            || 
                                                            (FilterByLoad == "byHRRejected" && w.FK_tbl_WPT_ActionList_ID_HR == 2)
                                                       )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LeaveRequisitions
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmpName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .Where(w =>
                                                string.IsNullOrEmpty(FilterByLoad)
                                                || 
                                                (FilterByLoad == "byHRPending" && w.FK_tbl_WPT_ActionList_ID_HR == 3) 
                                                || 
                                                (FilterByLoad == "byHRApproved" && w.FK_tbl_WPT_ActionList_ID_HR == 1) 
                                                || 
                                                (FilterByLoad == "byHRRejected" && w.FK_tbl_WPT_ActionList_ID_HR == 2)
                                         )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.LeaveValue,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.FK_tbl_WPT_LeavePolicy_ID,
                          o.FK_tbl_WPT_LeavePolicyNonPaid_ID,
                          LeavePolicyName = o.tbl_WPT_LeavePolicy?.PolicyName ?? o.tbl_WPT_LeavePolicyNonPaid?.PolicyName ?? "",
                          LeaveFrom = o.LeaveFrom.ToString("dd-MMM-yyyy"),
                          LeaveTill = o.LeaveTill.ToString("dd-MMM-yyyy"),
                          o.Reason,
                          o.FK_tbl_WPT_ActionList_ID_HOS,
                          FK_tbl_WPT_ActionList_ID_HOSName = o.tbl_WPT_ActionList_HOD.ActionName,
                          o.FK_tbl_WPT_Employee_ID_HOS,
                          FK_tbl_WPT_Employee_ID_HOSName = o.tbl_WPT_Employee_HOD?.EmployeeName ?? "",
                          o.FK_tbl_WPT_ActionList_ID_HR,
                          FK_tbl_WPT_ActionList_ID_HRName = o.tbl_WPT_ActionList_HR.ActionName,
                          o.FK_tbl_WPT_Employee_ID_HR,
                          FK_tbl_WPT_Employee_ID_HRName = o.tbl_WPT_Employee_HR?.EmployeeName ?? "",
                          o.FK_tbl_WPT_ActionList_ID_Final,
                          FK_tbl_WPT_ActionList_ID_FinalName = o.tbl_WPT_ActionList_Final.ActionName,
                          o.RequesterFormCode,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLeaveRequisition(tbl_WPT_LeaveRequisition LR, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                
                LR.RequesterFormCode = 0;
                LR.CreatedBy = userName;
                LR.CreatedDate = DateTime.Now;
                LR.FK_tbl_WPT_Employee_ID_HR = db.tbl_WPT_Employees?.Where(w => w.EmployeeName == userName)?.FirstOrDefault()?.ID ?? null;
                //db.LRs.Add(LR);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                LR.RequesterFormCode = 0;
                LR.ModifiedBy = userName;
                LR.ModifiedDate = DateTime.Now;
                //db.Entry(LR).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.LRs.Remove(db.LRs.Find(LR.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_LeaveRequisition] 
                   @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                  ,@ID={3},@DocNo={4},@DocDate={5},@LeaveValue={6}
                  ,@FK_tbl_WPT_CalendarYear_Months_ID={7},@FK_tbl_WPT_Employee_ID={8},@FK_tbl_WPT_LeavePolicy_ID={9}
                  ,@FK_tbl_WPT_LeavePolicyNonPaid_ID={10},@LeaveFrom={11},@LeaveTill={12}
                  ,@FK_tbl_WPT_ActionList_ID_HOS={13},@FK_tbl_WPT_Employee_ID_HOS={14}
                  ,@FK_tbl_WPT_ActionList_ID_HR={15},@FK_tbl_WPT_Employee_ID_HR={16}
                  ,@FK_tbl_WPT_ActionList_ID_Final={17},@Reason={18}
                  ,@FK_tbl_WPT_PayRunDetail_Emp_AutoGenerated={19},@RequesterFormCode={20}
                  ,@CreatedBy={21},@CreatedDate={22},@ModifiedBy={23},@ModifiedDate={24}",
                    CRUD_Type, CRUD_Msg, CRUD_ID,
                    LR.ID, LR.DocNo, LR.DocDate, LR.LeaveValue,
                    LR.FK_tbl_WPT_CalendarYear_Months_ID, LR.FK_tbl_WPT_Employee_ID, LR.FK_tbl_WPT_LeavePolicy_ID,
                    LR.FK_tbl_WPT_LeavePolicyNonPaid_ID, LR.LeaveFrom, LR.LeaveTill,
                    LR.FK_tbl_WPT_ActionList_ID_HOS, LR.FK_tbl_WPT_Employee_ID_HOS,
                    LR.FK_tbl_WPT_ActionList_ID_HR, LR.FK_tbl_WPT_Employee_ID_HR,
                    LR.FK_tbl_WPT_ActionList_ID_Final, LR.Reason,
                    LR.FK_tbl_WPT_PayRunDetail_Emp_AutoGenerated, LR.RequesterFormCode,
                    LR.CreatedBy, LR.CreatedDate, LR.ModifiedBy, LR.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<object> GetLeaveRequisition(int id)
        {
            var qry = from o in await db.tbl_WPT_LeaveRequisitions.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.LeaveValue,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.FK_tbl_WPT_LeavePolicy_ID,
                          o.FK_tbl_WPT_LeavePolicyNonPaid_ID,
                          LeavePolicyName = o.tbl_WPT_LeavePolicy?.PolicyName ?? o.tbl_WPT_LeavePolicyNonPaid?.PolicyName ?? "",
                          LeaveFrom = o.LeaveFrom.ToString("dd-MMM-yyyy"),
                          LeaveTill = o.LeaveTill.ToString("dd-MMM-yyyy"),
                          o.Reason,
                          o.FK_tbl_WPT_ActionList_ID_HOS,
                          FK_tbl_WPT_ActionList_ID_HOSName = o.tbl_WPT_ActionList_HOD.ActionName,
                          o.FK_tbl_WPT_Employee_ID_HOS,
                          FK_tbl_WPT_Employee_ID_HOSName = o.tbl_WPT_Employee_HOD?.EmployeeName ?? "",
                          o.FK_tbl_WPT_ActionList_ID_HR,
                          FK_tbl_WPT_ActionList_ID_HRName = o.tbl_WPT_ActionList_HR.ActionName,
                          o.FK_tbl_WPT_Employee_ID_HR,
                          FK_tbl_WPT_Employee_ID_HRName = o.tbl_WPT_Employee_HR?.EmployeeName ?? "",
                          o.FK_tbl_WPT_ActionList_ID_Final,
                          FK_tbl_WPT_ActionList_ID_FinalName = o.tbl_WPT_ActionList_Final.ActionName,
                          o.RequesterFormCode,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }


        #endregion
    }
    public class IncentivePolicyRepository : IIncentivePolicy
    {
        private readonly OreasDbContext db;
        public IncentivePolicyRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Master

        public async Task<object> GetIncentiveMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_IncentivePolicys.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.IncentiveName,
                          o.FK_tbl_WPT_IncentiveType_ID,
                          FK_tbl_WPT_IncentiveType_IDName = o.tbl_WPT_IncentiveType.IncentiveType,
                          o.Amount,
                          o.FK_tbl_WPT_CalculationMethod_ID,
                          FK_tbl_WPT_CalculationMethod_IDName = o.tbl_WPT_CalculationMethod?.MethodName ?? "",
                          o.Factor,
                          o.OT_MinutesFrom_PerDay,
                          o.OT_MinutesTill_PerDay,
                          o.OT_AfterShiftMinutesFrom_PerDay,
                          o.OT_AfterShiftMinutesTill_PerDay,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLIncentiveMaster()
        {
            return new[]
            {
                new { n = "by Doc No", v = "byDocNo" }, new { n = "by Incentive Name", v = "byIncentiveName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadIncentiveMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_IncentivePolicys
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDocNo" && w.DocNo.ToString().ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byIncentiveName" && w.IncentiveName.ToString().ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_IncentivePolicys
                                  .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byDocNo" && w.DocNo.ToString().ToLower().Contains(FilterValueByText.ToLower())
                                            ||
                                            FilterByText == "byIncentiveName" && w.IncentiveName.ToString().ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.IncentiveName,
                          o.FK_tbl_WPT_IncentiveType_ID,
                          FK_tbl_WPT_IncentiveType_IDName = o.tbl_WPT_IncentiveType.IncentiveType,
                          o.Amount,
                          o.FK_tbl_WPT_CalculationMethod_ID,
                          FK_tbl_WPT_CalculationMethod_IDName = o.tbl_WPT_CalculationMethod?.MethodName ?? "",
                          o.Factor,
                          o.OT_MinutesFrom_PerDay,
                          o.OT_MinutesTill_PerDay,
                          o.OT_AfterShiftMinutesFrom_PerDay,
                          o.OT_AfterShiftMinutesTill_PerDay,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfDesignations = o.tbl_WPT_IncentivePolicyDesignations.Count(),
                          NoOfEmployees = o.tbl_WPT_IncentivePolicyEmployeess.Count()
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostIncentiveMaster(tbl_WPT_IncentivePolicy Ip, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                Ip.CreatedBy = userName;
                Ip.CreatedDate = DateTime.Now;
                //db.tbl_WPT_HiringTypes.Add(tbl_WPT_HiringType);
                //await db.SaveChangesAsync();

                CRUD_Type.Value = "Insert";

            }
            else if (operation == "Save Update")
            {
                Ip.ModifiedBy = userName;
                Ip.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_HiringType).State = EntityState.Modified;
                //await db.SaveChangesAsync();

                CRUD_Type.Value = "Update";

            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_HiringTypes.Remove(db.tbl_WPT_HiringTypes.Find(tbl_WPT_HiringType.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";


            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_IncentivePolicy] 
		           @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
		          ,@ID={3},@DocNo={4},@DocDate={5},@IncentiveName={6},@FK_tbl_WPT_IncentiveType_ID={7},@Amount={8}
		          ,@FK_tbl_WPT_CalculationMethod_ID={9},@Factor={10},@OT_MinutesFrom_PerDay={11}, @OT_MinutesTill_PerDay={12}
                  ,@OT_AfterShiftMinutesFrom_PerDay={13},@OT_AfterShiftMinutesTill_PerDay={14}
		          ,@CreatedBy={15},@CreatedDate={16},@ModifiedBy={17},@ModifiedDate={18}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                Ip.ID, Ip.DocNo, Ip.DocDate, Ip.IncentiveName, Ip.FK_tbl_WPT_IncentiveType_ID, Ip.Amount,
                Ip.FK_tbl_WPT_CalculationMethod_ID, Ip.Factor, Ip.OT_MinutesFrom_PerDay, Ip.OT_MinutesTill_PerDay,
                Ip.OT_AfterShiftMinutesFrom_PerDay,Ip.OT_AfterShiftMinutesTill_PerDay,
                Ip.CreatedBy, Ip.CreatedDate, Ip.ModifiedBy, Ip.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }

        #endregion

        #region Detail Designation

        public async Task<object> GetIncentiveDetailDesignation(int id)
        {
            var qry = from o in await db.tbl_WPT_IncentivePolicyDesignations.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_IncentivePolicy_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.Gender,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLIncentiveDetailDesignation()
        {
            return new[]
            {
                new { n = "by Designation", v = "byDesignation" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadIncentiveDetailDesignation(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_IncentivePolicyDesignations
                                               .Where(w=> w.FK_tbl_WPT_IncentivePolicy_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_IncentivePolicyDesignations
                                  .Where(w => w.FK_tbl_WPT_IncentivePolicy_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDesignation" && w.tbl_WPT_Designation.Designation.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_IncentivePolicy_ID,
                          o.FK_tbl_WPT_Designation_ID,
                          FK_tbl_WPT_Designation_IDName = o.tbl_WPT_Designation.Designation,
                          o.Gender,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostIncentiveDetailDesignation(tbl_WPT_IncentivePolicyDesignation tbl_WPT_IncentivePolicyDesignation, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                if (db.tbl_WPT_IncentivePolicyDesignations.Any(w => w.FK_tbl_WPT_IncentivePolicy_ID == tbl_WPT_IncentivePolicyDesignation.FK_tbl_WPT_IncentivePolicy_ID && w.ID != tbl_WPT_IncentivePolicyDesignation.ID && w.FK_tbl_WPT_Designation_ID == tbl_WPT_IncentivePolicyDesignation.FK_tbl_WPT_Designation_ID))
                {
                    return "Designation Already Exist";
                }
                tbl_WPT_IncentivePolicyDesignation.CreatedBy = userName;
                tbl_WPT_IncentivePolicyDesignation.CreatedDate = DateTime.Now;
                db.tbl_WPT_IncentivePolicyDesignations.Add(tbl_WPT_IncentivePolicyDesignation);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Update")
            {
                if (db.tbl_WPT_IncentivePolicyDesignations.Any(w => w.FK_tbl_WPT_IncentivePolicy_ID == tbl_WPT_IncentivePolicyDesignation.FK_tbl_WPT_IncentivePolicy_ID && w.ID != tbl_WPT_IncentivePolicyDesignation.ID && w.FK_tbl_WPT_Designation_ID == tbl_WPT_IncentivePolicyDesignation.FK_tbl_WPT_Designation_ID))
                {
                    return "Designation Already Exist";
                }
                tbl_WPT_IncentivePolicyDesignation.ModifiedBy = userName;
                tbl_WPT_IncentivePolicyDesignation.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_IncentivePolicyDesignation).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_IncentivePolicyDesignations.Remove(db.tbl_WPT_IncentivePolicyDesignations.Find(tbl_WPT_IncentivePolicyDesignation.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

        #region Detail Employee

        public async Task<object> GetIncentiveDetailEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_IncentivePolicyEmployeess.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_IncentivePolicy_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.Apply,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLIncentiveDetailEmployee()
        {
            return new[]
            {
                new { n = "by Type Name", v = "byName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadIncentiveDetailEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_IncentivePolicyEmployeess
                                               .Where(w => w.FK_tbl_WPT_IncentivePolicy_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_IncentivePolicyEmployeess
                                  .Where(w => w.FK_tbl_WPT_IncentivePolicy_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_IncentivePolicy_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.Apply,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostIncentiveDetailEmployee(tbl_WPT_IncentivePolicyEmployees tbl_WPT_IncentivePolicyEmployees, string operation = "", string userName = "")
        {

            if (operation == "Save New")
            {
                tbl_WPT_IncentivePolicyEmployees.CreatedBy = userName;
                tbl_WPT_IncentivePolicyEmployees.CreatedDate = DateTime.Now;
                db.tbl_WPT_IncentivePolicyEmployeess.Add(tbl_WPT_IncentivePolicyEmployees);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_IncentivePolicyEmployees.ModifiedBy = userName;
                tbl_WPT_IncentivePolicyEmployees.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_IncentivePolicyEmployees).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_IncentivePolicyEmployeess.Remove(db.tbl_WPT_IncentivePolicyEmployeess.Find(tbl_WPT_IncentivePolicyEmployees.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }

        #endregion

    }
    public class RewardRepository : IReward
    {
        private readonly OreasDbContext db;
        public RewardRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Master

        public async Task<object> GetRewardMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_RewardMasters.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          FK_tbl_WPT_CalendarYear_Months_IDName = o.tbl_WPT_CalendarYear_Months.MonthStart.ToString("MMM-yy") + " TO " + o.tbl_WPT_CalendarYear_Months.MonthEnd.ToString("MMM-yy"),
                          o.FK_tbl_WPT_RewardType_ID,
                          FK_tbl_WPT_RewardType_IDName = o.tbl_WPT_RewardType.RewardName,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLRewardMaster()
        {
            return new[]
            {
                new { n = "by Reward Name", v = "byRewardName" }, new { n = "by Remarks", v = "byRemarks" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadRewardMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_RewardMasters
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byRemarks" && w.Remarks == FilterValueByText
                                                       ||
                                                       FilterByText == "byRewardName" && w.tbl_WPT_RewardType.RewardName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_RewardMasters
                                  .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byRemarks" && w.Remarks == FilterValueByText
                                            ||
                                            FilterByText == "byRewardName" && w.tbl_WPT_RewardType.RewardName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          FK_tbl_WPT_CalendarYear_Months_IDName = o.tbl_WPT_CalendarYear_Months.MonthStart.ToString("MMM-yy") + " TO " + o.tbl_WPT_CalendarYear_Months.MonthEnd.ToString("MMM-yy"),
                          o.FK_tbl_WPT_RewardType_ID,
                          FK_tbl_WPT_RewardType_IDName = o.tbl_WPT_RewardType.RewardName,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfEmployees = o.tbl_WPT_RewardDetails.Count()
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostRewardMaster(tbl_WPT_RewardMaster tbl_WPT_RewardMaster, string operation = "", string userName = "")
        {

            if (operation == "Save New")
            {
                tbl_WPT_RewardMaster.CreatedBy = userName;
                tbl_WPT_RewardMaster.CreatedDate = DateTime.Now;
                db.tbl_WPT_RewardMasters.Add(tbl_WPT_RewardMaster);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_RewardMaster.ModifiedBy = userName;
                tbl_WPT_RewardMaster.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_RewardMaster).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_RewardMasters.Remove(db.tbl_WPT_RewardMasters.Find(tbl_WPT_RewardMaster.ID));
                await db.SaveChangesAsync();


            }
            return "OK";
        
        }

        #endregion

        #region Detail Employee

        public async Task<object> GetRewardDetailEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_RewardDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_RewardMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.RewardAmount,
                          o.WithSalary,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLRewardDetailEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadRewardDetailEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_RewardDetails
                                               .Where(w => w.FK_tbl_WPT_RewardMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_RewardDetails
                                  .Where(w => w.FK_tbl_WPT_RewardMaster_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_RewardMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [AT No: " + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.RewardAmount,
                          o.WithSalary,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostRewardDetailEmployee(tbl_WPT_RewardDetail tbl_WPT_RewardDetail, string operation = "", string userName = "", int? MasterID = 0, int? DesignationID = 0, int? DepartmentID = 0, DateTime? JoiningDate = null)
        {

            if (operation == "Save New")
            {
                tbl_WPT_RewardDetail.CreatedBy = userName;
                tbl_WPT_RewardDetail.CreatedDate = DateTime.Now;
                db.tbl_WPT_RewardDetails.Add(tbl_WPT_RewardDetail);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save New Bulk")
            {
                tbl_WPT_RewardDetail.CreatedBy = userName;
                tbl_WPT_RewardDetail.CreatedDate = DateTime.Now;
                //db.tbl_WPT_RewardDetails.Add(tbl_WPT_RewardDetail);
                //await db.SaveChangesAsync();

                if (JoiningDate == null)
                    JoiningDate = DateTime.Now;

                SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };

                await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[USP_WPT_AddBulkEmployeesInReward] 
                   @CRUD_Msg={0} OUTPUT,@MasterID={1},@DesignationID={2},@DepartmentID={3},
                   @Amount={4},@WithSalary={5},@Remarks={6},@JoiningDate={7},@User={8}",
                    CRUD_Msg, MasterID, DesignationID, DepartmentID,
                    tbl_WPT_RewardDetail.RewardAmount, tbl_WPT_RewardDetail.WithSalary, tbl_WPT_RewardDetail.Remarks, JoiningDate, userName);


                if ((string)CRUD_Msg.Value == "Successful")
                    return "OK";
                else
                    return (string)CRUD_Msg.Value;

            }
            else if (operation == "Save Update")
            {
                if (tbl_WPT_RewardDetail.WithSalary)
                {
                    tbl_WPT_RewardDetail.FK_tbl_WPT_RewardDetail_Payment_ID = null;
                    tbl_WPT_RewardDetail.FK_tbl_WPT_EmployeeBankDetail_ID = null;
                }

                tbl_WPT_RewardDetail.ModifiedBy = userName;
                tbl_WPT_RewardDetail.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_RewardDetail).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_RewardDetails.Remove(db.tbl_WPT_RewardDetails.Find(tbl_WPT_RewardDetail.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<string> RewardDetailEmployeeUploadExcelFile(List<RewardExcelData> RewardExcelDataList, string operation, string userName, int MasterID = 0)
        {
            if (operation == "Save New" && MasterID > 0)
            {
                var empObject = (tbl_WPT_Employee)null;
                List<tbl_WPT_RewardDetail> RewardDetails = new List<tbl_WPT_RewardDetail>();
                foreach (var item in RewardExcelDataList)
                {
                    empObject = await db.tbl_WPT_Employees.Where(w => w.ATEnrollmentNo_Default == item.ATNo).OrderByDescending(o => o.JoiningDate).FirstOrDefaultAsync();

                    if (empObject != null)
                    {
                        if (db.tbl_WPT_RewardDetails.Where(w => w.FK_tbl_WPT_RewardMaster_ID == MasterID && w.FK_tbl_WPT_Employee_ID == empObject.ID).Count() == 0)
                        {
                            RewardDetails.Add(new tbl_WPT_RewardDetail() { ID = 0, FK_tbl_WPT_RewardMaster_ID = MasterID, FK_tbl_WPT_Employee_ID = empObject.ID, RewardAmount = item.RewardAmount, WithSalary = item.withSalary, Remarks = "From excel", CreatedBy = userName, CreatedDate = DateTime.Now });
                        }
                    }

                }
                if (RewardDetails.Count() > 0)
                {
                    db.tbl_WPT_RewardDetails.AddRange(RewardDetails);
                    db.SaveChanges();
                }

            }
            else {
                return "Wrong Operation";
            }

            
            
            return "OK";
        }

        #endregion

        #region Detail Payment

        public object GetWCLRewardDetailPayment()
        {
            return new[]
            {
                new { n = "by Instrument No", v = "byInstrumentNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadRewardDetailPayment(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_RewardDetail_Payments
                                               .Where(w => w.FK_tbl_WPT_RewardMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byInstrumentNo" && w.InstrumentNo.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_RewardDetail_Payments
                                        .Where(w => w.FK_tbl_WPT_RewardMaster_ID == MasterID)
                                         .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byInstrumentNo" && w.InstrumentNo.ToLower().Contains(FilterValueByText.ToLower())
                                            )
                                         .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_RewardMaster_ID,
                          o.FK_tbl_WPT_CompanyBankDetail_ID,
                          FK_tbl_WPT_CompanyBankDetail_IDName = o.tbl_WPT_CompanyBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_CompanyBankDetail.BankAccountNo + "]",
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.InstrumentNo,
                          TransactionDate = o.TransactionDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          Amount = o.tbl_WPT_RewardDetails.Sum(s => s.RewardAmount)
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostRewardDetailPayment(tbl_WPT_RewardDetail_Payment tbl_WPT_RewardDetail_Payment, string operation = "", string userName = "")
        {

            if (operation == "Save New")
            {
                tbl_WPT_RewardDetail_Payment.CreatedBy = userName;
                tbl_WPT_RewardDetail_Payment.CreatedDate = DateTime.Now;
                db.tbl_WPT_RewardDetail_Payments.Add(tbl_WPT_RewardDetail_Payment);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_RewardDetail_Payment.ModifiedBy = userName;
                tbl_WPT_RewardDetail_Payment.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_RewardDetail_Payment).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_RewardDetail_Payments.Remove(db.tbl_WPT_RewardDetail_Payments.Find(tbl_WPT_RewardDetail_Payment.ID));
                await db.SaveChangesAsync();


            }
            return "OK";

        }
        public async Task<object> GetRewardDetailPayment(int id)
        {
            var qry = from o in await db.tbl_WPT_RewardDetail_Payments.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_RewardMaster_ID,
                          o.FK_tbl_WPT_CompanyBankDetail_ID,
                          FK_tbl_WPT_CompanyBankDetail_IDName = o.tbl_WPT_CompanyBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_CompanyBankDetail.BankAccountNo + "]",
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.InstrumentNo,
                          TransactionDate = o.TransactionDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion

        #region Detail Payment Employees
        public object GetWCLRewardDetailPaymentEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" },new { n = "by AT No", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadRewardDetailPaymentEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_RewardDetails
                                               .Where(w => w.FK_tbl_WPT_RewardDetail_Payment_ID == MasterID)
                                               .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_RewardDetails
                                        .Where(w => w.FK_tbl_WPT_RewardDetail_Payment_ID == MasterID)
                                        .Where(w =>
                                               string.IsNullOrEmpty(FilterValueByText)
                                               ||
                                               FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                               ||
                                               FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                        )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.FK_tbl_WPT_RewardDetail_Payment_ID,
                          o.RewardAmount,
                          o.FK_tbl_WPT_EmployeeBankDetail_ID,
                          FK_tbl_WPT_EmployeeBankDetail_IDName = o.FK_tbl_WPT_EmployeeBankDetail_ID > 0 ? o.tbl_WPT_EmployeeBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_EmployeeBankDetail.BankAccountNo + "]" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostRewardDetailPaymentEmployee(string operation, string userName, int tbl_WPT_RewardDetailID = 0, int RewardPaymentID = 0, int DepartmentID = 0, int DesignationID = 0)
        {
            SqlParameter CRUD_Msg = new SqlParameter("CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };

            SqlParameter stbl_WPT_RewardDetailID = new SqlParameter("tbl_WPT_RewardDetailID", SqlDbType.Int) { Value = tbl_WPT_RewardDetailID };
            SqlParameter sRewardPaymentID = new SqlParameter("RewardPaymentID", SqlDbType.Int) { Value = RewardPaymentID };
            SqlParameter sOperation = new SqlParameter("Operation", SqlDbType.VarChar) { Value=operation, Size = 50 };
            SqlParameter sDepartmentID = new SqlParameter("DepartmentID", SqlDbType.Int) { Value = DepartmentID};
            SqlParameter sDesignationID = new SqlParameter("DesignationID", SqlDbType.Int) { Value = DesignationID };

            await db.Database.ExecuteSqlRawAsync(
                "EXECUTE [dbo].[USP_WPT_RewardPaymentDetailReferencing] @CRUD_Msg={0} OUTPUT,@tbl_WPT_RewardDetailID={1},@RewardPaymentID={2},@Operation={3},@DepartmentID={4},@DesignationID={5}",
                CRUD_Msg, stbl_WPT_RewardDetailID, sRewardPaymentID, sOperation, sDepartmentID, sDesignationID);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;

        }
        public async Task<object> GetRewardDetailPaymentEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_RewardDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_RewardMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.RewardAmount,
                          o.WithSalary,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }



        #endregion

        #region Report     

        public List<ReportCallingModel> GetRLReward()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Reward Detail",
                    GroupBy = new List<string>(){"Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Reward Detail Current Employees",
                    GroupBy = new List<string>(){"Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Reward Signature",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                }
            };
        }
        public List<ReportCallingModel> GetRLRewardPayment()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Bank Transfer Letter",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                }
            };
        }

        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Reward Detail")
            {
                return await Task.Run(() => RewardDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Reward Detail Current Employees")
            {
                return await Task.Run(() => RewardDetailCurrentEmp(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Bank Transfer Letter")
            {
                return await Task.Run(() => BankTransferLetter(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Reward Signature")
            {
                return await Task.Run(() => RewardSignature(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }

        private async Task<byte[]> RewardSignature(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------6 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.10), //AT
                        (float)(PageSize.A4.GetWidth()*0.40), // Name                        
                        (float)(PageSize.A4.GetWidth()*0.10), //WithSalary
                        (float)(PageSize.A4.GetWidth()*0.15), //  Amount
                        (float)(PageSize.A4.GetWidth()*0.15) // Signature
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GroupTotalAmount = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_RewardDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;

                int SNo = 1;
                bool firstrow = true;

                command.CommandTimeout = 0;
                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {

                            pdftableMain.AddHeaderCell(new Cell(1, 6).Add(new Paragraph().Add(sqlReader["RewardName"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("With Salary")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Signature")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            firstrow = false;
                        }
                        if (!string.IsNullOrEmpty(sqlReader["TransactionMode"].ToString()) && GroupbyValue != sqlReader["TransactionMode"].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalAmount))).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader["TransactionMode"].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupbyValue + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader["TransactionModeID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            GroupTotalAmount = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetMinHeight(25f).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((bool)sqlReader["WithSalary"]) ? "Yes" : "No")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["RewardAmount"]))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalAmount += (double)sqlReader["RewardAmount"];
                    }
                }
                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalAmount))).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> BankTransferLetter(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.LETTER, 25f, 25f, 90f, 80f, null, true, false, false);

            /////////////------------------------------table for Detail 8------------------------------////////////////

            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.LETTER.GetWidth() * 0.10),//S No
                        (float)(PageSize.LETTER.GetWidth() * 0.35),//ATNo
                        (float)(PageSize.LETTER.GetWidth() * 0.25),//Name 
                        (float)(PageSize.LETTER.GetWidth() * 0.20)//Department 
                }
            ).SetFontSize(9).SetFixedLayout().SetBorder(Border.NO_BORDER);

            Paragraph p = new Paragraph();

            string CompanyBankAcNo = "", Remarks = "", type = "";
            double TotalAmount = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {

                command.CommandText = "EXECUTE [dbo].[Report_WPT_RewardDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                bool firstrow = true;
                int SNo = 1;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {

                            p.SetFontSize(9);
                            p.Add(new Text("To,"))
                                .Add(new Text("The Manager").SetBold());

                            p.Add("\n")
                                .Add(new Text(sqlReader["BankName"].ToString() + " " + sqlReader["BranchName"].ToString() + " " + sqlReader["City"].ToString()));

                            pdftableMain.AddCell(new Cell(1, 4).Add(p).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(((DateTime)sqlReader["TransactionDate"]).ToString("MMMM dd,yyyy"))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            Remarks = sqlReader["Remarks"].ToString();
                            type = sqlReader["RewardName"].ToString();
                            CompanyBankAcNo = sqlReader["BankAccountNo"].ToString();

                            //---------------------------empty row that will be filled at the end of reader run-------------------//
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph()).SetBorder(Border.NO_BORDER).SetKeepTogether(true));



                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No.")).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Account Title")).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Account Number")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetKeepTogether(true));

                            firstrow = false;
                        }


                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountTitle"].ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountNo"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rs: " + String.Format("{0:n0}", sqlReader["RewardAmount"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                        SNo += 1;

                        TotalAmount += (double)sqlReader["RewardAmount"];
                    }
                }

            }

            //-----------------------update subject row with information------------------------------//
            p = new Paragraph();
            p.Add(new Text("SUBJECT: ").SetBold())
                .Add(new Text(type).SetBold().SetUnderline())
                .Add(new Text(" ").SetBold().SetUnderline())
                .Add(new Text(Remarks).SetBold().SetUnderline())
                .Add("\n")
                .Add("Dear Sir, \n")
                .Add("Kindly transfer the ")
                .Add(type)
                .Add(" ")
                .Add(Remarks)
                .Add(", through debited our A/c # ")
                .Add(CompanyBankAcNo)
                .Add(" amounting Rs.")
                .Add(new Text(String.Format("{0:n0}", TotalAmount)).SetBold().SetUnderline())
                .Add("/-")
                .Add("in our staff account maintain with your branch are as under;");

            if (pdftableMain.GetCell(2, 0) != null)
                pdftableMain.GetCell(2, 0).Add(new Paragraph().Add(p));



            pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("\n\nPlease transfer at your earliest. \nThanks & Regards \n\n\n\n")).Add(new Paragraph().Add("For " + Rpt_Shared.LicenseTo).SetBorderTop(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> RewardDetailCurrentEmp(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------7 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.08), // S No
                        (float)(PageSize.A4.GetWidth()*0.08), //AT
                        (float)(PageSize.A4.GetWidth()*0.28), // Name
                        (float)(PageSize.A4.GetWidth()*0.15), // Department
                        (float)(PageSize.A4.GetWidth()*0.17), // Designation
                        (float)(PageSize.A4.GetWidth()*0.10), // Joining
                        (float)(PageSize.A4.GetWidth()*0.10), // Amount
                        (float)(PageSize.A4.GetWidth()*0.04) // With Salary
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotal = 0, GroupTotal = 0;

                command.CommandText = "SELECT TOP(1)  dbo.tbl_WPT_RewardType.RewardName, dbo.tbl_WPT_CalendarYear_Months.MonthStart, dbo.tbl_WPT_CalendarYear_Months.MonthEnd FROM dbo.tbl_WPT_RewardMaster INNER JOIN dbo.tbl_WPT_CalendarYear_Months ON dbo.tbl_WPT_RewardMaster.FK_tbl_WPT_CalendarYear_Months_ID = dbo.tbl_WPT_CalendarYear_Months.ID INNER JOIN dbo.tbl_WPT_RewardType ON dbo.tbl_WPT_RewardMaster.FK_tbl_WPT_RewardType_ID = dbo.tbl_WPT_RewardType.ID WHERE  (dbo.tbl_WPT_RewardMaster.ID = " + id.ToString() + ")";
                command.CommandType = CommandType.Text;


                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        pdftableMain.AddHeaderCell(new Cell(1, 8).Add(new Paragraph().Add(sqlReader["RewardName"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddHeaderCell(new Cell(1, 8).Add(new Paragraph().Add(((DateTime)sqlReader["MonthStart"]).ToString("MMMM-yyyy"))).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                    }
                }

                //-----------------------------------------detail--------------------------------------//

                command.CommandText = "EXECUTE [dbo].[Report_WPT_RewardDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;
                bool firstrow = true;

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {

                            if (string.IsNullOrEmpty(GroupbyFieldName))
                            {
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Joining")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("With Salary")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            }

                            firstrow = false;
                        }

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();

                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Joining")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("With Salary")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotal = 0;

                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["JoiningDate"]).ToString("dd-MMM-yy"))).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["RewardAmount"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((bool)sqlReader["WithSalary"]) ? "Yes" : "No")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotal += Convert.ToDouble(sqlReader["RewardAmount"]);
                        GrandTotal += Convert.ToDouble(sqlReader["RewardAmount"]);
                    }
                }

                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> RewardDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------7 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.08), // S No
                        (float)(PageSize.A4.GetWidth()*0.08), //AT
                        (float)(PageSize.A4.GetWidth()*0.30), // Name
                        (float)(PageSize.A4.GetWidth()*0.20), // Designation
                        (float)(PageSize.A4.GetWidth()*0.20), // Designation
                        (float)(PageSize.A4.GetWidth()*0.10), // Amount
                        (float)(PageSize.A4.GetWidth()*0.04) // With Salary
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotal = 0, GroupTotal = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_RewardDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;

                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;
                bool firstrow = true;

                command.CommandTimeout = 0;
                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {
                            pdftableMain.AddHeaderCell(new Cell(1, 7).Add(new Paragraph().Add(sqlReader["RewardName"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            if (string.IsNullOrEmpty(GroupbyFieldName))
                            {
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("With Salary")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            }

                            firstrow = false;
                        }

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();

                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("With Salary")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotal = 0;

                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["RewardAmount"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((bool)sqlReader["WithSalary"]) ? "Yes" : "No")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotal += Convert.ToDouble(sqlReader["RewardAmount"]);
                        GrandTotal += Convert.ToDouble(sqlReader["RewardAmount"]);
                    }
                }
                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }

        #endregion

    }
    public class LoanRepository : ILoan
    {
        private readonly OreasDbContext db;
        public LoanRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Master

        public async Task<object> GetLoanMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_LoanMasters.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.FK_tbl_WPT_LoanType_ID,
                          FK_tbl_WPT_LoanType_IDName = o.tbl_WPT_LoanType.LoanType,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLLoanMaster()
        {
            return new[]
            {
                new { n = "by Doc No", v = "byDocNo" }, new { n = "by ATNo", v = "byATNo" }, new { n = "by Employee Name", v = "byEmpName" }
            }.ToList();
        }
        public object GetWCLBLoanMaster()
        {
            return new[]
            {
                new { n = "by Pending", v = "byPending" },new { n = "by Completed", v = "byCompleted" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLoanMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LoanMasters
                                               .Where(w =>
                                                        string.IsNullOrEmpty(FilterByLoad)
                                                        ||
                                                        FilterByLoad == "byPending" && (w.tbl_WPT_LoanDetails.Sum(s => (double?)s.Amount ?? 0)) - (db.tbl_WPT_PayRunDetail_EmpDetail_Wages.Where(a => a.tbl_WPT_LoanDetail.tbl_WPT_LoanMaster.ID == w.ID).Sum(s => (double?)s.Credit) ?? 0) > 0
                                                        ||
                                                        FilterByLoad == "byCompleted" && (w.tbl_WPT_LoanDetails.Sum(s => (double?)s.Amount ?? 0)) - (db.tbl_WPT_PayRunDetail_EmpDetail_Wages.Where(a => a.tbl_WPT_LoanDetail.tbl_WPT_LoanMaster.ID == w.ID).Sum(s => (double?)s.Credit) ?? 0) == 0
                                                         )
                                               .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byDocNo" && w.DocNo.ToString() == FilterValueByText
                                                        ||
                                                        FilterByText == "byEmpName" && w.tbl_WPT_LoanDetails.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                                        ||
                                                        FilterByText == "byATNo" && w.tbl_WPT_LoanDetails.Any(a => a.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower()))
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LoanMasters
                                        .Where(w =>
                                                    string.IsNullOrEmpty(FilterByLoad)
                                                    ||
                                                    FilterByLoad == "byPending" && (w.tbl_WPT_LoanDetails.Sum(s => (double?)s.Amount ?? 0)) - (db.tbl_WPT_PayRunDetail_EmpDetail_Wages.Where(a => a.tbl_WPT_LoanDetail.tbl_WPT_LoanMaster.ID == w.ID).Sum(s => (double?)s.Credit) ?? 0) > 0
                                                    ||
                                                    FilterByLoad == "byCompleted" && (w.tbl_WPT_LoanDetails.Sum(s => (double?)s.Amount ?? 0)) - (db.tbl_WPT_PayRunDetail_EmpDetail_Wages.Where(a => a.tbl_WPT_LoanDetail.tbl_WPT_LoanMaster.ID == w.ID).Sum(s => (double?)s.Credit) ?? 0) == 0
                                              )
                                        .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byDocNo" && w.DocNo.ToString() == FilterValueByText
                                                        ||
                                                        FilterByText == "byEmpName" && w.tbl_WPT_LoanDetails.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                                        ||
                                                        FilterByText == "byATNo" && w.tbl_WPT_LoanDetails.Any(a => a.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower()))
                                                     )
                                        .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.FK_tbl_WPT_LoanType_ID,
                          FK_tbl_WPT_LoanType_IDName = o.tbl_WPT_LoanType.LoanType,
                          TotalLoan = o.tbl_WPT_LoanDetails?.Sum(s => s.Amount) ?? 0,
                          TotalBalance = (o.tbl_WPT_LoanDetails?.Sum(s => s.Amount) ?? 0) - (db.tbl_WPT_PayRunDetail_EmpDetail_Wages?.Where(w => w.tbl_WPT_LoanDetail.tbl_WPT_LoanMaster.ID == o.ID)?.Sum(s => (double?)s.Credit) ?? 0),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLoanMaster(tbl_WPT_LoanMaster tbl_WPT_LoanMaster, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };


            if (operation == "Save New")
            {
                tbl_WPT_LoanMaster.CreatedBy = userName;
                tbl_WPT_LoanMaster.CreatedDate = DateTime.Now;
                //db.tbl_WPT_LoanMasters.Add(tbl_WPT_LoanMaster);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LoanMaster.ModifiedBy = userName;
                tbl_WPT_LoanMaster.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_LoanMaster).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";

            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_LoanMasters.Remove(db.tbl_WPT_LoanMasters.Find(tbl_WPT_LoanMaster.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";


            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_LoanMaster] 
                @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT,
                @ID={3},@DocNo={4},@DocDate={5},@FK_tbl_WPT_LoanType_ID={6},
                @CreatedBy={7},@CreatedDate={8},@ModifiedBy={9},@ModifiedDate={10}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_LoanMaster.ID, tbl_WPT_LoanMaster.DocNo, tbl_WPT_LoanMaster.DocDate, tbl_WPT_LoanMaster.FK_tbl_WPT_LoanType_ID,
                tbl_WPT_LoanMaster.CreatedBy, tbl_WPT_LoanMaster.CreatedDate, tbl_WPT_LoanMaster.ModifiedBy, tbl_WPT_LoanMaster.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;

        }

        #endregion

        #region Detail Employee

        public async Task<object> GetLoanDetailEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_LoanDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LoanMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.Amount,
                          Balance = o.Amount - (o.tbl_WPT_PayRunDetail_EmpDetail_Wages?.Sum(s => s.Credit) ?? 0),
                          o.InstallmentRate,
                          EffectiveFrom = o.EffectiveFrom.ToString("dd-MMM-yyyy"),
                          ReceivingDate = o.ReceivingDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.IsCompleted,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLLoanDetailEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" },new { n = "by ATNo", v = "byATNo" },new { n = "by Employee Level", v = "byEmployeeLevel" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLoanDetailEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LoanDetails
                                               .Where(w => w.FK_tbl_WPT_LoanMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byEmployeeLevel" && w.tbl_WPT_Employee.tbl_WPT_EmployeeLevel.LevelName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LoanDetails
                                  .Where(w => w.FK_tbl_WPT_LoanMaster_ID == MasterID)
                                  .Where(w =>
                                           string.IsNullOrEmpty(FilterValueByText)
                                           ||
                                           FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                           ||
                                           FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                           ||
                                           FilterByText == "byEmployeeLevel" && w.tbl_WPT_Employee.tbl_WPT_EmployeeLevel.LevelName.ToLower().Contains(FilterValueByText.ToLower())
                                          )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LoanMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [ATNo:" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + " EmpNo:" + o.tbl_WPT_Employee.EmployeeNo + "]",
                          o.Amount,
                          Balance = o.Amount - (o.tbl_WPT_PayRunDetail_EmpDetail_Wages?.Sum(s => s.Credit) ?? 0),
                          o.InstallmentRate,
                          EffectiveFrom = o.EffectiveFrom.ToString("dd-MMM-yyyy"),
                          ReceivingDate = o.ReceivingDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.IsCompleted,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLoanDetailEmployee(tbl_WPT_LoanDetail tbl_WPT_LoanDetail, string operation = "", string userName = "", int? MasterID = 0, int? DesignationID = 0, int? DepartmentID = 0, DateTime? JoiningDate = null)
        {

            if (operation == "Save New")
            {
                tbl_WPT_LoanDetail.CreatedBy = userName;
                tbl_WPT_LoanDetail.CreatedDate = DateTime.Now;
                tbl_WPT_LoanDetail.IsCompleted = false;
                db.tbl_WPT_LoanDetails.Add(tbl_WPT_LoanDetail);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save New Bulk")
            {
                tbl_WPT_LoanDetail.CreatedBy = userName;
                tbl_WPT_LoanDetail.CreatedDate = DateTime.Now;
                //db.tbl_WPT_LoanDetails.Add(tbl_WPT_LoanDetail);
                //await db.SaveChangesAsync();

                if (JoiningDate == null)
                    JoiningDate = DateTime.Now;

                SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };

                await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[USP_WPT_AddBulkEmployeesInLoan] 
                    @CRUD_Msg={0} OUTPUT,@MasterID={1},@DesignationID={2},@DepartmentID={3},
                    @Amount={4},@InstallmentRate={5},@EffectiveFrom={6},@ReceivingDate={7},
                    @Remarks={8},@JoiningDate={9},@User={10}",
                    CRUD_Msg, MasterID, DesignationID, DepartmentID,
                    tbl_WPT_LoanDetail.Amount, tbl_WPT_LoanDetail.InstallmentRate, tbl_WPT_LoanDetail.EffectiveFrom, tbl_WPT_LoanDetail.ReceivingDate,
                    tbl_WPT_LoanDetail.Remarks, JoiningDate, userName);


                if ((string)CRUD_Msg.Value == "Successful")
                    return "OK";
                else
                    return (string)CRUD_Msg.Value;

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LoanDetail.ModifiedBy = userName;
                tbl_WPT_LoanDetail.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_LoanDetail).State = EntityState.Modified;
                db.Entry(tbl_WPT_LoanDetail).Property(x => x.IsCompleted).IsModified = false;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_LoanDetails.Remove(db.tbl_WPT_LoanDetails.Find(tbl_WPT_LoanDetail.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<string> LoanDetailEmployeeUploadExcelFile(List<LoanExcelData> LoanExcelDataList, string operation, string userName, int MasterID = 0)
        {
            if (operation == "Save New" && MasterID > 0)
            {
                var empObject = (tbl_WPT_Employee)null;
                List<tbl_WPT_LoanDetail> LoanDetails = new List<tbl_WPT_LoanDetail>();
                foreach (var item in LoanExcelDataList)
                {
                    empObject = await db.tbl_WPT_Employees.Where(w => w.ATEnrollmentNo_Default == item.ATNo).OrderByDescending(o => o.JoiningDate).FirstOrDefaultAsync();

                    if (empObject != null)
                    {
                        if (db.tbl_WPT_LoanDetails.Where(w => w.FK_tbl_WPT_LoanMaster_ID == MasterID && w.FK_tbl_WPT_Employee_ID == empObject.ID).Count() == 0)
                        {
                            LoanDetails.Add(new tbl_WPT_LoanDetail() { ID = 0, FK_tbl_WPT_LoanMaster_ID = MasterID, FK_tbl_WPT_Employee_ID = empObject.ID, Amount = item.Amount, InstallmentRate = item.Rate, EffectiveFrom = item.EffectiveFrom, ReceivingDate = item.ReceivingDate, Remarks = "From excel", CreatedBy = userName, CreatedDate = DateTime.Now });
                        }
                    }

                }
                if (LoanDetails.Count() > 0)
                {
                    db.tbl_WPT_LoanDetails.AddRange(LoanDetails);
                    db.SaveChanges();
                }

            }
            else
            {
                return "Wrong Operation";
            }



            return "OK";
        }

        #endregion

        #region Detail Payment

        public object GetWCLLoanDetailPayment()
        {
            return new[]
            {
                new { n = "by Instrument No", v = "byInstrumentNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLoanDetailPayment(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LoanDetail_Payments
                                               .Where(w => w.FK_tbl_WPT_LoanMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byInstrumentNo" && w.InstrumentNo.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LoanDetail_Payments
                                        .Where(w => w.FK_tbl_WPT_LoanMaster_ID == MasterID)
                                         .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byInstrumentNo" && w.InstrumentNo.ToLower().Contains(FilterValueByText.ToLower())
                                            )
                                         .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LoanMaster_ID,
                          o.FK_tbl_WPT_CompanyBankDetail_ID,
                          FK_tbl_WPT_CompanyBankDetail_IDName = o.tbl_WPT_CompanyBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_CompanyBankDetail.BankAccountNo + "]",
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.InstrumentNo,
                          TransactionDate = o.TransactionDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          Amount = o.tbl_WPT_LoanDetails.Sum(s => s.Amount)
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLoanDetailPayment(tbl_WPT_LoanDetail_Payment tbl_WPT_LoanDetail_Payment, string operation = "", string userName = "")
        {

            if (operation == "Save New")
            {
                tbl_WPT_LoanDetail_Payment.CreatedBy = userName;
                tbl_WPT_LoanDetail_Payment.CreatedDate = DateTime.Now;
                db.tbl_WPT_LoanDetail_Payments.Add(tbl_WPT_LoanDetail_Payment);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_LoanDetail_Payment.ModifiedBy = userName;
                tbl_WPT_LoanDetail_Payment.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_LoanDetail_Payment).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_LoanDetail_Payments.Remove(db.tbl_WPT_LoanDetail_Payments.Find(tbl_WPT_LoanDetail_Payment.ID));
                await db.SaveChangesAsync();


            }
            return "OK";

        }
        public async Task<object> GetLoanDetailPayment(int id)
        {
            var qry = from o in await db.tbl_WPT_LoanDetail_Payments.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LoanMaster_ID,
                          o.FK_tbl_WPT_CompanyBankDetail_ID,
                          FK_tbl_WPT_CompanyBankDetail_IDName = o.tbl_WPT_CompanyBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_CompanyBankDetail.BankAccountNo + "]",
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.InstrumentNo,
                          TransactionDate = o.TransactionDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion

        #region Detail Payment Employees
        public object GetWCLLoanDetailPaymentEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" },new { n = "by AT No", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadLoanDetailPaymentEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LoanDetails
                                               .Where(w => w.FK_tbl_WPT_LoanDetail_Payment_ID == MasterID)
                                               .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LoanDetails
                                        .Where(w => w.FK_tbl_WPT_LoanDetail_Payment_ID == MasterID)
                                        .Where(w =>
                                               string.IsNullOrEmpty(FilterValueByText)
                                               ||
                                               FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                               ||
                                               FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                        )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.FK_tbl_WPT_LoanDetail_Payment_ID,
                          o.Amount,
                          o.FK_tbl_WPT_EmployeeBankDetail_ID,
                          FK_tbl_WPT_EmployeeBankDetail_IDName = o.FK_tbl_WPT_EmployeeBankDetail_ID > 0 ? o.tbl_WPT_EmployeeBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_EmployeeBankDetail.BankAccountNo + "]" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostLoanDetailPaymentEmployee(string operation, string userName, int tbl_WPT_LoanDetailID = 0, int LoanPaymentID = 0, int DepartmentID = 0, int DesignationID = 0)
        {
            SqlParameter CRUD_Msg = new SqlParameter("CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };

            SqlParameter stbl_WPT_LoanDetailID = new SqlParameter("tbl_WPT_LoanDetailID", SqlDbType.Int) { Value = tbl_WPT_LoanDetailID };
            SqlParameter sLoanPaymentID = new SqlParameter("LoanPaymentID", SqlDbType.Int) { Value = LoanPaymentID };
            SqlParameter sOperation = new SqlParameter("Operation", SqlDbType.VarChar) { Value = operation, Size = 50 };
            SqlParameter sDepartmentID = new SqlParameter("DepartmentID", SqlDbType.Int) { Value = DepartmentID };
            SqlParameter sDesignationID = new SqlParameter("DesignationID", SqlDbType.Int) { Value = DesignationID };

            await db.Database.ExecuteSqlRawAsync(
                "EXECUTE [dbo].[USP_WPT_LoanPaymentDetailReferencing] @CRUD_Msg={0} OUTPUT,@tbl_WPT_LoanDetailID={1},@LoanPaymentID={2},@Operation={3},@DepartmentID={4},@DesignationID={5}",
                CRUD_Msg, stbl_WPT_LoanDetailID, sLoanPaymentID, sOperation, sDepartmentID, sDesignationID);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;

        }
        public async Task<object> GetLoanDetailPaymentEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_LoanDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LoanMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.Amount,
                          Balance = o.Amount - (o.tbl_WPT_PayRunDetail_EmpDetail_Wages?.Sum(s => s.Credit) ?? 0),
                          o.InstallmentRate,
                          EffectiveFrom = o.EffectiveFrom.ToString("dd-MMM-yyyy"),
                          ReceivingDate = o.ReceivingDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }



        #endregion

        #region Loan Individual
        public async Task<PagedData<object>> LoadLoanIndividual(int CurrentPage = 1, int EmployeeID = 0, DateTime DateTill = new DateTime(), int? LoanTypeID = 0)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_LoanDetails
                                               .Where(w=> 
                                                            w.FK_tbl_WPT_Employee_ID == EmployeeID
                                                            &&
                                                            (LoanTypeID == 0 || w.tbl_WPT_LoanMaster.FK_tbl_WPT_LoanType_ID == LoanTypeID)
                                                            &&
                                                            w.EffectiveFrom <= DateTill
                                                      )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_LoanDetails
                                  .Where(w =>
                                              w.FK_tbl_WPT_Employee_ID == EmployeeID
                                              &&
                                              (LoanTypeID == 0 || w.tbl_WPT_LoanMaster.FK_tbl_WPT_LoanType_ID == LoanTypeID)
                                              &&
                                              w.EffectiveFrom <= DateTill
                                          ).ToListAsync()  
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_LoanMaster_ID,
                          o.tbl_WPT_LoanMaster.DocNo,
                          o.tbl_WPT_LoanMaster.tbl_WPT_LoanType.LoanType,
                          o.Amount,
                          Balance = o.Amount - (o.tbl_WPT_PayRunDetail_EmpDetail_Wages?.Sum(s => s.Credit) ?? 0),
                          o.InstallmentRate,
                          EffectiveFrom = o.EffectiveFrom.ToString("dd-MMM-yyyy"),
                          ReceivingDate = o.ReceivingDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            pageddata.Data = qry.OrderBy(i => i.Balance).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize);

            return pageddata;
        }

        #endregion

        #region Report     

        public List<ReportCallingModel> GetRLLoan()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Pending Loan List",
                    GroupBy = new List<string>(){ "Loan Type", "Department", "Designation", "Doc No", "Employee", "Level" },
                    OrderBy = new List<string>(){ "Effective Date", "Doc Date", "ATNo" },
                    SeekBy = null
                }
            };
        }
        public List<ReportCallingModel> GetRLLoanDetail()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Loan Detail",
                    GroupBy = new List<string>(){"Department", "Designation", "Level" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                    SeekBy = null
                },
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Loan Signature",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                }
            };
        }
        public List<ReportCallingModel> GetRLLoanPayment()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Bank Transfer Letter",
                    GroupBy = null,
                    OrderBy = null,
                    SeekBy = null
                }
            };
        }
        public List<ReportCallingModel> GetRLLoanIndividual()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                {
                    ReportType= EnumReportType.Periodic,
                    ReportName ="Loan Individual List",
                    GroupBy = new List<string>(){ "Loan Type" },
                    OrderBy = new List<string>(){  "Received Date", "Effective Date" },
                    SeekBy = new List<string>() { "Pending", "Completed", "All" }
                }
            };
        }
        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Pending Loan List")
            {
                return await Task.Run(() => PendingLoanList(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Loan Detail Individual")
            {
                return await Task.Run(() => LoanDetailIndividual(id, rn, userName));
            }
            else if (rn == "Loan Detail")
            {
                return await Task.Run(() => LoanDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Loan Signature")
            {
                return await Task.Run(() => LoanSignature(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Bank Transfer Letter")
            {
                return await Task.Run(() => BankTransferLetter(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Loan Individual List")
            {
                return await Task.Run(() => LoanIndividualList(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }
        private async Task<byte[]> LoanIndividualList(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 30f, "----- Loan Individual List " + SeekBy + "-----", true);

            /////////////------------------------------table for Detail 10------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.08),//S No
                        (float)(PageSize.A4.GetWidth() * 0.30),//Loan Type 
                        (float)(PageSize.A4.GetWidth() * 0.14),//Amount 
                        (float)(PageSize.A4.GetWidth() * 0.14),//Installment 
                        (float)(PageSize.A4.GetWidth() * 0.10),//Received 
                        (float)(PageSize.A4.GetWidth() * 0.10),//Effective 
                        (float)(PageSize.A4.GetWidth() * 0.14)// Balance
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalLoan = 0, GrandTotalBalance = 0, GroupTotalLoan = 0, GroupTotalBalance = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_LoanDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Loan Type" ? "LoanType" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan Type")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Received")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                command.CommandTimeout = 0;
                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalLoan) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalBalance) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            }
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan Type")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Received")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotalLoan = 0;
                            GroupTotalBalance = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LoanType"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true).SetTextAlignment(TextAlignment.RIGHT));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["InstallmentRate"]) + "/-")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true).SetTextAlignment(TextAlignment.RIGHT));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["ReceivingDate"]).ToString("dd-MMM-yy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveFrom"]).ToString("MMM-yy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Balance"]) + "/-")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true).SetTextAlignment(TextAlignment.RIGHT));

                        SNo = SNo + 1;

                        GroupTotalLoan += Convert.ToDouble(sqlReader["Amount"]);
                        GroupTotalBalance += Convert.ToDouble(sqlReader["Balance"]);

                        GrandTotalLoan += Convert.ToDouble(sqlReader["Amount"]);
                        GrandTotalBalance += Convert.ToDouble(sqlReader["Balance"]);

                    }
                }

                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalLoan) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalBalance) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));



                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalLoan) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalBalance) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> BankTransferLetter(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.LETTER, 25f, 25f, 90f, 80f, null, true, false, false);

            /////////////------------------------------table for Detail 8------------------------------////////////////

            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.LETTER.GetWidth() * 0.10),//S No
                        (float)(PageSize.LETTER.GetWidth() * 0.35),//ATNo
                        (float)(PageSize.LETTER.GetWidth() * 0.25),//Name 
                        (float)(PageSize.LETTER.GetWidth() * 0.20)//Department 
                }
            ).SetFontSize(9).SetFixedLayout().SetBorder(Border.NO_BORDER);

            Paragraph p = new Paragraph();

            string CompanyBankAcNo = "", Remarks = "", type = "";
            double TotalAmount = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_LoanDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                bool firstrow = true;
                int SNo = 1;

                command.CommandTimeout = 0;
                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {

                            p.SetFontSize(9);
                            p.Add(new Text("To,"))
                                .Add(new Text("The Manager").SetBold());

                            p.Add("\n")
                                .Add(new Text(sqlReader["BankName"].ToString() + " " + sqlReader["BranchName"].ToString() + " " + sqlReader["City"].ToString()));

                            pdftableMain.AddCell(new Cell(1, 4).Add(p).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(((DateTime)sqlReader["TransactionDate"]).ToString("MMMM dd,yyyy"))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            Remarks = sqlReader["Remarks"].ToString();
                            type = sqlReader["LoanType"].ToString();
                            CompanyBankAcNo = sqlReader["BankAccountNo"].ToString();

                            //---------------------------empty row that will be filled at the end of reader run-------------------//
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph()).SetBorder(Border.NO_BORDER).SetKeepTogether(true));



                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No.")).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Account Title")).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Account Number")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetKeepTogether(true));

                            firstrow = false;
                        }


                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountTitle"].ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountNo"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rs: " + String.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                        SNo += 1;

                        TotalAmount += (double)sqlReader["Amount"];
                    }
                }

            }

            //-----------------------update subject row with information------------------------------//
            p = new Paragraph();
            p.Add(new Text("SUBJECT: ").SetBold())
                .Add(new Text(type).SetBold().SetUnderline())
                .Add(new Text(" ").SetBold().SetUnderline())
                .Add(new Text(Remarks).SetBold().SetUnderline())
                .Add("\n")
                .Add("Dear Sir, \n")
                .Add("Kindly transfer the ")
                .Add(type)
                .Add(" ")
                .Add(Remarks)
                .Add(", through debited our A/c # ")
                .Add(CompanyBankAcNo)
                .Add(" amounting Rs.")
                .Add(new Text(String.Format("{0:n0}", TotalAmount)).SetBold().SetUnderline())
                .Add("/-")
                .Add("in our staff account maintain with your branch are as under;");

            if (pdftableMain.GetCell(2, 0) != null)
                pdftableMain.GetCell(2, 0).Add(new Paragraph().Add(p));



            pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("\n\nPlease transfer at your earliest. \nThanks & Regards \n\n\n\n")).Add(new Paragraph().Add("For " + Rpt_Shared.LicenseTo).SetBorderTop(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> LoanSignature(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------5 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.10), //AT
                        (float)(PageSize.A4.GetWidth()*0.50), // Name    
                        (float)(PageSize.A4.GetWidth()*0.15), //  Amount
                        (float)(PageSize.A4.GetWidth()*0.15) // Signature
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GroupTotalAmount = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_LoanDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;

                int SNo = 1;
                bool firstrow = true;

                command.CommandTimeout = 0;
                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {
                            pdftableMain.AddHeaderCell(new Cell(1, 5).Add(new Paragraph().Add(sqlReader["LoanType"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Signature")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            firstrow = false;
                        }
                        if (!string.IsNullOrEmpty(sqlReader["TransactionMode"].ToString()) && GroupbyValue != sqlReader["TransactionMode"].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalAmount))).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader["TransactionMode"].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupbyValue + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader["TransactionModeID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            GroupTotalAmount = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetMinHeight(25f).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalAmount += (double)sqlReader["Amount"];
                    }
                }

                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalAmount))).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> LoanDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------9 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.05), // S No
                        (float)(PageSize.A4.GetWidth()*0.05), //AT
                        (float)(PageSize.A4.GetWidth()*0.25), // Name
                        (float)(PageSize.A4.GetWidth()*0.19), // Department
                        (float)(PageSize.A4.GetWidth()*0.20), // Designation
                        (float)(PageSize.A4.GetWidth()*0.07), // Amount
                        (float)(PageSize.A4.GetWidth()*0.07), // Rate
                        (float)(PageSize.A4.GetWidth()*0.05), // Eff
                        (float)(PageSize.A4.GetWidth()*0.07) // Balance
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotal = 0, GroupTotal = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_LoanDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          GroupBy == "Level" ? "LevelName" :
                                          "";

                int SNo = 1;
                bool firstrow = true;

                command.CommandTimeout = 0;
                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {
                            pdftableMain.AddHeaderCell(new Cell(1, 9).Add(new Paragraph().Add(sqlReader["LoanType"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            if (string.IsNullOrEmpty(GroupbyFieldName))
                            {
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Rate")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Eff")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Balance")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            }

                            firstrow = false;
                        }

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Eff")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotal = 0;

                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(new Link(sqlReader["EmployeeName"].ToString(), PdfAction.CreateURI(uri + "?rn=Loan Detail Individual" + "&id=" + sqlReader["DetailID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["InstallmentRate"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveFrom"]).ToString("MMM-yy"))).SetTextAlignment(TextAlignment.CENTER).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Balance"]))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        SNo = SNo + 1;

                        GroupTotal += Convert.ToDouble(sqlReader["Amount"]);
                        GrandTotal += Convert.ToDouble(sqlReader["Amount"]);
                    }
                }

                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));



                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 9).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> LoanDetailIndividual(int id = 0, string rn = "", string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- Loan Detail -----", true);

            /////////////------------------------------table for Detail 10------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.15),//S No
                        (float)(PageSize.A4.GetWidth() * 0.35),//month
                        (float)(PageSize.A4.GetWidth() * 0.25),//deduction 
                        (float)(PageSize.A4.GetWidth() * 0.25)//Balance 
                }
            ).SetFontSize(10).SetFixedLayout().SetBorder(Border.NO_BORDER);

            double Balance = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_LoanDetail] @ReportName,null,null,@MasterID,null,null,null,0,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                int SNo = 1;
                bool firstrow = true;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Name: ")).SetBold().SetBorder(Border.NO_BORDER).SetBorderLeft(new SolidBorder(0.5f)).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetBold().SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("ATNo: ")).SetBold().SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBold().SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)).SetBorderRight(new SolidBorder(0.5f)).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan Type: ")).SetBold().SetBorder(Border.NO_BORDER).SetBorderLeft(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LoanType"].ToString())).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective: ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveFrom"]).ToString("MMMM-yyyy"))).SetBold().SetBorder(Border.NO_BORDER).SetBorderRight(new SolidBorder(0.5f)).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan Amount: ")).SetBold().SetBorder(Border.NO_BORDER).SetBorderLeft(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Amount"].ToString())).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate: ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["InstallmentRate"].ToString())).SetBold().SetBorder(Border.NO_BORDER).SetBorderRight(new SolidBorder(0.5f)).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Detail")).SetBold().SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));



                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deduction Month")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deduction Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                            firstrow = false;
                            Balance = Convert.ToDouble(sqlReader["Amount"]);
                        }

                        if (sqlReader["MonthStart"] != DBNull.Value)
                        {
                            Balance -= Convert.ToDouble(sqlReader["Credit"]);
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["MonthStart"]).ToString("MMMM-yyyy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Credit"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Balance.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            SNo = SNo + 1;
                        }




                    }
                }


            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PendingLoanList(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 30f, "----- Loan List " + SeekBy + "-----", true);

            /////////////------------------------------table for Detail 10------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.07),//S No
                        (float)(PageSize.A4.GetWidth() * 0.07),//ATNo
                        (float)(PageSize.A4.GetWidth() * 0.15),//Name 
                        (float)(PageSize.A4.GetWidth() * 0.10),//Department 
                        (float)(PageSize.A4.GetWidth() * 0.10),//Designation 
                        (float)(PageSize.A4.GetWidth() * 0.13),//Loan Type 
                        (float)(PageSize.A4.GetWidth() * 0.09),//Eff
                        (float)(PageSize.A4.GetWidth() * 0.10),//Loan
                        (float)(PageSize.A4.GetWidth() * 0.09),//Inst
                        (float)(PageSize.A4.GetWidth() * 0.10) //Balance
                }
            ).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalLoan = 0, GrandTotalBalance = 0, GroupTotalLoan = 0, GroupTotalBalance = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_LoanDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          GroupBy == "Loan Type" ? "LoanType" :
                                          GroupBy == "Doc No" ? "DocNo" :
                                          GroupBy == "Employee" ? "EmployeeName" :
                                          GroupBy == "Level" ? "LevelName" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan Type")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }
                command.CommandTimeout = 0;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalLoan) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalBalance) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            }
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan Type")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotalLoan = 0;
                            GroupTotalBalance = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(new Link(sqlReader["EmployeeName"].ToString(), PdfAction.CreateURI(uri + "?rn=Loan Detail Individual" + "&id=" + sqlReader["DetailID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LoanType"].ToString())).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveFrom"]).ToString("MMM-yy"))).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["InstallmentRate"]) + "/-")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Balance"]) + "/-")).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalLoan += Convert.ToDouble(sqlReader["Amount"]);
                        GroupTotalBalance += Convert.ToDouble(sqlReader["Balance"]);

                        GrandTotalLoan += Convert.ToDouble(sqlReader["Amount"]);
                        GrandTotalBalance += Convert.ToDouble(sqlReader["Balance"]);

                    }
                }

                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalLoan) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalBalance) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));



                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalLoan) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalBalance) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));



            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }

 
        #endregion

    }
    public class IncrementRepository : IIncrement
    {
        private readonly OreasDbContext db;
        public IncrementRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Calendar
        public object GetWCLIncrementCalendar()
        {
            return new[]
            {
                new { n = "by Year", v = "byYear" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadIncrementCalendar(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_CalendarYears
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byYear" && (w.CalendarYear.ToString() == FilterValueByText || w.CalendarYear.ToString() == FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYears
                                  .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byYear" && (w.CalendarYear.ToString() == FilterValueByText || w.CalendarYear.ToString() == FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.CalendarYear,
                          NoOfIncrementDoc = o.tbl_WPT_IncrementMasters.Count(),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          CalendarStartYear = o.tbl_WPT_CalendarYear_Monthss.FirstOrDefault().MonthStart.Year,
                          CalendarEndYear = o.tbl_WPT_CalendarYear_Monthss.LastOrDefault().MonthEnd.Year,
                          CalendarStartMonthSName = o.tbl_WPT_CalendarYear_Monthss.FirstOrDefault().MonthStart.ToString("MMMM"),
                          CalendarEndMonthName = o.tbl_WPT_CalendarYear_Monthss.LastOrDefault().MonthEnd.ToString("MMMM"),
                          CalendarStartDay = o.tbl_WPT_CalendarYear_Monthss.FirstOrDefault().MonthStart.Day,
                          CalendarEndDay = o.tbl_WPT_CalendarYear_Monthss.LastOrDefault().MonthEnd.Day
                      };


            pageddata.Data = qry;

            return pageddata;
        }

        #endregion

        #region Increment Master

        public async Task<object> GetIncrementMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_IncrementMasters.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLIncrementMaster()
        {
            return new[]
            {
                new { n = "by DocNo", v = "byDocNo" }, new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by AT No", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadIncrementMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_IncrementMasters
                                               .Where(w=> w.FK_tbl_WPT_CalendarYear_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDocNo" && w.DocNo.ToString() == FilterValueByText
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_IncrementDetails.Any(a=> a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_IncrementDetails.Any(a => a.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower()== FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_IncrementMasters
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_ID == MasterID)
                                  .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byRemarks" && w.Remarks == FilterValueByText
                                            ||
                                            FilterByText == "byEmployeeName" && w.tbl_WPT_IncrementDetails.Any(a => a.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower()))
                                            ||
                                            FilterByText == "byATNo" && w.tbl_WPT_IncrementDetails.Any(a => a.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_ID,
                          o.DocNo,
                          DocDate = o.DocDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          TotalEmployees = o.tbl_WPT_IncrementDetails.Count()
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostIncrementMaster(tbl_WPT_IncrementMaster tbl_WPT_IncrementMaster, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_IncrementMaster.CreatedBy = userName;
                tbl_WPT_IncrementMaster.CreatedDate = DateTime.Now;
                //db.tbl_WPT_IncrementMasters.Add(tbl_WPT_IncrementMaster);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_IncrementMaster.ModifiedBy = userName;
                tbl_WPT_IncrementMaster.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_IncrementMaster).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_IncrementMasters.Remove(db.tbl_WPT_IncrementMasters.Find(tbl_WPT_IncrementMaster.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_IncrementMaster] 
               @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT,
               @ID={3},@DocNo={4},@DocDate={5},@FK_tbl_WPT_CalendarYear_ID={6},@Remarks={7},
               @CreatedBy={8},@CreatedDate={9},@ModifiedBy={10},@ModifiedDate={11}",
               CRUD_Type, CRUD_Msg, CRUD_ID,
               tbl_WPT_IncrementMaster.ID, tbl_WPT_IncrementMaster.DocNo, tbl_WPT_IncrementMaster.DocDate, tbl_WPT_IncrementMaster.FK_tbl_WPT_CalendarYear_ID, tbl_WPT_IncrementMaster.Remarks,
               tbl_WPT_IncrementMaster.CreatedBy, tbl_WPT_IncrementMaster.CreatedDate, tbl_WPT_IncrementMaster.ModifiedBy, tbl_WPT_IncrementMaster.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;



        }

        #endregion

        #region Increment Detail Employee

        public async Task<object> GetIncrementDetailEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_IncrementDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_IncrementMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                          o.IncrementValue,
                          o.FK_tbl_WPT_IncrementBy_ID,
                          FK_tbl_WPT_IncrementBy_IDName = o.tbl_WPT_IncrementBy.IncrementBy,
                          o.Arrear,
                          o.FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrear,
                          FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrearName = o.tbl_WPT_CalendarYear_Months?.MonthStart.ToString("MMMM-yy") ?? "",
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public object GetWCLIncrementDetailEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" },new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadIncrementDetailEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_IncrementDetails                    
                                               .Where(w => w.FK_tbl_WPT_IncrementMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_IncrementDetails
                                  .Where(w => w.FK_tbl_WPT_IncrementMaster_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_IncrementMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          EffectiveDate = o.EffectiveDate.ToString("dd-MMM-yyyy"),
                          o.IncrementValue,
                          o.FK_tbl_WPT_IncrementBy_ID,
                          FK_tbl_WPT_IncrementBy_IDName = o.tbl_WPT_IncrementBy.IncrementBy,
                          o.Arrear,
                          o.FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrear,
                          FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrearName = o.tbl_WPT_CalendarYear_Months?.MonthStart.ToString("MMMM-yy") ?? "",
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostIncrementDetailEmployee(tbl_WPT_IncrementDetail tbl_WPT_IncrementDetail, string operation = "", string userName = "", int? MasterID = 0, int? DesignationID = 0, int? DepartmentID = 0, DateTime? JoiningDate = null)
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_IncrementDetail.CreatedBy = userName;
                tbl_WPT_IncrementDetail.CreatedDate = DateTime.Now;
                //db.tbl_WPT_IncrementDetails.Add(tbl_WPT_IncrementDetail);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";

            }
            else if (operation == "Save New Bulk")
            {
                tbl_WPT_IncrementDetail.CreatedBy = userName;
                tbl_WPT_IncrementDetail.CreatedDate = DateTime.Now;
                //db.tbl_WPT_IncrementDetails.Add(tbl_WPT_IncrementDetail);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Bulk Insert";

                if (JoiningDate == null)
                    JoiningDate = DateTime.Now;
            }
            else if (operation == "Save Update")
            {

                tbl_WPT_IncrementDetail.ModifiedBy = userName;
                tbl_WPT_IncrementDetail.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_IncrementDetail).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";

            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_IncrementDetails.Remove(db.tbl_WPT_IncrementDetails.Find(tbl_WPT_IncrementDetail.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_IncrementDetail] 
                       @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                      ,@ID={3},@FK_tbl_WPT_IncrementMaster_ID={4},@FK_tbl_WPT_Employee_ID={5}
                      ,@EffectiveDate={6},@IncrementValue={7},@FK_tbl_WPT_IncrementBy_ID={8}
                      ,@Arrear={9},@FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrear={10}
                      ,@Remarks={11},@FK_tbl_WPT_EmployeeSalaryStructure_ID_Last={12}
                      ,@CreatedBy={13},@CreatedDate={14},@ModifiedBy={15},@ModifiedDate={16}
                      ,@DesignationID={17},@DepartmentID={18},@JoiningDate={19}",
              CRUD_Type, CRUD_Msg, CRUD_ID,
              tbl_WPT_IncrementDetail.ID, tbl_WPT_IncrementDetail.FK_tbl_WPT_IncrementMaster_ID, tbl_WPT_IncrementDetail.FK_tbl_WPT_Employee_ID,
              tbl_WPT_IncrementDetail.EffectiveDate, tbl_WPT_IncrementDetail.IncrementValue, tbl_WPT_IncrementDetail.FK_tbl_WPT_IncrementBy_ID,
              tbl_WPT_IncrementDetail.Arrear, tbl_WPT_IncrementDetail.FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrear,
              tbl_WPT_IncrementDetail.Remarks, tbl_WPT_IncrementDetail.FK_tbl_WPT_EmployeeSalaryStructure_ID_Last,
              tbl_WPT_IncrementDetail.CreatedBy, tbl_WPT_IncrementDetail.CreatedDate, tbl_WPT_IncrementDetail.ModifiedBy, tbl_WPT_IncrementDetail.ModifiedDate,
              DesignationID, DepartmentID, JoiningDate);

            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<string> IncrementDetailEmployeeUploadExcelFile(List<IncrementExcelData> IncrementExcelDataList, string operation, string userName, int MasterID = 0)
        {
            if (operation == "Save New" && MasterID > 0)
            {
                SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
                SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
                SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };
                CRUD_Type.Value = "Insert";


                var empObject = (tbl_WPT_Employee)null;
                List<tbl_WPT_IncrementDetail> IncrementDetails = new List<tbl_WPT_IncrementDetail>();
                foreach (var item in IncrementExcelDataList)
                {
                    empObject = await db.tbl_WPT_Employees.Where(w => w.ATEnrollmentNo_Default == item.ATNo).OrderByDescending(o => o.JoiningDate).FirstOrDefaultAsync();

                    if (empObject != null)
                    {
                        if (db.tbl_WPT_IncrementDetails.Where(w => w.FK_tbl_WPT_IncrementMaster_ID == MasterID && w.FK_tbl_WPT_Employee_ID == empObject.ID).Count() == 0)
                        {
                            CRUD_Msg.Value = "Some thing went wrong while moving excel data to DB";

                            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_IncrementDetail] 
                                       @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                                      ,@ID={3},@FK_tbl_WPT_IncrementMaster_ID={4},@FK_tbl_WPT_Employee_ID={5}
                                      ,@EffectiveDate={6},@IncrementValue={7},@FK_tbl_WPT_IncrementBy_ID={8}
                                      ,@Arrear={9},@FK_tbl_WPT_CalendarYear_Months_ID_ApplyArrear={10}
                                      ,@Remarks={11},@FK_tbl_WPT_EmployeeSalaryStructure_ID_Last={12}
                                      ,@CreatedBy={13},@CreatedDate={14},@ModifiedBy={15},@ModifiedDate={16}
                                      ,@DesignationID={17},@DepartmentID={18},@JoiningDate={19}",
                                      CRUD_Type, CRUD_Msg, CRUD_ID,
                                      0, MasterID, empObject.ID,
                                      item.EffectiveFrom, item.IncAmount, item.IncByCode,
                                      item.Arrear, item.ArrearMonthCode,
                                      "From Excel", null,
                                      userName, DateTime.Now, null, null,
                                      0, 0, null);

                            if ((string)CRUD_Msg.Value != "Successful")
                                return (string)CRUD_Msg.Value;                            
                        }
                    }

                }       

            }
            else
            {
                return "Wrong Operation";
            }



            return "OK";
        }

        #endregion

        #region Report  

        public List<ReportCallingModel> GetRLIncrement()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                { 
                    ReportType= EnumReportType.OnlyID,
                    ReportName ="Increment Detail",
                    GroupBy = new List<string>(){"Department", "Designation" },
                    OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                    SeekBy = null
                }
            };
        }

        public async Task<byte[]> GetPDFFileAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Increment Detail")
            {
                return await Task.Run(() => IncrementDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }
        private async Task<byte[]> IncrementDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------10 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.08), // S No
                        (float)(PageSize.A4.GetWidth()*0.08), //AT
                        (float)(PageSize.A4.GetWidth()*0.15), // Name
                        (float)(PageSize.A4.GetWidth()*0.12), // Designation
                        (float)(PageSize.A4.GetWidth()*0.12), // Designation
                        (float)(PageSize.A4.GetWidth()*0.10), // Last Wage
                        (float)(PageSize.A4.GetWidth()*0.08), // increment value
                        (float)(PageSize.A4.GetWidth()*0.10), // increment by
                        (float)(PageSize.A4.GetWidth()*0.07), // effective
                        (float)(PageSize.A4.GetWidth()*0.10) // New Wage 
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalNew = 0, GrandTotalLast = 0, GroupTotalNew = 0, GroupTotalLast = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_IncrementDetail] @ReportName,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Last Wage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Inc")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("By")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("New Wage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalLast) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalNew - GroupTotalLast) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalNew) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            }
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Last Wage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Inc")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("By")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("New Wage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotalNew = 0;
                            GroupTotalLast = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["BasicWageLast"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", Convert.ToDouble(sqlReader["BasicWageNew"]) - Convert.ToDouble(sqlReader["BasicWageLast"])))).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["IncrementValue"].ToString() + " " + sqlReader["IncrementBy"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveDate"]).ToString("MMM-yy"))).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["BasicWageNew"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalNew += Convert.ToDouble(sqlReader["BasicWageNew"]);
                        GroupTotalLast += Convert.ToDouble(sqlReader["BasicWageLast"]);

                        GrandTotalNew += Convert.ToDouble(sqlReader["BasicWageNew"]);
                        GrandTotalLast += Convert.ToDouble(sqlReader["BasicWageLast"]);

                    }
                }

                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalLast) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalNew - GroupTotalLast) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalNew) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                //----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 10).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));

                pdftableMain.AddCell(new Cell(1, 5).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalLast) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalNew - GrandTotalLast) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalNew) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }

        #endregion

    }
    public class PayRunRepository : IPayRun
    {

        private readonly OreasDbContext db;
        public PayRunRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        #region Calendar
        public object GetWCLPayRunCalendar()
        {
            return new[]
            {
                new { n = "by Year", v = "byYear" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunCalendar(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();
            pageddata.PageSize = 12;


            int NoOfRecords = await db.tbl_WPT_CalendarYear_Monthss
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byYear" && w.tbl_WPT_CalendarYear.CalendarYear.ToString().Contains(FilterValueByText)
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYear_Monthss
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byYear" && w.tbl_WPT_CalendarYear.CalendarYear.ToString().Contains(FilterValueByText)
                                      )
                                  .OrderByDescending(i => i.tbl_WPT_CalendarYear.CalendarYear).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.IsClosed,
                          ToDoCount = o.tbl_WPT_PayRunToDos.Count(),
                          ExemptionCount = o.tbl_WPT_PayRunExemptions.Count(),
                          Holidays = o.tbl_WPT_CalendarYear_Months_Holidayss.Count(),
                          Rosters = o.tbl_WPT_ShiftRosterMasters.Count(),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          PendingLeaves = o.tbl_WPT_LeaveRequisitions.Count(c => c.FK_tbl_WPT_ActionList_ID_Final == 3),
                          TotalLeaves = o.tbl_WPT_LeaveRequisitions.Count(),
                          CalendarMonthStartDate = o.MonthStart.ToString("dd-MMM-yyyy"),
                          CalendarMonthEndDate = o.MonthEnd.ToString("dd-MMM-yyyy"),
                          MonthStartYear = o.MonthStart.ToString("yyyy"),
                          MonthEndYear = o.MonthEnd.ToString("yyyy"),
                          MonthStartMonth = o.MonthStart.ToString("MMMM"),
                          MonthEndMonth = o.MonthEnd.ToString("MMMM"),
                          MonthStartDay = o.MonthStart.ToString("dd"),
                          MonthEndDay = o.MonthEnd.ToString("dd"),
                          CalendarYearID = o.FK_tbl_WPT_CalendarYear_ID
                      };




            pageddata.Data = qry;

            pageddata.otherdata = new { Year= db.tbl_WPT_CalendarYears.Where(w=> w.ID == qry.FirstOrDefault().CalendarYearID).FirstOrDefault().CalendarYear };
           

            return pageddata;
        }
        public async Task<string> PostPayRunCalendarOpenClose(int MonthID, bool MonthIsClosed, string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed to execute Operation" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            tbl_WPT_CalendarYear_Months tbl_WPT_CalendarYear_Months = db.tbl_WPT_CalendarYear_Monthss.Where(w => w.ID == MonthID).FirstOrDefault();

            if (tbl_WPT_CalendarYear_Months != null)
            {
                tbl_WPT_CalendarYear_Months.ModifiedBy = userName;
                tbl_WPT_CalendarYear_Months.ModifiedDate = DateTime.Now;
                tbl_WPT_CalendarYear_Months.IsClosed = MonthIsClosed;
                //db.Entry(tbl_WPT_CalendarYear_Months).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "MonthOpenClose";

                await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_CalendarYear_Months] 
                       @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                      ,@ID={3},@FK_tbl_WPT_CalendarYear_ID={4}
                      ,@MonthStart={5},@MonthEnd={6},@IsClosed={7}
                      ,@CreatedBy={8},@CreatedDate={9},@ModifiedBy={10},@ModifiedDate={11}",
                 CRUD_Type, CRUD_Msg, CRUD_ID,
                 tbl_WPT_CalendarYear_Months.ID, tbl_WPT_CalendarYear_Months.FK_tbl_WPT_CalendarYear_ID,
                 tbl_WPT_CalendarYear_Months.MonthStart, tbl_WPT_CalendarYear_Months.MonthEnd, tbl_WPT_CalendarYear_Months.IsClosed,
                 tbl_WPT_CalendarYear_Months.CreatedBy, tbl_WPT_CalendarYear_Months.CreatedDate, tbl_WPT_CalendarYear_Months.ModifiedBy, tbl_WPT_CalendarYear_Months.ModifiedDate);


                if ((string)CRUD_Msg.Value == "Successful")
                    return "OK";
                else
                    return (string)CRUD_Msg.Value;

            }
            else
            {
                return "Record Not Found";
            }  
        }
        #endregion

        #region PayRun TO Do

        public object GetWCLPayRunToDo()
        {
            return new[]
            {
                new { n = "by To-Do", v = "byToDo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunToDo(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunToDos
                                               .Where(w=> w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byToDo" && w.ToDo.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunToDos
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byToDo" && w.ToDo.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.ToDo,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunToDo(tbl_WPT_PayRunToDo tbl_WPT_PayRunToDo, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_PayRunToDo.CreatedBy = userName;
                tbl_WPT_PayRunToDo.CreatedDate = DateTime.Now;
                db.tbl_WPT_PayRunToDos.Add(tbl_WPT_PayRunToDo);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PayRunToDo.ModifiedBy = userName;
                tbl_WPT_PayRunToDo.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PayRunToDo).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_PayRunToDos.Remove(db.tbl_WPT_PayRunToDos.Find(tbl_WPT_PayRunToDo.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunToDo(int id)
        {
            var qry = from o in await db.tbl_WPT_PayRunToDos.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.ToDo,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion        

        #region PayRun Exemption

        public object GetWCLPayRunExempt()
        {
            return new[]
            {
                new { n = "by Deductible Type", v = "byDeductibleType" }, new { n = "by Loan Type", v = "byLoanType" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunExempt(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunExemptions
                                               .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byDeductibleType" && w.tbl_WPT_DeductibleType.DeductibleName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byLoanType" && w.tbl_WPT_LoanType.LoanType.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunExemptions
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byDeductibleType" && w.tbl_WPT_DeductibleType.DeductibleName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byLoanType" && w.tbl_WPT_LoanType.LoanType.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.ApplyToAll,
                          o.ExemptionPercentage,
                          o.FK_tbl_WPT_DeductibleType_ID,
                          FK_tbl_WPT_DeductibleType_IDName = o.tbl_WPT_DeductibleType?.DeductibleName ?? "",
                          o.FK_tbl_WPT_LoanType_ID,
                          FK_tbl_WPT_LoanType_IDName = o.tbl_WPT_LoanType?.LoanType ?? "",
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfEmp = o.tbl_WPT_PayRunExemption_Emps.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunExempt(tbl_WPT_PayRunExemption tbl_WPT_PayRunExemption, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_PayRunExemption.CreatedBy = userName;
                tbl_WPT_PayRunExemption.CreatedDate = DateTime.Now;
                db.tbl_WPT_PayRunExemptions.Add(tbl_WPT_PayRunExemption);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PayRunExemption.ModifiedBy = userName;
                tbl_WPT_PayRunExemption.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PayRunExemption).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_PayRunExemptions.Remove(db.tbl_WPT_PayRunExemptions.Find(tbl_WPT_PayRunExemption.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunExempt(int id)
        {
            var qry = from o in await db.tbl_WPT_PayRunExemptions.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.ApplyToAll,
                          o.ExemptionPercentage,
                          o.FK_tbl_WPT_DeductibleType_ID,
                          FK_tbl_WPT_DeductibleType_IDName = o.tbl_WPT_DeductibleType?.DeductibleName ?? "",
                          o.FK_tbl_WPT_LoanType_ID,
                          FK_tbl_WPT_LoanType_IDName = o.tbl_WPT_LoanType?.LoanType ?? "",
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion        

        #region PayRun Exemption Employee

        public object GetWCLPayRunExemptEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunExemptEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunExemption_Emps
                                               .Where(w => w.FK_tbl_WPT_PayRunExemption_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));

            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunExemption_Emps
                                  .Where(w => w.FK_tbl_WPT_PayRunExemption_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunExemption_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [AT No:" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunExemptEmployee(tbl_WPT_PayRunExemption_Emp tbl_WPT_PayRunExemption_Emp, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_PayRunExemption_Emp.CreatedBy = userName;
                tbl_WPT_PayRunExemption_Emp.CreatedDate = DateTime.Now;
                db.tbl_WPT_PayRunExemption_Emps.Add(tbl_WPT_PayRunExemption_Emp);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PayRunExemption_Emp.ModifiedBy = userName;
                tbl_WPT_PayRunExemption_Emp.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PayRunExemption_Emp).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_PayRunExemption_Emps.Remove(db.tbl_WPT_PayRunExemption_Emps.Find(tbl_WPT_PayRunExemption_Emp.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunExemptEmployee(int id)
        {

            var qry = from o in await db.tbl_WPT_PayRunExemption_Emps.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunExemption_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [AT No:" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        public async Task<string> PostPayRunProcessMasterDetailEmployee(int id, bool _PayRun, string userName)
        {
            SqlParameter CRUD_Msg = new SqlParameter("CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter PayRunDetail_Emp_ID = new SqlParameter("PayRunDetail_Emp_ID", SqlDbType.Int) { Value = id };
            SqlParameter PayRun = new SqlParameter("PayRun", SqlDbType.Bit) { Value = _PayRun };
            SqlParameter UserName = new SqlParameter("UserName", SqlDbType.VarChar) { Size = 50, Value = userName };
            SqlParameter EntryDate = new SqlParameter("EntryDate", SqlDbType.DateTime) { Value = DateTime.Now };

            await db.Database.ExecuteSqlRawAsync(
            "EXECUTE [dbo].[USP_WPT_PayRunIndividual] @CRUD_Msg={0} OUTPUT,@PayRunDetail_Emp_ID={1},@PayRun={2},@UserName={3},@EntryDate={4}",
            CRUD_Msg, PayRunDetail_Emp_ID, PayRun, UserName, EntryDate);

            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }        

        #endregion        

        #region PayRun Holiday
        public async Task<PagedData<object>> LoadPayRunHoliday(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();
            
           

            int NoOfRecords = await db.tbl_WPT_CalendarYear_Months_Holidayss
                                               .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                               .CountAsync();
            pageddata.CurrentPage = 1;
            pageddata.TotalPages = 1;

            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_CalendarYear_Months_Holidayss
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                  .OrderByDescending(i => i.HolidayDate).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.FK_tbl_WPT_Holiday_ID,
                          FK_tbl_WPT_Holiday_IDName = o.tbl_WPT_Holiday.HolidayName,
                          HolidayDate = o.HolidayDate.ToString("yyyy-MM-dd"),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunHoliday(tbl_WPT_CalendarYear_Months_Holidays tbl_WPT_CalendarYear_Months_Holidays, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_CalendarYear_Months_Holidays.CreatedBy = userName;
                tbl_WPT_CalendarYear_Months_Holidays.CreatedDate = DateTime.Now;
                db.tbl_WPT_CalendarYear_Months_Holidayss.Add(tbl_WPT_CalendarYear_Months_Holidays);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_CalendarYear_Months_Holidays.ModifiedBy = userName;
                tbl_WPT_CalendarYear_Months_Holidays.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_CalendarYear_Months_Holidays).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_CalendarYear_Months_Holidayss.Remove(db.tbl_WPT_CalendarYear_Months_Holidayss.Find(tbl_WPT_CalendarYear_Months_Holidays.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunHoliday(int id)
        {
            var qry = from o in await db.tbl_WPT_CalendarYear_Months_Holidayss.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.FK_tbl_WPT_Holiday_ID,
                          FK_tbl_WPT_Holiday_IDName = o.tbl_WPT_Holiday.HolidayName,
                          HolidayDate = o.HolidayDate.ToString("yyyy-MM-dd"),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }
        #endregion        

        #region Payrun Leave Requisition
        //Used LeaveRequisition interface
        #endregion

        #region PayRun Roster Master

        public object GetWCLPayRunRosterMaster()
        {
            return new[]
            {
                new { n = "by Roster Name", v = "byRosterName" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunRosterMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_ShiftRosterMasters
                                               .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byRosterName" && w.RosterName.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ShiftRosterMasters
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byRosterName" && w.RosterName.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.RosterName,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          NoOfEmployees = o.tbl_WPT_ShiftRosterDetail_Employees.Count()
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunRosterMaster(tbl_WPT_ShiftRosterMaster tbl_WPT_ShiftRosterMaster, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_ShiftRosterMaster.CreatedBy = userName;
                tbl_WPT_ShiftRosterMaster.CreatedDate = DateTime.Now;
                db.tbl_WPT_ShiftRosterMasters.Add(tbl_WPT_ShiftRosterMaster);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_ShiftRosterMaster.ModifiedBy = userName;
                tbl_WPT_ShiftRosterMaster.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_ShiftRosterMaster).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_ShiftRosterMasters.Remove(db.tbl_WPT_ShiftRosterMasters.Find(tbl_WPT_ShiftRosterMaster.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunRosterMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_ShiftRosterMasters.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          o.RosterName,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion        

        #region PayRun Roster Detail Shift
        public async Task<PagedData<object>> LoadPayRunRosterDetailShift(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_ShiftRosterDetails
                                               .Where(w => w.FK_tbl_WPT_ShiftRosterMaster_ID == MasterID)
                                               .CountAsync();
            pageddata.CurrentPage = 1;
            pageddata.TotalPages = 1;

            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ShiftRosterDetails
                                  .Where(w => w.FK_tbl_WPT_ShiftRosterMaster_ID == MasterID)
                                  .OrderByDescending(i => i.RosterDate).ToListAsync()

                      select new
                      {
                          RosterID = o.ID,
                          o.FK_tbl_WPT_ShiftRosterMaster_ID,
                          RosterDate = o.RosterDate.ToString("yyyy-MM-dd"),
                          o.FK_tbl_WPT_Shift_ID,
                          FK_tbl_WPT_Shift_IDName = o.FK_tbl_WPT_Shift_ID.HasValue ? o.tbl_WPT_Shift.Prefix : "",
                          o.FK_tbl_WPT_Holiday_ID,
                          FK_tbl_WPT_Holiday_IDName = o.FK_tbl_WPT_Holiday_ID.HasValue ? o.tbl_WPT_Holiday.HolidayName : "",
                          o.ApplyDefaultHoliday,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

         

            var defaultholidays = from o in await db.tbl_WPT_CalendarYear_Months_Holidayss
                                  .Where(w=> w.tbl_WPT_CalendarYear_Months.tbl_WPT_ShiftRosterMasters.Any(a=> a.ID == MasterID))
                                  .ToListAsync()
                                  select new
                                  {
                                      HolidayID = o.ID,
                                      o.tbl_WPT_Holiday.HolidayName,
                                      HolidayDate = o.HolidayDate.ToString("yyyy-MM-dd")
                                  };
                


            pageddata.Data = qry;
            pageddata.otherdata = defaultholidays;

            return pageddata;
        }
        public async Task<string> PostPayRunRosterDetailShift(tbl_WPT_ShiftRosterDetail tbl_WPT_ShiftRosterDetail, string operation = "", string userName = "")
        {
            if (operation == "Save New")
            {
                tbl_WPT_ShiftRosterDetail.CreatedBy = userName;
                tbl_WPT_ShiftRosterDetail.CreatedDate = DateTime.Now;
                db.tbl_WPT_ShiftRosterDetails.Add(tbl_WPT_ShiftRosterDetail);
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_ShiftRosterDetail.ModifiedBy = userName;
                tbl_WPT_ShiftRosterDetail.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_ShiftRosterDetail).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_ShiftRosterDetails.Remove(db.tbl_WPT_ShiftRosterDetails.Find(tbl_WPT_ShiftRosterDetail.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunRosterDetailShift(int id)
        {
            var qry = from o in await db.tbl_WPT_ShiftRosterDetails.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ShiftRosterMaster_ID,
                          RosterDate = o.RosterDate.ToString("yyyy-MM-dd"),
                          o.FK_tbl_WPT_Shift_ID,
                          FK_tbl_WPT_Shift_IDName = o.FK_tbl_WPT_Shift_ID.HasValue ? o.tbl_WPT_Shift.Prefix : "",
                          o.FK_tbl_WPT_Holiday_ID,
                          FK_tbl_WPT_Holiday_IDName = o.FK_tbl_WPT_Holiday_ID.HasValue ? o.tbl_WPT_Holiday.HolidayName : "",
                          o.ApplyDefaultHoliday,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion        

        #region PayRun Roster Detail Employee

        public object GetWCLPayRunRosterDetailEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunRosterDetailEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_ShiftRosterDetail_Employees
                                               .Where(w => w.FK_tbl_WPT_ShiftRosterMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_ShiftRosterDetail_Employees
                                  .Where(w => w.FK_tbl_WPT_ShiftRosterMaster_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ShiftRosterMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [AT:" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunRosterDetailEmployee(tbl_WPT_ShiftRosterDetail_Employee tbl_WPT_ShiftRosterDetail_Employee, string operation = "", string userName = "", int? MasterID = 0, int? DesignationID = 0, int? DepartmentID = 0, DateTime? JoiningDate = null)
        {

            if (operation == "Save New")
            {
                var MonthID = db.tbl_WPT_ShiftRosterMasters.Where(w => w.ID == tbl_WPT_ShiftRosterDetail_Employee.FK_tbl_WPT_ShiftRosterMaster_ID).FirstOrDefault().FK_tbl_WPT_CalendarYear_Months_ID;

                if (db.tbl_WPT_ShiftRosterDetail_Employees.Any(a => a.tbl_WPT_ShiftRosterMaster.FK_tbl_WPT_CalendarYear_Months_ID == MonthID && a.FK_tbl_WPT_Employee_ID == tbl_WPT_ShiftRosterDetail_Employee.FK_tbl_WPT_Employee_ID))
                {
                    return "Employee Already Exist In Roster of working Month";
                
                }

                tbl_WPT_ShiftRosterDetail_Employee.CreatedBy = userName;
                tbl_WPT_ShiftRosterDetail_Employee.CreatedDate = DateTime.Now;
                db.tbl_WPT_ShiftRosterDetail_Employees.Add(tbl_WPT_ShiftRosterDetail_Employee);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save New Bulk")
            {
                tbl_WPT_ShiftRosterDetail_Employee.CreatedBy = userName;
                tbl_WPT_ShiftRosterDetail_Employee.CreatedDate = DateTime.Now;
                //db.tbl_WPT_ShiftRosterDetail_Employees.Add(tbl_WPT_ShiftRosterDetail_Employee);
                //await db.SaveChangesAsync();

                if (JoiningDate == null)
                    JoiningDate = DateTime.Now;

                SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };

                await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[USP_WPT_AddBulkEmployeesInRoster] 
                   @CRUD_Msg={0} OUTPUT,@MasterID={1},@DesignationID={2},@DepartmentID={3},
                   @JoiningDate={4},@User={5}",
                    CRUD_Msg, MasterID, DesignationID, DepartmentID,
                    JoiningDate, userName);


                if ((string)CRUD_Msg.Value == "Successful")
                    return "OK";
                else
                    return (string)CRUD_Msg.Value;

            }
            else if (operation == "Save Update")
            {
                var MonthID = db.tbl_WPT_ShiftRosterMasters.Where(w => w.ID == tbl_WPT_ShiftRosterDetail_Employee.FK_tbl_WPT_ShiftRosterMaster_ID).FirstOrDefault().FK_tbl_WPT_CalendarYear_Months_ID;

                if (db.tbl_WPT_ShiftRosterDetail_Employees.Any(a => a.tbl_WPT_ShiftRosterMaster.FK_tbl_WPT_CalendarYear_Months_ID == MonthID && a.FK_tbl_WPT_Employee_ID == tbl_WPT_ShiftRosterDetail_Employee.FK_tbl_WPT_Employee_ID))
                {
                    return "Employee Already Exist In Roster of working Month";

                }
                tbl_WPT_ShiftRosterDetail_Employee.ModifiedBy = userName;
                tbl_WPT_ShiftRosterDetail_Employee.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_ShiftRosterDetail_Employee).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_ShiftRosterDetail_Employees.Remove(db.tbl_WPT_ShiftRosterDetail_Employees.Find(tbl_WPT_ShiftRosterDetail_Employee.ID));
                await db.SaveChangesAsync();
            }
            return "OK";
        }
        public async Task<object> GetPayRunRosterDetailEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_ShiftRosterDetail_Employees.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_ShiftRosterMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName + " [AT:" + o.tbl_WPT_Employee.ATEnrollmentNo_Default + "]",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion

        //--------------------------------------------------------------------------------------------------------//

        #region PayRun Master

        public async Task<PagedData<object>> LoadPayRunMaster(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunMasters
                                               .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunMasters
                                  .Where(w => w.FK_tbl_WPT_CalendarYear_Months_ID == MasterID)
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          StartDate = o.StartDate.ToString("dd-MMM-yyyy"),
                          EndDate = o.EndDate.ToString("dd-MMM-yyyy"),
                          NoOfActiveEmployees = db.tbl_WPT_Employees?.Where(w => w.JoiningDate <= o.tbl_WPT_CalendarYear_Months.MonthEnd && (w.InactiveDate.HasValue ? w.InactiveDate.Value >= o.tbl_WPT_CalendarYear_Months.MonthStart : true)).Count() ?? 0,
                          NoOfEmployees = o.tbl_WPT_PayRunDetail_Emps?.Count() ?? 0,
                          NoOfZeroATEmp = o.tbl_WPT_PayRunDetail_Emps?.Where(w => w.WD == 0).Count() ?? 0,
                          NoOfZeroWageEmp = o.tbl_WPT_PayRunDetail_Emps?.Where(w => w.Wage == 0).Count() ?? 0,
                          NoOfDefaulterWageEmp = o.tbl_WPT_PayRunDetail_Emps?.Where(w => w.Wage < 0).Count() ?? 0,
                          TotalWage = o.tbl_WPT_PayRunDetail_Emps?.Sum(s => s.Wage) ?? 0,
                          NoOf2LessThenEqualATEmp = o.tbl_WPT_PayRunDetail_Emps?.Where(w => w.tbl_WPT_PayRunDetail_EmpDetail_ATs.Count(c => c.Present) <= 2).Count() ?? 0,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunMaster(tbl_WPT_PayRunMaster tbl_WPT_PayRunMaster, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };

            if (operation == "Save New")
            {
                tbl_WPT_PayRunMaster.CreatedBy = userName;
                tbl_WPT_PayRunMaster.CreatedDate = DateTime.Now;
                //db.tbl_WPT_PayRunMasters.Add(tbl_WPT_PayRunMaster);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PayRunMaster.ModifiedBy = userName;
                tbl_WPT_PayRunMaster.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_PayRunMaster).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_PayRunMasters.Remove(db.tbl_WPT_PayRunMasters.Find(tbl_WPT_PayRunMaster.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";

            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_PayRunMaster] 
                   @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                  ,@ID={3},@FK_tbl_WPT_CalendarYear_Months_ID={4},@StartDate={5},@EndDate={6}
                  ,@CreatedBy={7},@CreatedDate={8},@ModifiedBy={9},@ModifiedDate={10}",
              CRUD_Type, CRUD_Msg, CRUD_ID,
              tbl_WPT_PayRunMaster.ID, tbl_WPT_PayRunMaster.FK_tbl_WPT_CalendarYear_Months_ID, tbl_WPT_PayRunMaster.StartDate, tbl_WPT_PayRunMaster.EndDate,
              tbl_WPT_PayRunMaster.CreatedBy, tbl_WPT_PayRunMaster.CreatedDate, tbl_WPT_PayRunMaster.ModifiedBy, tbl_WPT_PayRunMaster.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<object> GetPayRunMaster(int id)
        {
            var qry = from o in await db.tbl_WPT_PayRunMasters.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_CalendarYear_Months_ID,
                          StartDate = o.StartDate.ToString("dd-MMM-yyyy"),
                          EndDate = o.EndDate.ToString("dd-MMM-yyyy"),
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion        

        #region PayRun PayRun Master Detail Employee

        public object GetWCLPayRunMasterDetailEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" }, new { n = "by ATNo", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunMasterDetailEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunDetail_Emps
                                               .Where(w => w.FK_tbl_WPT_PayRunMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                       ||
                                                       FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower()
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunDetail_Emps
                                  .Where(w => w.FK_tbl_WPT_PayRunMaster_ID == MasterID)
                                  .Where(w =>
                                        string.IsNullOrEmpty(FilterValueByText)
                                        ||
                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                        ||
                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower() == FilterValueByText.ToLower()
                                      )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.tbl_WPT_Employee.Email,
                          o.tbl_WPT_Employee.CellPhoneNo,
                          o.WD_AT,
                          o.WD_Manual,
                          o.WD,
                          o.OT_AT,
                          o.OT_Manual,
                          o.OT,
                          o.Wage,
                          o.WagePrimary,
                          o.FK_tbl_WPT_TransactionMode_ID_Primary,
                          FK_tbl_WPT_TransactionMode_ID_PrimaryName = o.FK_tbl_WPT_TransactionMode_ID_Primary > 0 ? o.tbl_WPT_TransactionMode_Primary.TransactionMode : "",
                          o.WageSecondary,
                          o.FK_tbl_WPT_TransactionMode_ID_Secondary,
                          FK_tbl_WPT_TransactionMode_ID_SecondaryName = o.FK_tbl_WPT_TransactionMode_ID_Secondary > 0 ? o.tbl_WPT_TransactionMode_Secondary.TransactionMode : "",
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary,
                          FK_tbl_WPT_PayRunDetail_Payment_ID_PrimaryName = o.tbl_WPT_PayRunDetail_Payment_Primary?.InstrumentNo ?? "",
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary,
                          FK_tbl_WPT_PayRunDetail_Payment_ID_SecondaryName = o.tbl_WPT_PayRunDetail_Payment_Secondary?.InstrumentNo ?? "",
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID,
                          FK_tbl_WPT_EmployeeSalaryStructure_IDName = o.tbl_WPT_EmployeeSalaryStructure?.tbl_WPT_TransactionMode.TransactionMode ?? "",
                          o.FK_tbl_WPT_EmployeeBankDetail_ID,
                          FK_tbl_WPT_EmployeeBankDetail_IDName = o.FK_tbl_WPT_EmployeeBankDetail_ID > 0 ? o.tbl_WPT_EmployeeBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_EmployeeBankDetail.BankAccountNo + "]" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          IsWagedGenerated = o.tbl_WPT_PayRunDetail_EmpDetail_Wages.Any(a=> a.ID > 0)
                      };




            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunMasterDetailEmployee(tbl_WPT_PayRunDetail_Emp tbl_WPT_PayRunDetail_Emp, string operation = "", string userName = "")
        {
            SqlParameter CRUD_Type = new SqlParameter("@CRUD_Type", SqlDbType.VarChar) { Direction = ParameterDirection.Input, Size = 50 };
            SqlParameter CRUD_Msg = new SqlParameter("@CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };
            SqlParameter CRUD_ID = new SqlParameter("@CRUD_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };
        
            if (operation == "Save New")
            {                
                tbl_WPT_PayRunDetail_Emp.CreatedBy = userName;
                tbl_WPT_PayRunDetail_Emp.CreatedDate = DateTime.Now;
                //db.tbl_WPT_PayRunDetail_Emps.Add(tbl_WPT_PayRunDetail_Emp);
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Insert";
            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PayRunDetail_Emp.ModifiedBy = userName;
                tbl_WPT_PayRunDetail_Emp.ModifiedDate = DateTime.Now;
                //db.Entry(tbl_WPT_PayRunDetail_Emp).State = EntityState.Modified;
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Update";
            }
            else if (operation == "Save Delete")
            {
                //db.tbl_WPT_PayRunDetail_Emps.Remove(db.tbl_WPT_PayRunDetail_Emps.Find(tbl_WPT_PayRunDetail_Emp.ID));
                //await db.SaveChangesAsync();
                CRUD_Type.Value = "Delete";
            }

            await db.Database.ExecuteSqlRawAsync(@"EXECUTE [dbo].[OP_WPT_PayRunDetail_Emp] 
                   @CRUD_Type={0},@CRUD_Msg={1} OUTPUT,@CRUD_ID={2} OUTPUT
                  ,@ID={3},@FK_tbl_WPT_PayRunMaster_ID={4},@FK_tbl_WPT_Employee_ID={5},@WD_AT={6},@WD_Manual={7}
                  ,@WD={8},@OT_AT={9},@OT_Manual={10},@OT={11},@Wage={12},@WagePrimary={13}
                  ,@FK_tbl_WPT_TransactionMode_ID_Primary={14},@WageSecondary={15},@FK_tbl_WPT_TransactionMode_ID_Secondary={16}
                  ,@FK_tbl_WPT_PayRunDetail_Payment_ID_Primary={17},@FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary={18}
                  ,@FK_tbl_WPT_EmployeeSalaryStructure_ID={19},@FK_tbl_WPT_EmployeeBankDetail_ID={20}
                  ,@CreatedBy={21},@CreatedDate={22},@ModifiedBy={23},@ModifiedDate={24}",
                CRUD_Type, CRUD_Msg, CRUD_ID,
                tbl_WPT_PayRunDetail_Emp.ID, tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_PayRunMaster_ID, tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_Employee_ID,
                tbl_WPT_PayRunDetail_Emp.WD_AT, tbl_WPT_PayRunDetail_Emp.WD_Manual, tbl_WPT_PayRunDetail_Emp.WD, tbl_WPT_PayRunDetail_Emp.OT_AT,
                tbl_WPT_PayRunDetail_Emp.OT_Manual, tbl_WPT_PayRunDetail_Emp.OT, tbl_WPT_PayRunDetail_Emp.Wage, tbl_WPT_PayRunDetail_Emp.WagePrimary,
                tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_TransactionMode_ID_Primary, tbl_WPT_PayRunDetail_Emp.WageSecondary, tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_TransactionMode_ID_Secondary,
                tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary, tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary,
                tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_EmployeeSalaryStructure_ID, tbl_WPT_PayRunDetail_Emp.FK_tbl_WPT_EmployeeBankDetail_ID,
                tbl_WPT_PayRunDetail_Emp.CreatedBy, tbl_WPT_PayRunDetail_Emp.CreatedDate, tbl_WPT_PayRunDetail_Emp.ModifiedBy, tbl_WPT_PayRunDetail_Emp.ModifiedDate);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;
        }
        public async Task<object> GetPayRunMasterDetailEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_PayRunDetail_Emps.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunMaster_ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.WD_AT,
                          o.WD_Manual,
                          o.WD,
                          o.OT_AT,
                          o.OT_Manual,
                          o.OT,
                          o.Wage,
                          o.WagePrimary,
                          o.FK_tbl_WPT_TransactionMode_ID_Primary,
                          FK_tbl_WPT_TransactionMode_ID_PrimaryName = o.FK_tbl_WPT_TransactionMode_ID_Primary > 0 ? o.tbl_WPT_TransactionMode_Primary.TransactionMode : "",
                          o.WageSecondary,
                          o.FK_tbl_WPT_TransactionMode_ID_Secondary,
                          FK_tbl_WPT_TransactionMode_ID_SecondaryName = o.FK_tbl_WPT_TransactionMode_ID_Secondary > 0 ? o.tbl_WPT_TransactionMode_Secondary.TransactionMode : "",
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary,
                          FK_tbl_WPT_PayRunDetail_Payment_ID_PrimaryName = o.tbl_WPT_PayRunDetail_Payment_Primary?.InstrumentNo ?? "",
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary,
                          FK_tbl_WPT_PayRunDetail_Payment_ID_SecondaryName = o.tbl_WPT_PayRunDetail_Payment_Secondary?.InstrumentNo ?? "",
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID,
                          FK_tbl_WPT_EmployeeSalaryStructure_IDName = o.tbl_WPT_EmployeeSalaryStructure?.tbl_WPT_TransactionMode.TransactionMode ?? "",
                          o.FK_tbl_WPT_EmployeeBankDetail_ID,
                          FK_tbl_WPT_EmployeeBankDetail_IDName = o.FK_tbl_WPT_EmployeeBankDetail_ID > 0 ? o.tbl_WPT_EmployeeBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_EmployeeBankDetail.BankAccountNo + "]" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        public async Task<List<int>> GetPayRunIDForBulk(int MasterID, string listfor)
        {
            if (listfor == "Employees Accumulating")
            {
                var payrunobj = db.tbl_WPT_PayRunMasters.Where(w => w.ID == MasterID).FirstOrDefault();

                var emplist = await db.tbl_WPT_Employees
                                  .Where(w =>
                                                w.JoiningDate <= payrunobj.EndDate
                                                &&
                                                (w.InactiveDate.HasValue ? (w.InactiveDate.Value >= payrunobj.StartDate || w.IsPensionActive) : true)
                                                &&
                                                w.tbl_WPT_PayRunDetail_Emps.Count(c => c.FK_tbl_WPT_PayRunMaster_ID == MasterID) == 0
                                          ).Select(s => s.ID).ToListAsync();
                return emplist;
            }
            else if (listfor == "Employees PayRun")
            {

                var emplist = await db.tbl_WPT_PayRunDetail_Emps
                                      .Where(w => 
                                                    w.FK_tbl_WPT_PayRunMaster_ID == MasterID 
                                                    && 
                                                    w.Wage == 0
                                             )
                                      .Select(s => s.ID).ToListAsync();

                return emplist;
            }
            else if (listfor == "Employees PayRun Reversal")
            {

                var emplist = await db.tbl_WPT_PayRunDetail_Emps
                                      .Where(w =>
                                                    w.FK_tbl_WPT_PayRunMaster_ID == MasterID
                                                    &&
                                                    w.Wage > 0
                                             )
                                      .Select(s => s.ID).ToListAsync();

                return emplist;
            }
            else
            {
                return null;
            }

        }

        public async Task<List<PayRunDetail_Emp_EmailDetail>> GetPayRunDetail_Emp_EmailDetailList(int MasterID)
        {

            var list = db.tbl_WPT_PayRunDetail_Emps.Where(w=> w.FK_tbl_WPT_PayRunMaster_ID == MasterID && w.tbl_WPT_Employee.Email.Length > 0).Select(x =>
            new PayRunDetail_Emp_EmailDetail
            {
                tbl_WPT_PayRunDetail_Emp_ID = x.ID,
                EmployeeName = x.tbl_WPT_Employee.EmployeeName,
                Email = x.tbl_WPT_Employee.Email,
                MonthYear = x.tbl_WPT_PayRunMaster.EndDate.ToString("MMMM-yyyy")
            }
            );

            return await list.ToListAsync<PayRunDetail_Emp_EmailDetail>();

        }
        #endregion

        #region PayRun Detail Employee AT

        public async Task<PagedData<object>> LoadPayRunMasterDetailEmployeeAT(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunDetail_EmpDetail_ATs
                                               .Where(w => w.FK_tbl_WPT_PayRunDetail_Emp_ID == MasterID)
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.TotalPages = 1;
            pageddata.CurrentPage = 1;

            var qry = from o in await db.tbl_WPT_PayRunDetail_EmpDetail_ATs
                                  .Where(w => w.FK_tbl_WPT_PayRunDetail_Emp_ID == MasterID)
                                  .OrderBy(i => i.InstanceDate).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunDetail_Emp_ID,
                          DayName = o.InstanceDate.DayOfWeek.ToString(),
                          InstanceDate = o.InstanceDate.ToString("dd-MMM-yyyy"),
                          CheckIn = o.CheckIn.HasValue ? o.CheckIn.Value.ToString("dd-MM-yy HH:mm:tt") : "",
                          CheckOut = o.CheckOut.HasValue ? o.CheckOut.Value.ToString("dd-MM-yy HH:mm:tt") : "",
                          o.Present,
                          o.Absent,
                          o.AbsentInHoliday,
                          o.AbsentPenalty,
                          o.Holiday,
                          o.LateIn,
                          o.EarlyOut,
                          o.HalfShit,
                          o.HalfShitPenalty,
                          o.OT,
                          o.ShiftMinutes,
                          o.BeforeShiftMinutes,
                          o.AfterShiftMinutes,
                          o.FK_tbl_WPT_LeaveRequisition_ID,
                          FK_tbl_WPT_LeaveRequisition_IDName = o.FK_tbl_WPT_LeaveRequisition_ID.HasValue ? (o.tbl_WPT_LeaveRequisition.FK_tbl_WPT_LeavePolicy_ID.HasValue ? o.tbl_WPT_LeaveRequisition.tbl_WPT_LeavePolicy.PolicyPrefix + " [" + o.tbl_WPT_LeaveRequisition.LeaveValue.ToString() + "]" : o.tbl_WPT_LeaveRequisition.tbl_WPT_LeavePolicyNonPaid.PolicyPrefix) : "",
                          ShiftPrefix = o.tbl_WPT_Shift?.Prefix ?? "",
                          o.ShiftWorkingMinutes,
                          o.WDValue,
                          o.LeaveValue,
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        #endregion

        #region PayRun Detail Employee Wage
        public async Task<PagedData<object>> LoadPayRunMasterDetailEmployeeWage(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {
            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunDetail_EmpDetail_Wages
                                               .Where(w => w.FK_tbl_WPT_PayRunDetail_Emp_ID == MasterID)
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));

            pageddata.TotalPages = 1;
            pageddata.CurrentPage = 1;

            var qry = from o in await db.tbl_WPT_PayRunDetail_EmpDetail_Wages
                                  .Where(w => w.FK_tbl_WPT_PayRunDetail_Emp_ID == MasterID)
                                  .OrderByDescending(i => i.ID).ToListAsync()

                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunDetail_Emp_ID,
                          o.Rate,
                          o.Qty,
                          o.Debit,
                          o.Credit,
                          o.FK_tbl_WPT_EmployeeSalaryStructure_ID_Basic,
                          FK_tbl_WPT_EmployeeSalaryStructure_ID_BasicName = o.FK_tbl_WPT_EmployeeSalaryStructure_ID_Basic > 0 ? "Basic" : "",
                          o.FK_tbl_WPT_EmployeeSalaryStructureAllowance_ID,
                          FK_tbl_WPT_EmployeeSalaryStructureAllowance_IDName = o.tbl_WPT_EmployeeSalaryStructureAllowance?.tbl_WPT_AllowanceType.AllowanceName ?? "",
                          o.FK_tbl_WPT_EmployeeSalaryStructureDeductible_ID,
                          FK_tbl_WPT_EmployeeSalaryStructureDeductible_IDName = o.tbl_WPT_EmployeeSalaryStructureDeductible?.tbl_WPT_DeductibleType.DeductibleName ?? "",
                          o.FK_tbl_WPT_tbl_OTPolicy_ID,
                          FK_tbl_WPT_tbl_OTPolicy_IDName = o.tbl_WPT_tbl_OTPolicy?.PolicyName ?? "",
                          o.FK_tbl_WPT_IncentivePolicy_ID,
                          FK_tbl_WPT_IncentivePolicy_IDName = o.tbl_WPT_IncentivePolicy?.IncentiveName ?? "",
                          o.FK_tbl_WPT_LoanDetail_ID,
                          FK_tbl_WPT_LoanDetail_IDName = o.tbl_WPT_LoanDetail?.tbl_WPT_LoanMaster.tbl_WPT_LoanType.LoanType ?? "",
                          o.FK_tbl_WPT_IncrementDetail_ID_Arrear,
                          FK_tbl_WPT_IncrementDetail_ID_ArrearName = o.tbl_WPT_IncrementDetail?.tbl_WPT_IncrementMaster.Remarks ?? "",
                          o.FK_tbl_WPT_RewardDetail_ID,
                          FK_tbl_WPT_RewardDetail_IDName = o.tbl_WPT_RewardDetail?.tbl_WPT_RewardMaster.tbl_WPT_RewardType.RewardName ?? "",
                          o.FK_tbl_WPT_LeavePolicy_ID_EL,
                          FK_tbl_WPT_LeavePolicy_ID_ELName = o.tbl_WPT_LeavePolicy?.PolicyName ?? "",
                          o.FK_tbl_WPT_EmployeePensionStructure_ID,
                          FK_tbl_WPT_EmployeePensionStructure_IDName = o.FK_tbl_WPT_EmployeePensionStructure_ID > 0 ? "Pension" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };




            pageddata.Data = qry;

            return pageddata;
        }

        #endregion        

        #region PayRun Detail Payment

        public object GetWCLPayRunDetailPayment()
        {
            return new[]
            {
                new { n = "by Instrument No", v = "byInstrumentNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunDetailPayment(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunDetail_Payments
                                               .Where(w => w.FK_tbl_WPT_PayRunMaster_ID == MasterID)
                                               .Where(w =>
                                                       string.IsNullOrEmpty(FilterValueByText)
                                                       ||
                                                       FilterByText == "byInstrumentNo" && w.InstrumentNo.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunDetail_Payments
                                        .Where(w => w.FK_tbl_WPT_PayRunMaster_ID == MasterID)
                                         .Where(w =>
                                            string.IsNullOrEmpty(FilterValueByText)
                                            ||
                                            FilterByText == "byInstrumentNo" && w.InstrumentNo.ToLower().Contains(FilterValueByText.ToLower())
                                            )
                                         .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunMaster_ID,
                          o.FK_tbl_WPT_CompanyBankDetail_ID,
                          FK_tbl_WPT_CompanyBankDetail_IDName = o.tbl_WPT_CompanyBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_CompanyBankDetail.BankAccountNo + "]",
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.InstrumentNo,
                          TransactionDate = o.TransactionDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : "",
                          Amount = o.tbl_WPT_PayRunDetail_Emp_Primarys.Sum(s => s.WagePrimary) + o.tbl_WPT_PayRunDetail_Emp_Secondarys.Sum(s => s.WageSecondary)
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunDetailPayment(tbl_WPT_PayRunDetail_Payment tbl_WPT_PayRunDetail_Payment, string operation = "", string userName = "")
        {

            if (operation == "Save New")
            {
                tbl_WPT_PayRunDetail_Payment.CreatedBy = userName;
                tbl_WPT_PayRunDetail_Payment.CreatedDate = DateTime.Now;
                db.tbl_WPT_PayRunDetail_Payments.Add(tbl_WPT_PayRunDetail_Payment);
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Update")
            {
                tbl_WPT_PayRunDetail_Payment.ModifiedBy = userName;
                tbl_WPT_PayRunDetail_Payment.ModifiedDate = DateTime.Now;
                db.Entry(tbl_WPT_PayRunDetail_Payment).State = EntityState.Modified;
                await db.SaveChangesAsync();

            }
            else if (operation == "Save Delete")
            {
                db.tbl_WPT_PayRunDetail_Payments.Remove(db.tbl_WPT_PayRunDetail_Payments.Find(tbl_WPT_PayRunDetail_Payment.ID));
                await db.SaveChangesAsync();


            }
            return "OK";

        }
        public async Task<object> GetPayRunDetailPayment(int id)
        {
            var qry = from o in await db.tbl_WPT_PayRunDetail_Payments.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_PayRunMaster_ID,
                          o.FK_tbl_WPT_CompanyBankDetail_ID,
                          FK_tbl_WPT_CompanyBankDetail_IDName = o.tbl_WPT_CompanyBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_CompanyBankDetail.BankAccountNo + "]",
                          o.FK_tbl_WPT_TransactionMode_ID,
                          FK_tbl_WPT_TransactionMode_IDName = o.tbl_WPT_TransactionMode.TransactionMode,
                          o.InstrumentNo,
                          TransactionDate = o.TransactionDate.ToString("dd-MMM-yyyy"),
                          o.Remarks,
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }

        #endregion

        #region PayRun Detail Payment Employees
        public object GetWCLPayRunDetailPaymentEmployee()
        {
            return new[]
            {
                new { n = "by Employee Name", v = "byEmployeeName" },new { n = "by AT No", v = "byATNo" }
            }.ToList();
        }
        public async Task<PagedData<object>> LoadPayRunDetailPaymentEmployee(int CurrentPage = 1, int MasterID = 0, string FilterByText = null, string FilterValueByText = null, string FilterByNumberRange = null, int FilterValueByNumberRangeFrom = 0, int FilterValueByNumberRangeTill = 0, string FilterByDateRange = null, DateTime? FilterValueByDateRangeFrom = null, DateTime? FilterValueByDateRangeTill = null, string FilterByLoad = null)
        {

            PagedData<object> pageddata = new PagedData<object>();

            int NoOfRecords = await db.tbl_WPT_PayRunDetail_Emps
                                               .Where(w => w.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary == MasterID || w.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary == MasterID)
                                               .Where(w =>
                                                        string.IsNullOrEmpty(FilterValueByText)
                                                        ||
                                                        FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                                        ||
                                                        FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                                     )
                                               .CountAsync();

            pageddata.TotalPages = Convert.ToInt32(Math.Ceiling((double)NoOfRecords / pageddata.PageSize));


            pageddata.CurrentPage = CurrentPage;

            var qry = from o in await db.tbl_WPT_PayRunDetail_Emps
                                        .Where(w => w.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary == MasterID || w.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary == MasterID)
                                        .Where(w =>
                                               string.IsNullOrEmpty(FilterValueByText)
                                               ||
                                               FilterByText == "byEmployeeName" && w.tbl_WPT_Employee.EmployeeName.ToLower().Contains(FilterValueByText.ToLower())
                                               ||
                                               FilterByText == "byATNo" && w.tbl_WPT_Employee.ATEnrollmentNo_Default.ToLower().Contains(FilterValueByText.ToLower())
                                        )
                                  .OrderByDescending(i => i.ID).Skip(pageddata.PageSize * (CurrentPage - 1)).Take(pageddata.PageSize).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary,
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary,
                          o.WagePrimary,
                          o.WageSecondary,
                          o.FK_tbl_WPT_EmployeeBankDetail_ID,
                          FK_tbl_WPT_EmployeeBankDetail_IDName = o.FK_tbl_WPT_EmployeeBankDetail_ID > 0 ? o.tbl_WPT_EmployeeBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_EmployeeBankDetail.BankAccountNo + "]" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };


            pageddata.Data = qry;

            return pageddata;
        }
        public async Task<string> PostPayRunDetailPaymentEmployee(string operation, string userName, int tbl_WPT_PayRunDetail_EmpID = 0, int PayRunPaymentID = 0, int DepartmentID = 0, int DesignationID = 0)
        {
            SqlParameter CRUD_Msg = new SqlParameter("CRUD_Msg", SqlDbType.VarChar) { Direction = ParameterDirection.Output, Size = 100, Value = "Failed" };

            SqlParameter stbl_WPT_PayRunDetail_EmpID = new SqlParameter("tbl_WPT_PayRunDetail_EmpID", SqlDbType.Int) { Value = tbl_WPT_PayRunDetail_EmpID };
            SqlParameter sPayRunPaymentID = new SqlParameter("PayRunPaymentID", SqlDbType.Int) { Value = PayRunPaymentID };
            SqlParameter sOperation = new SqlParameter("Operation", SqlDbType.VarChar) { Value = operation, Size = 50 };
            SqlParameter sDepartmentID = new SqlParameter("DepartmentID", SqlDbType.Int) { Value = DepartmentID };
            SqlParameter sDesignationID = new SqlParameter("DesignationID", SqlDbType.Int) { Value = DesignationID };

            await db.Database.ExecuteSqlRawAsync(
                "EXECUTE [dbo].[USP_WPT_PayRunPaymentDetailReferencing] @CRUD_Msg={0} OUTPUT,@tbl_WPT_PayRunDetail_EmpID={1},@PayRunPaymentID={2},@Operation={3},@DepartmentID={4},@DesignationID={5}",
                CRUD_Msg, stbl_WPT_PayRunDetail_EmpID, sPayRunPaymentID, sOperation, sDepartmentID, sDesignationID);


            if ((string)CRUD_Msg.Value == "Successful")
                return "OK";
            else
                return (string)CRUD_Msg.Value;

        }
        public async Task<object> GetPayRunDetailPaymentEmployee(int id)
        {
            var qry = from o in await db.tbl_WPT_PayRunDetail_Emps.Where(w => w.ID == id).ToListAsync()
                      select new
                      {
                          o.ID,
                          o.FK_tbl_WPT_Employee_ID,
                          FK_tbl_WPT_Employee_IDName = o.tbl_WPT_Employee.EmployeeName,
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Primary,
                          o.FK_tbl_WPT_PayRunDetail_Payment_ID_Secondary,
                          o.WagePrimary,
                          o.WageSecondary,
                          o.FK_tbl_WPT_EmployeeBankDetail_ID,
                          FK_tbl_WPT_EmployeeBankDetail_IDName = o.FK_tbl_WPT_EmployeeBankDetail_ID > 0 ? o.tbl_WPT_EmployeeBankDetail.tbl_WPT_Bank_Branch.tbl_WPT_Bank.BankName + " [" + o.tbl_WPT_EmployeeBankDetail.BankAccountNo + "]" : "",
                          o.CreatedBy,
                          CreatedDate = o.CreatedDate.HasValue ? o.CreatedDate.Value.ToString("dd-MMM-yyyy") : "",
                          o.ModifiedBy,
                          ModifiedDate = o.ModifiedDate.HasValue ? o.ModifiedDate.Value.ToString("dd-MMM-yyyy") : ""
                      };

            return qry.FirstOrDefault();
        }


        #endregion

        #region Report  
        
        public List<ReportCallingModel> GetRLPayRunDetail()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                { ReportType= EnumReportType.OnlyID,
                ReportName ="PayRun Wage Detail",
                GroupBy = new List<string>(){"Department", "Designation", "Level" },
                OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun AT Detail",
                GroupBy = new List<string>(){"Department", "Designation" },
                OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Wage Summary By Department",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Wage Summary By Department Total",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Wage Summary By EmployeeLevel",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Wage Summary",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Comparison",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Detail WageHead",
                GroupBy = null,
                OrderBy = null,
                SeekBy = new List<string>(){ "Deduction", "Allowance" }
                },
                new ReportCallingModel()
                {
                    ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Loan Detail",
                GroupBy = new List<string>(){ "Loan Type" },
                OrderBy = new List<string>(){"ATNo", "Effective Date"},
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Signature",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun Salary Slip Register",
                GroupBy = new List<string>(){"Department", "Designation" },
                OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                SeekBy = null
                },
                new ReportCallingModel()
                {
                ReportType = EnumReportType.OnlyID,
                ReportName ="PayRun AT Full Detail",
                GroupBy = new List<string>(){"Department", "Designation" },
                OrderBy = new List<string>(){"ATNo", "Designation", "Department" },
                SeekBy = null
                }
            };
        }
        
        public async Task<byte[]> GetPDFFilePayRunDetailAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "PayRun Wage Detail")
            {
                return await Task.Run(() => PayRunWageDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun AT Detail")
            {
                return await Task.Run(() => PayRunATDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun AT Full Detail")
            {
                return await Task.Run(() => PayRunATFullDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Wage Summary By Department")
            {
                return await Task.Run(() => PayRunWageSummaryByDepartment(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Wage Summary By Department Total")
            {
                return await Task.Run(() => PayRunWageSummaryByDepartmentTotal(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Wage Summary By EmployeeLevel")
            {
                return await Task.Run(() => PayRunWageSummaryByEmployeeLevel(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Wage Summary")
            {
                return await Task.Run(() => PayRunWageSummary(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Comparison")
            {
                return await Task.Run(() => PayRunComparison(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Detail WageHead")
            {
                return await Task.Run(() => PayRunDetailWageHead(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Loan Detail")
            {
                return await Task.Run(() => PayRunLoanDetail(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Signature")
            {
                return await Task.Run(() => PayRunSignature(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Salary Slip Register")
            {
                return await Task.Run(() => PayRunSalarySlipRegister(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "PayRun Salary Slip Individual")
            {
                return await Task.Run(() => PayRunSalarySlipIndividual(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }
        private async Task<byte[]> PayRunSalarySlipIndividual(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {   
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 30f, null, true, true, true);

            /////////////------------------------------table for Detail 8------------------------------////////////////
            Table pdftableMain = new Table(8).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

            Table pdftableSub = new Table(4).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);


            var Earnings = new List<(string, string, double)>();
            var Deductions = new List<(string, string, double)>();

            string ATNo = "", EmpName = "", Department = "", Designation = "", A = "", AP = "", HS = "", HSP = "", PL = "", WD = "", OT = "", LeaveBalance = "", LoanBalance = "";
            double Wage = 0, BasicWage = 0;
            DateTime StartDate = DateTime.Now, EndDate = DateTime.Now;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);
                
                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

            int EmpID = 0;
                 
            if(command.Connection.State==ConnectionState.Closed)
                await command.Connection.OpenAsync();

            using (DbDataReader sqlReader = command.ExecuteReader())
            {
                while (sqlReader.Read())
                {

                    if (EmpID != (int)sqlReader["FK_tbl_WPT_Employee_ID"])
                    {

                        EmpID = (int)sqlReader["FK_tbl_WPT_Employee_ID"];

                        ATNo = sqlReader["ATEnrollmentNo_Default"].ToString();
                        EmpName = sqlReader["EmployeeName"].ToString();
                        Department = sqlReader["DepartmentName"].ToString();
                        Designation = sqlReader["Designation"].ToString();
                        A = sqlReader["A"].ToString();
                        AP = sqlReader["AP"].ToString();
                        HS = sqlReader["HS"].ToString();
                        HSP = sqlReader["HSP"].ToString();
                        PL = sqlReader["PL"].ToString();
                        WD = sqlReader["WD"].ToString();
                        OT = sqlReader["OT"].ToString();
                        Wage = Convert.ToDouble(sqlReader["Wage"]);
                        BasicWage = Convert.ToDouble(sqlReader["BasicWage"]);
                        LeaveBalance = sqlReader["LeaveBalance"].ToString();
                        LoanBalance = sqlReader["LoanBalance"].ToString();
                        StartDate = (DateTime)sqlReader["StartDate"];
                        EndDate = (DateTime)sqlReader["EndDate"];

                        Earnings.Clear();
                        if (Convert.ToDouble(sqlReader["Debit"]) > 0)
                            Earnings.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Debit"]));

                        Deductions.Clear();
                        if (Convert.ToDouble(sqlReader["Credit"]) > 0)
                            Deductions.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Credit"]));

                    }
                    else
                    {

                        if (!Earnings.Exists(f => f.Item1 == sqlReader["WageID"].ToString()) && Convert.ToDouble(sqlReader["Debit"]) > 0)
                            Earnings.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Debit"]));

                        if (!Deductions.Exists(f => f.Item1 == sqlReader["WageID"].ToString()) && Convert.ToDouble(sqlReader["Credit"]) > 0)
                            Deductions.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Credit"]));

                    }



                }

                //-----------------------------last row---------------------------------------------//
                if (EmpID > 0)
                {
                    pdftableMain = new Table(8).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

                    //-------------row 1----------------//
                    pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("SALARY SLIP FOR THE MONTH OF ").Add(EndDate.ToString("MMMM-yyyy"))).SetBackgroundColor(new DeviceRgb(0, 136, 204)).SetFontColor(new DeviceRgb(255, 255, 255)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(Rpt_Shared.LicenseTo)).SetBackgroundColor(new DeviceRgb(102, 153, 255)).SetFontColor(new DeviceRgb(255, 255, 255)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));

                    //-------------row 2----------------//
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Name: ")).SetBold().SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(EmpName)).SetBold().SetKeepTogether(true));

                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("AT No: ")).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(ATNo)).SetKeepTogether(true));

                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Emp No: ")).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetKeepTogether(true));

                    //-------------row 3----------------//
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Department: ")).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(Department)).SetKeepTogether(true));

                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Designation: ")).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(Designation)).SetKeepTogether(true));

                    //-------------row 4----------------//
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Basic Salary: ")).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", BasicWage))).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Loan Bal: ").Add(LoanBalance)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("WD: ").Add(WD).Add("   OT: ").Add(OT)).SetKeepTogether(true));



                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("A: ").Add(A).Add("   AP: ").Add(AP)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("HS: ").Add(HS).Add("   HSP: ").Add(HSP)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Paid Leaves: ").Add(PL)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Leave Bal: ").Add(LeaveBalance)).SetKeepTogether(true));

                    //-------------row 5----------------//
                    pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("EARNINGS")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("DEDUCTIONS")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));


                    //----------------------------------------------row 6--------------------------------------------//
                    pdftableSub = new Table(4).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

                    foreach (var itm in Earnings)
                    {
                        if (itm.Item1.Length > 0)
                        {
                            pdftableSub.AddCell(new Cell(1, 3).Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", itm.Item3))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        }

                    }
                    pdftableMain.AddCell(new Cell(1, 4).Add(pdftableSub).SetKeepTogether(true));

                    pdftableSub = new Table(4).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);


                    foreach (var itm in Deductions)
                    {
                        if (itm.Item1.Length > 0)
                        {
                            pdftableSub.AddCell(new Cell(1, 3).Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", itm.Item3))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        }
                    }

                    pdftableMain.AddCell(new Cell(1, 4).Add(pdftableSub).SetKeepTogether(true));


                    //---------------------------Earning & Deduction Total Row--------------------------//
                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Total:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", Earnings.Sum(s => s.Item3)))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                    pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Total:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", Deductions.Sum(s => s.Item3)))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                    //---------------------------Net Salary Row--------------------------//
                    pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Net Salary:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(
                        string.Format("{0:n0}", ((double)Earnings.Sum(s => s.Item3) - (double)Deductions.Sum(s => s.Item3)))
                                                                                )
                                                            ).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                    pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));



                }
            }

            }

            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));

            return page.FinishToGetBytes();



            
        }
        private async Task<byte[]> PayRunSalarySlipRegister(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 30f, null, true, false, false);

            /////////////------------------------------table for Detail 8------------------------------////////////////
            Table pdftableMain = new Table(8).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            Table pdftableSub = new Table(4).SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER);

            var Earnings = new List<(string, string, double)>();
            var Deductions = new List<(string, string, double)>();

            string ATNo = "", EmpName = "", Department = "", Designation = "", A = "", AP = "", HS = "", HSP = "", PL = "", WD = "", OT = "", LeaveBalance = "", LoanBalance = "";
            double Wage = 0, BasicWage = 0;
            DateTime StartDate = DateTime.Now, EndDate = DateTime.Now;
            
            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int EmpID = 0;
                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {


                        if (EmpID != (int)sqlReader["FK_tbl_WPT_Employee_ID"])
                        {
                            if (EmpID > 0)
                            {
                                pdftableMain = new Table(8).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

                                //-------------row 1----------------//
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("SALARY SLIP FOR THE MONTH OF ").Add(EndDate.ToString("MMMM-yyyy"))).SetBackgroundColor(new DeviceRgb(0, 136, 204)).SetFontColor(new DeviceRgb(255, 255, 255)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(Rpt_Shared.LicenseTo)).SetBackgroundColor(new DeviceRgb(102, 153, 255)).SetFontColor(new DeviceRgb(255, 255, 255)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));

                                //-------------row 2----------------//
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Name: ")).SetBold().SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(EmpName)).SetBold().SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("AT No: ")).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(ATNo)).SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Emp No: ")).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetKeepTogether(true));

                                //-------------row 3----------------//
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Department: ")).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(Department)).SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Designation: ")).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(Designation)).SetKeepTogether(true));

                                //-------------row 4----------------//
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Basic Salary: ")).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", BasicWage))).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Loan Bal: ").Add(LoanBalance)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("WD: ").Add(WD).Add("   OT: ").Add(OT)).SetKeepTogether(true));



                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("A: ").Add(A).Add("   AP: ").Add(AP)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("HS: ").Add(HS).Add("   HSP: ").Add(HSP)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Paid Leaves: ").Add(PL)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Leave Bal: ").Add(LeaveBalance)).SetKeepTogether(true));

                                //-------------row 5----------------//
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("EARNINGS")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("DEDUCTIONS")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));


                                //----------------------------------------------row 6--------------------------------------------//
                                pdftableSub = new Table(4).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

                                foreach (var itm in Earnings)
                                {
                                    if (itm.Item1.Length > 0)
                                    {
                                        pdftableSub.AddCell(new Cell(1, 3).Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", itm.Item3))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                                    }

                                }
                                pdftableMain.AddCell(new Cell(1, 4).Add(pdftableSub).SetKeepTogether(true));

                                pdftableSub = new Table(4).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);


                                foreach (var itm in Deductions)
                                {
                                    if (itm.Item1.Length > 0)
                                    {
                                        pdftableSub.AddCell(new Cell(1, 3).Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", itm.Item3))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                                    }
                                }

                                pdftableMain.AddCell(new Cell(1, 4).Add(pdftableSub).SetKeepTogether(true));


                                //---------------------------Earning & Deduction Total Row--------------------------//
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Total:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", Earnings.Sum(s => s.Item3)))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Total:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", Deductions.Sum(s => s.Item3)))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                                //---------------------------Net Salary Row--------------------------//
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Net Salary:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(
                                    string.Format("{0:n0}", ((double)Earnings.Sum(s => s.Item3) - (double)Deductions.Sum(s => s.Item3)))
                                                                                            )
                                                                        ).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                                if (!string.IsNullOrEmpty(GroupbyValue))
                                    page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));


                                if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                                {
                                    if (string.IsNullOrEmpty(GroupbyValue))
                                    {
                                        GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                                        if (GroupID > 0)
                                            page.InsertContent(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        else
                                            page.InsertContent(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));

                                    }
                                    else
                                    {
                                        GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                                        if (GroupID > 0)
                                            page.InsertContent(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        else
                                            page.InsertContent(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                    }



                                }
                                else if (string.IsNullOrEmpty(GroupbyValue))
                                {
                                    page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
                                }



                            }
                            EmpID = (int)sqlReader["FK_tbl_WPT_Employee_ID"];


                            ATNo = sqlReader["ATEnrollmentNo_Default"].ToString();
                            EmpName = sqlReader["EmployeeName"].ToString();
                            Department = sqlReader["DepartmentName"].ToString();
                            Designation = sqlReader["Designation"].ToString();
                            A = sqlReader["A"].ToString();
                            AP = sqlReader["AP"].ToString();
                            HS = sqlReader["HS"].ToString();
                            HSP = sqlReader["HSP"].ToString();
                            PL = sqlReader["PL"].ToString();
                            WD = sqlReader["WD"].ToString();
                            OT = sqlReader["OT"].ToString();
                            Wage = Convert.ToDouble(sqlReader["Wage"]);
                            BasicWage = Convert.ToDouble(sqlReader["BasicWage"]);
                            LeaveBalance = sqlReader["LeaveBalance"].ToString();
                            LoanBalance = sqlReader["LoanBalance"].ToString();
                            StartDate = (DateTime)sqlReader["StartDate"];
                            EndDate = (DateTime)sqlReader["EndDate"];

                            Earnings.Clear();
                            if (Convert.ToDouble(sqlReader["Debit"]) > 0)
                                Earnings.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Debit"]));

                            Deductions.Clear();
                            if (Convert.ToDouble(sqlReader["Credit"]) > 0)
                                Deductions.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Credit"]));

                        }
                        else
                        {

                            if (!Earnings.Exists(f => f.Item1 == sqlReader["WageID"].ToString()) && Convert.ToDouble(sqlReader["Debit"]) > 0)
                                Earnings.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Debit"]));

                            if (!Deductions.Exists(f => f.Item1 == sqlReader["WageID"].ToString()) && Convert.ToDouble(sqlReader["Credit"]) > 0)
                                Deductions.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), (double)sqlReader["Credit"]));

                        }

                    }


                    ////-----------------------------last row---------------------------------------------//
                    if (EmpID > 0)
                    {
                        pdftableMain = new Table(8).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

                        //-------------row 1----------------//
                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("SALARY SLIP FOR THE MONTH OF ").Add(EndDate.ToString("MMMM-yyyy"))).SetBackgroundColor(new DeviceRgb(0, 136, 204)).SetFontColor(new DeviceRgb(255, 255, 255)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(Rpt_Shared.LicenseTo)).SetBackgroundColor(new DeviceRgb(102, 153, 255)).SetFontColor(new DeviceRgb(255, 255, 255)).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));

                        //-------------row 2----------------//
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Name: ")).SetBold().SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(EmpName)).SetBold().SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("AT No: ")).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(ATNo)).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Emp No: ")).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetKeepTogether(true));

                        //-------------row 3----------------//
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Department: ")).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(Department)).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Designation: ")).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add(Designation)).SetKeepTogether(true));

                        //-------------row 4----------------//
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("WD: ").Add(WD)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("OT: ").Add(OT)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("Basic: ")).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", BasicWage))).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("A: ").Add(A)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("HS: ").Add(HS)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("PL: ").Add(PL)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add("LB: ").Add(LeaveBalance)).SetKeepTogether(true));
                        //-------------row 5----------------//
                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("EARNINGS")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("DEDUCTIONS")).SetBold().SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));


                        //----------------------------------------------row 6--------------------------------------------//
                        pdftableSub = new Table(4).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);

                        foreach (var itm in Earnings)
                        {
                            if (itm.Item1.Length > 0)
                            {
                                pdftableSub.AddCell(new Cell(1, 3).Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", itm.Item3))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            }

                        }
                        pdftableMain.AddCell(new Cell(1, 4).Add(pdftableSub).SetKeepTogether(true));

                        pdftableSub = new Table(4).UseAllAvailableWidth().SetFontSize(6).SetFixedLayout().SetBorder(Border.NO_BORDER).SetKeepTogether(true);


                        foreach (var itm in Deductions)
                        {
                            if (itm.Item1.Length > 0)
                            {
                                pdftableSub.AddCell(new Cell(1, 3).Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", itm.Item3))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            }
                        }

                        pdftableMain.AddCell(new Cell(1, 4).Add(pdftableSub).SetKeepTogether(true));


                        //---------------------------Earning & Deduction Total Row--------------------------//
                        pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Total:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", Earnings.Sum(s => s.Item3)))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Total:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(string.Format("{0:n0}", Deductions.Sum(s => s.Item3)))).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                        //---------------------------Net Salary Row--------------------------//
                        pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("Net Salary:")).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(
                            string.Format("{0:n0}", ((double)Earnings.Sum(s => s.Item3) - (double)Deductions.Sum(s => s.Item3)))
                                                                                    )
                                                                ).SetBold().SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                        pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add("\n")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
                    }
                }
            
            }

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunSignature(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------9 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.05), // S No
                        (float)(PageSize.A4.GetWidth()*0.06), //AT
                        (float)(PageSize.A4.GetWidth()*0.30), // Name                        
                        (float)(PageSize.A4.GetWidth()*0.12), //Total Wage
                        (float)(PageSize.A4.GetWidth()*0.05), // WD
                        (float)(PageSize.A4.GetWidth()*0.05), // OT
                        (float)(PageSize.A4.GetWidth()*0.12), // Transaction Wage
                        (float)(PageSize.A4.GetWidth()*0.15)  // Signature
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GroupTotalTransactionWage = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;

                int SNo = 1;

                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("WD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("OT")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Transaction Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Signature")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(sqlReader["TransactionMode"].ToString()) && GroupbyValue != sqlReader["TransactionMode"].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Transaction Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalTransactionWage))).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                            }

                            GroupbyValue = sqlReader["TransactionMode"].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupbyValue + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader["ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));



                            GroupTotalTransactionWage = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetMinHeight(25f).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["TotalWage"]))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WD"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["OT"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["TransactionWage"]))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalTransactionWage += (double)sqlReader["TransactionWage"];
                    }
                }

                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Transaction Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalTransactionWage))).SetBorder(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunLoanDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------8 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.10), //AT
                        (float)(PageSize.A4.GetWidth()*0.30), // Name
                        (float)(PageSize.A4.GetWidth()*0.10), // eff
                        (float)(PageSize.A4.GetWidth()*0.10), // loan amount
                        (float)(PageSize.A4.GetWidth()*0.10), //rate
                        (float)(PageSize.A4.GetWidth()*0.10), // ded
                        (float)(PageSize.A4.GetWidth()*0.10) // bala
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GroupTotal = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Loan Type" ? "LoanType" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deducted")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }
                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 8).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Effective")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Loan")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rate")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deducted")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Balance")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotal = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["EffectiveFrom"]).ToString("MMM-yy"))).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["InstallmentRate"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Balance"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        SNo = SNo + 1;

                        GroupTotal += Convert.ToDouble(sqlReader["Credit"]);
                    }
                }

                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotal) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunDetailWageHead(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------4 column table of week days------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.15), // S No
                        (float)(PageSize.A4.GetWidth()*0.15), //AT
                        (float)(PageSize.A4.GetWidth()*0.50), // Name
                        (float)(PageSize.A4.GetWidth()*0.20) // Amount
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GroupTotalAmount = 0; 

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                int SNo = 1;

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(sqlReader["WageHead"].ToString()) && GroupbyValue != sqlReader["WageHead"].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalAmount) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                            }
                            GroupbyValue = sqlReader["WageHead"].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupbyValue + "&OrderBy=" + Orderby + "&GroupID=" + "0" + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotalAmount = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Amount"]) + "/-")).SetFontSize(8).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalAmount += Convert.ToDouble(sqlReader["Amount"]);
                    }                 
                }

                pdftableMain.AddCell(new Cell(1, 3).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalAmount) + "/-")).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunComparison(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------7 column table ------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.30), //Head Name
                        (float)(PageSize.A4.GetWidth()*0.12), // Earnings Current
                        (float)(PageSize.A4.GetWidth()*0.12), // Deductions Current
                        (float)(PageSize.A4.GetWidth()*0.12), // Earnings Previous
                        (float)(PageSize.A4.GetWidth()*0.12), // Deductions Previous
                        (float)(PageSize.A4.GetWidth()*0.12) // Diff
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            double TotalDebit = 0, TotalDebit2 = 0, TotalCredit = 0, TotalCredit2 = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                int CurrentNoOfEmp = 0, PreviousNoOfEmp = 0;

                command.CommandText = "SELECT TOP(1) dbo.tbl_WPT_CalendarYear_Months.MonthStart, dbo.tbl_WPT_CalendarYear_Months.MonthEnd FROM dbo.tbl_WPT_CalendarYear_Months INNER JOIN dbo.tbl_WPT_PayRunMaster ON dbo.tbl_WPT_CalendarYear_Months.ID = dbo.tbl_WPT_PayRunMaster.FK_tbl_WPT_CalendarYear_Months_ID WHERE (dbo.tbl_WPT_PayRunMaster.ID = @MasterID) ";
                command.CommandType = CommandType.Text;

                var pID = command.CreateParameter();
                pID.ParameterName = "@MasterID"; pID.DbType = DbType.Int32; pID.Value = id;
                command.Parameters.Add(pID);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        page.InsertContent(new Cell().Add(new Paragraph().Add("For The Month Of ").Add(((DateTime)sqlReader["MonthEnd"]).ToString("MMMM-yyyy"))).SetTextAlignment(TextAlignment.CENTER).SetHorizontalAlignment(HorizontalAlignment.CENTER).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                    }
                }

                command.Parameters.Remove(pID);

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                int SNo = 1;
                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Current Month")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("Previous Month")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Difference")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                double Diff = 0;

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(sqlReader["WageHeadName"].ToString()))
                        {
                            Diff = 0;
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WageHeadName"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Debit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Debit2"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit2"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            Diff = (Convert.ToDouble(sqlReader["Debit"]) - Convert.ToDouble(sqlReader["Credit"])) - (Convert.ToDouble(sqlReader["Debit2"]) - Convert.ToDouble(sqlReader["Credit2"]));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", Diff) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            SNo = SNo + 1;

                            TotalDebit += Convert.ToDouble(sqlReader["Debit"]);
                            TotalDebit2 += Convert.ToDouble(sqlReader["Debit2"]);
                            TotalCredit += Convert.ToDouble(sqlReader["Credit"]);
                            TotalCredit2 += Convert.ToDouble(sqlReader["Credit2"]);
                        }
                        else
                        {
                            CurrentNoOfEmp = Convert.ToInt16(sqlReader["other"]);
                            PreviousNoOfEmp = Convert.ToInt16(sqlReader["other2"]);

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["OtherName"].ToString())).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(string.Format("{0:n0}", CurrentNoOfEmp) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(string.Format("{0:n0}", PreviousNoOfEmp) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", CurrentNoOfEmp - PreviousNoOfEmp) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        }
                    }

                    //----------------------------Net Salary row--------------------------------------//
                    Diff = 0;
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Net Salary")).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(string.Format("{0:n0}", TotalDebit - TotalCredit) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add(string.Format("{0:n0}", TotalDebit2 - TotalCredit2) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                    Diff = (TotalDebit - TotalCredit) - (TotalDebit2 - TotalCredit2);
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", Diff) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                    //----------------------------employees count row--------------------------------------//
                    pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add("\n")).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                }

            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunWageSummary(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------4 column table ------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.50), //Head Name
                        (float)(PageSize.A4.GetWidth()*0.20), // Earnings
                        (float)(PageSize.A4.GetWidth()*0.20) // Deductions
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                int SNo = 1;
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WageHeadName"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Debit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;
                    }
                }

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn + "2";

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Group Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Wage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Total Primary Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["WagePrimary"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Total Secondary Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["WageSecondary"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                        pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                    }
                }


                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn + "3";

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["TransactionMode"].ToString())).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["TotalWage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                    }
                }

            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunWageSummaryByEmployeeLevel(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------4 column table ------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.50), //Head Name
                        (float)(PageSize.A4.GetWidth()*0.20), // Earnings
                        (float)(PageSize.A4.GetWidth()*0.20) // Deductions
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalWage = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = "LevelName";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID == 0)
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        }

                        if (!string.IsNullOrEmpty(sqlReader["WageHeadName"].ToString()))
                        {
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WageHeadName"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Debit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            SNo = SNo + 1;
                        }
                        else
                        {
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Group Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Wage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                            GrandTotalWage += Convert.ToDouble(sqlReader["Wage"]);
                        }
                    }
                }

                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\n")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Grand Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(10).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Grand Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalWage) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunWageSummaryByDepartment(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------4 column table ------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.50), //Head Name
                        (float)(PageSize.A4.GetWidth()*0.20), // Earnings
                        (float)(PageSize.A4.GetWidth()*0.20) // Deductions
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalWage = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = "DepartmentName";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID == 0)
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        }

                        if (!string.IsNullOrEmpty(sqlReader["WageHeadName"].ToString()))
                        {
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WageHeadName"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Debit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            SNo = SNo + 1;
                        }
                        else
                        {
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Group Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Wage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                            GrandTotalWage += Convert.ToDouble(sqlReader["Wage"]);
                        }
                    }
                }

                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\n")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Grand Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(10).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Grand Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalWage) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunWageSummaryByDepartmentTotal(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", true);

            //--------------------------------4 column table ------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth()*0.10), // S No
                        (float)(PageSize.A4.GetWidth()*0.50), //Head Name
                        (float)(PageSize.A4.GetWidth()*0.20), // Earnings
                        (float)(PageSize.A4.GetWidth()*0.20) // Deductions
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalWage = 0;

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = "DepartmentName";

                int SNo = 1;

                //if (string.IsNullOrEmpty(GroupbyFieldName))
                //{
                //    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                //    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                //    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                //    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                //}

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID == 0)
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage Head Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                        }

                        if (!string.IsNullOrEmpty(sqlReader["WageHeadName"].ToString()))
                        {
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WageHeadName"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Debit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Credit"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            SNo = SNo + 1;
                        }
                        else
                        {
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Group Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Wage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                            GrandTotalWage += Convert.ToDouble(sqlReader["Wage"]);
                        }
                    }
                }

                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("\n")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Grand Summary")).SetTextAlignment(TextAlignment.CENTER).SetFontSize(10).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(" ")).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Grand Total Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalWage) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

            }

            page.InsertContent(pdftableMain);

            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunATDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", false);

            //--------------------------------21 column table------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.Rotate().GetWidth()*0.05), // S No
                        (float)(PageSize.A4.Rotate().GetWidth()*0.05), //AT
                        (float)(PageSize.A4.Rotate().GetWidth()*0.17), // Name
                        (float)(PageSize.A4.Rotate().GetWidth()*0.12), // Designation
                        (float)(PageSize.A4.Rotate().GetWidth()*0.13), // Designation
                        (float)(PageSize.A4.Rotate().GetWidth()*0.06), // Basic
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // P
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // A
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // AHD
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // AP
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // HD
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // LI
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // EO
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // HS
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // HSP
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // PL
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // WD
                        (float)(PageSize.A4.Rotate().GetWidth()*0.02), // OT
                        (float)(PageSize.A4.Rotate().GetWidth()*0.06), // Wage
                        (float)(PageSize.A4.Rotate().GetWidth()*0.06), // Earnings
                        (float)(PageSize.A4.Rotate().GetWidth()*0.06) // Deductions
                }
            ).SetFontSize(8).SetFixedLayout().SetBorder(Border.NO_BORDER);

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                double GrandTotalP = 0, GroupTotalP = 0, GrandTotalA = 0, GroupTotalA = 0,
                    GrandTotalPL = 0, GroupTotalPL = 0, GrandTotalWD = 0, GroupTotalWD = 0, GrandTotalOT = 0, GroupTotalOT = 0,
                    GroupTotalEarning = 0, GrandTotalEarning = 0,
                    GroupTotalEmp = 0,
                    GrandTotalWage = 0, GroupTotalWage = 0;


                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Basic")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("P")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("A")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AHD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AP")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("LI")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("EO")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HSP")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("PL")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("WD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OT")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                }

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalEmp.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Sub Total")).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalP.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalA.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalPL.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalWD.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalOT.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalWage) + "/-")).SetFontSize(6).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalEarning) + "/-")).SetFontSize(6).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 21).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 21).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Basic")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("P")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("A")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AHD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AP")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("LI")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("EO")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HSP")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("PL")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("WD")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OT")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            GroupTotalP = 0; GroupTotalA = 0; GroupTotalPL = 0; GroupTotalWD = 0; GroupTotalOT = 0; GroupTotalWage = 0;
                            GroupTotalEarning = 0; GroupTotalEmp = 0;


                        }

                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["DepartmentName"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["Designation"].ToString())).SetFontSize(6).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["BasicWage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["P"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["A"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AHD"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["AP"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["HD"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["LI"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EO"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["HS"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["HSP"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["PL"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["WD"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["OT"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Wage"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Earnings"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", sqlReader["Deductions"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(7).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        SNo = SNo + 1;

                        GroupTotalEmp += 1;

                        GrandTotalP += Convert.ToDouble(sqlReader["P"]);
                        GroupTotalP += Convert.ToDouble(sqlReader["P"]);

                        GrandTotalA += Convert.ToDouble(sqlReader["A"]);
                        GroupTotalA += Convert.ToDouble(sqlReader["A"]);

                        GrandTotalPL += Convert.ToDouble(sqlReader["PL"]);
                        GroupTotalPL += Convert.ToDouble(sqlReader["PL"]);

                        GrandTotalWD += Convert.ToDouble(sqlReader["WD"]);
                        GroupTotalWD += Convert.ToDouble(sqlReader["WD"]);

                        GrandTotalOT += Convert.ToDouble(sqlReader["OT"]);
                        GroupTotalOT += Convert.ToDouble(sqlReader["OT"]);

                        GrandTotalEarning += Convert.ToDouble(sqlReader["Earnings"]);
                        GroupTotalEarning += Convert.ToDouble(sqlReader["Earnings"]);

                        GrandTotalWage += Convert.ToDouble(sqlReader["Wage"]);
                        GroupTotalWage += Convert.ToDouble(sqlReader["Wage"]);
                    }
                }

                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalEmp.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add("Sub Total")).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalP.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalA.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalPL.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalWD.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GroupTotalOT.ToString())).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalWage) + "/-")).SetFontSize(6).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalEarning) + "/-")).SetFontSize(6).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


                ////----------------------------grand total---------------------------------------------//
                pdftableMain.AddCell(new Cell(1, 21).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderTop(new SolidBorder(0.5f)));


                pdftableMain.AddCell(new Cell(1, 6).Add(new Paragraph().Add("Grand Total")).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GrandTotalP.ToString())).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GrandTotalA.ToString())).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 7).Add(new Paragraph().Add(" ")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GrandTotalPL.ToString())).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GrandTotalWD.ToString())).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(GrandTotalOT.ToString())).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalWage) + "/-")).SetFontSize(5).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalEarning) + "/-")).SetFontSize(5).SetBorder(Border.NO_BORDER).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));
                pdftableMain.AddCell(new Cell(1, 1).Add(new Paragraph().Add(" ")).SetFontSize(5).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));


            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunWageDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 20f, 30f, "----- " + rn + " -----", true);

            /////////////------------------------------table for Detail 14------------------------------////////////////
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.GetWidth() * 0.04),//S No
                        (float)(PageSize.A4.GetWidth() * 0.04),//ATNo
                        (float)(PageSize.A4.GetWidth() * 0.15),//Name 
                        (float)(PageSize.A4.GetWidth() * 0.11),//Department 
                        (float)(PageSize.A4.GetWidth() * 0.12),//Designation 
                        (float)(PageSize.A4.GetWidth() * 0.06),//Basic 
                        (float)(PageSize.A4.GetWidth() * 0.02),//A
                        (float)(PageSize.A4.GetWidth() * 0.02),//HS
                        (float)(PageSize.A4.GetWidth() * 0.02),//L
                        (float)(PageSize.A4.GetWidth() * 0.03),//WD
                        (float)(PageSize.A4.GetWidth() * 0.03),//OT
                        (float)(PageSize.A4.GetWidth() * 0.06),//Wage 
                        (float)(PageSize.A4.GetWidth() * 0.15),//Earnings Name
                        (float)(PageSize.A4.GetWidth() * 0.15)//Deductions Name
                }
            ).SetFontSize(5).SetFixedLayout().SetBorder(Border.NO_BORDER);

            Table pdftableSub = new Table(new float[] { 70, 30 }
            ).SetFontSize(5).SetFixedLayout().SetBorder(Border.NO_BORDER);

            int SNo = 1;

            var Earnings = new List<(string, string, string)>();
            var Deductions = new List<(string, string, string)>();

            string ATNo = "", EmpName = "", Department = "", Designation = "", A = "", HS = "", PL = "", WD = "", OT = ""; double Wage = 0, BasicWage = 0;

            double GrandTotalWage = 0, GroupTotalWage = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "SELECT TOP(1) StartDate, EndDate, DATEDIFF(d, StartDate, EndDate) + 1 AS WD FROM dbo.tbl_WPT_PayRunMaster WHERE (ID = @ID) ";
                command.CommandType = CommandType.Text;

                var pID = command.CreateParameter();
                pID.ParameterName = "@ID"; pID.DbType = DbType.Int32; pID.Value = id;
                command.Parameters.Add(pID);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        page.InsertContent(new Cell().Add(new Paragraph().Add(((DateTime)sqlReader["StartDate"]).ToString("dd-MMM-yy")).Add("TO").Add(((DateTime)sqlReader["EndDate"]).ToString("dd-MMM-yy")).Add(" [WD:" + sqlReader["WD"].ToString() + "]")).SetTextAlignment(TextAlignment.CENTER));
                    }
                }

                command.Parameters.Remove(pID);

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          GroupBy == "Level" ? "LevelName" :
                                          "";

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("S. No.")).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Department")).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Basic")).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("A")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("HS")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("PL")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("WD")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("OT")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Earnings")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                    pdftableMain.AddHeaderCell(new Cell().Add(new Paragraph().Add("Deductions")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                }

                int EmpID = 0;

                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (EmpID != (int)sqlReader["FK_tbl_WPT_Employee_ID"])
                        {
                            if (EmpID > 0)
                            {
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(ATNo)).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(EmpName)).SetFontSize(6).SetKeepTogether(true).SetBold());
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Department)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Designation)).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", BasicWage))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(A)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(HS)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(PL)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(WD)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(OT)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", Wage))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(6).SetKeepTogether(true));
                                //---------------------------------------------------------------------------------------------//


                                pdftableSub = new Table(new float[] { 70, 30 }
                                ).SetFontSize(5).SetFixedLayout().SetBorder(Border.NO_BORDER);
                                foreach (var itm in Earnings)
                                {
                                    if (itm.Item1.Length > 0)
                                    {
                                        pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item3)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                                    }

                                }
                                pdftableMain.AddCell(new Cell().Add(pdftableSub).SetKeepTogether(true));

                                pdftableSub = new Table(new float[] { 70, 30 }
                                ).SetFontSize(5).SetFixedLayout().SetBorder(Border.NO_BORDER);

                                foreach (var itm in Deductions)
                                {
                                    if (itm.Item1.Length > 0)
                                    {
                                        pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                        pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item3)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                                    }
                                }

                                pdftableMain.AddCell(new Cell().Add(pdftableSub).SetKeepTogether(true));

                                SNo += 1;

                                GroupTotalWage += Convert.ToDouble(Wage);
                                GrandTotalWage += Convert.ToDouble(Wage);
                            }


                            EmpID = (int)sqlReader["FK_tbl_WPT_Employee_ID"];


                            ATNo = sqlReader["ATEnrollmentNo_Default"].ToString();
                            EmpName = sqlReader["EmployeeName"].ToString();
                            Department = sqlReader["DepartmentName"].ToString();
                            Designation = sqlReader["Designation"].ToString();
                            A = sqlReader["A"].ToString();
                            HS = sqlReader["HS"].ToString();
                            PL = sqlReader["PL"].ToString();
                            WD = sqlReader["WD"].ToString();
                            OT = sqlReader["OT"].ToString();
                            Wage = Convert.ToDouble(sqlReader["Wage"]);
                            BasicWage = Convert.ToDouble(sqlReader["BasicWage"]);

                            Earnings.Clear();
                            if (Convert.ToDouble(sqlReader["Debit"]) > 0)
                                Earnings.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), sqlReader["Debit"].ToString()));

                            Deductions.Clear();
                            if (Convert.ToDouble(sqlReader["Credit"]) > 0)
                                Deductions.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), sqlReader["Credit"].ToString()));

                        }
                        else
                        {

                            if (!Earnings.Exists(f => f.Item1 == sqlReader["WageID"].ToString()) && Convert.ToDouble(sqlReader["Debit"]) > 0)
                                Earnings.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), sqlReader["Debit"].ToString()));

                            if (!Deductions.Exists(f => f.Item1 == sqlReader["WageID"].ToString()) && Convert.ToDouble(sqlReader["Credit"]) > 0)
                                Deductions.Add((sqlReader["WageID"].ToString(), sqlReader["HeadWage"].ToString(), sqlReader["Credit"].ToString()));

                        }

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                pdftableMain.AddCell(new Cell(1, 11).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalWage))).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 14).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 14).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id.ToString() + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString() + "&_for=Emp")))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(10).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            GroupTotalWage = 0;

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S. No.")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Department")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Designation")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Basic")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("A")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("HS")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("PL")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("WD")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("OT")).SetTextAlignment(TextAlignment.CENTER).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Wage")).SetTextAlignment(TextAlignment.RIGHT).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Earnings")).SetBold());
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Deductions")).SetBold());
                        }

                    }


                    //-----------------------------last row---------------------------------------------//
                    if (EmpID > 0)
                    {
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(ATNo)).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(EmpName)).SetFontSize(6).SetKeepTogether(true).SetBold());
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Department)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(Designation)).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", BasicWage))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(A)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(HS)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(PL)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(WD)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(OT)).SetTextAlignment(TextAlignment.CENTER).SetFontSize(6).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", Wage))).SetTextAlignment(TextAlignment.RIGHT).SetFontSize(6).SetKeepTogether(true));
                        //---------------------------------------------------------------------------------------------//


                        pdftableSub = new Table(new float[] { 70, 30 }
                        ).SetFontSize(5).SetFixedLayout().SetBorder(Border.NO_BORDER);
                        foreach (var itm in Earnings)
                        {
                            if (itm.Item1.Length > 0)
                            {
                                pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item3)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            }

                        }
                        pdftableMain.AddCell(new Cell().Add(pdftableSub).SetKeepTogether(true));

                        pdftableSub = new Table(new float[] { 70, 30 }
                        ).SetFontSize(5).SetFixedLayout().SetBorder(Border.NO_BORDER);

                        foreach (var itm in Deductions)
                        {
                            if (itm.Item1.Length > 0)
                            {
                                pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item2 + ": ")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                                pdftableSub.AddCell(new Cell().Add(new Paragraph().Add(itm.Item3)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            }
                        }
                        pdftableMain.AddCell(new Cell().Add(pdftableSub).SetKeepTogether(true));


                        GroupTotalWage += Convert.ToDouble(Wage);
                        GrandTotalWage += Convert.ToDouble(Wage);



                        pdftableMain.AddCell(new Cell(1, 11).Add(new Paragraph().Add("Sub Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GroupTotalWage))).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                    }
                }

            }
            pdftableMain.AddCell(new Cell(1, 14).Add(new Paragraph().Add(" ")).SetBorder(Border.NO_BORDER).SetBorderBottom(new SolidBorder(0.5f)));

            pdftableMain.AddCell(new Cell(1, 11).Add(new Paragraph().Add("Grand Total")).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(string.Format("{0:n0}", GrandTotalWage))).SetFontSize(6).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));
            pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("")).SetBorder(Border.NO_BORDER).SetKeepTogether(true));



            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }
        private async Task<byte[]> PayRunATFullDetail(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.A4, 20f, 20f, 15f, 35f, "----- " + rn + "-----", false);

            //--------------------------------34 column table------------------------------//
            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.A4.Rotate().GetWidth()*0.05), // S No
                        (float)(PageSize.A4.Rotate().GetWidth()*0.05), //AT
                        (float)(PageSize.A4.Rotate().GetWidth()*0.17), // Name
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 1
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 2
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 3
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 4
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 5
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 6
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 7
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 8
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 9
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 10
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 11
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 12
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 13
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 14
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 15
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 16
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 17
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 18
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 19
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 20
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 21
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 22
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 23
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 24
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 25
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 26
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 27
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 28
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 29
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03), // 30
                        (float)(PageSize.A4.Rotate().GetWidth()*0.03) // 31
                }
            ).SetFontSize(4).SetFixedLayout().SetBorder(Border.NO_BORDER);
       

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                int NoOfDays = 0;
                command.CommandText = "SELECT TOP(1) DATEDIFF(d, StartDate, EndDate) + 1 AS NoOfDays FROM dbo.tbl_WPT_PayRunMaster WHERE   (ID = @MasterID)";
                command.CommandType = CommandType.Text;

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        NoOfDays = (int)sqlReader["NoOfDays"];
                    }
                }


                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);              

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                string GroupbyValue = string.Empty;
                string GroupbyFieldName = GroupBy == "Department" ? "DepartmentName" :
                                          GroupBy == "Designation" ? "Designation" :
                                          "";

                int SNo = 1;

                if (string.IsNullOrEmpty(GroupbyFieldName))
                {
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("1")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("2")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("3")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("4")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("5")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("6")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("7")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("8")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("9")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("10")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("11")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("12")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("13")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("14")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("15")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("16")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("17")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("18")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("19")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("20")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("21")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("22")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("23")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("24")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("25")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("26")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("27")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("28")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("29")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("30")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                    pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("31")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                }

                string ATNo = string.Empty;

             
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        //------first check employee changes then add blank column if no of days less then 31
                        if (ATNo != sqlReader["ATEnrollmentNo_Default"].ToString() && !string.IsNullOrEmpty(ATNo) && NoOfDays < 31)
                        {
                            pdftableMain.AddCell(new Cell(1, (31 - NoOfDays) + 1).Add(new Paragraph().Add("-X-")).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                        }

                        if (!string.IsNullOrEmpty(GroupbyFieldName) && GroupbyValue != sqlReader[GroupbyFieldName].ToString())
                        {
                            if (!string.IsNullOrEmpty(GroupbyValue))
                            {
                                //Total
                            }

                            GroupbyValue = sqlReader[GroupbyFieldName].ToString();
                            if (GroupID > 0)
                                pdftableMain.AddCell(new Cell(1, 34).Add(new Paragraph().Add(GroupbyValue)).SetFontSize(4).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));
                            else
                                pdftableMain.AddCell(new Cell(1, 34).Add(new Paragraph().Add(new Link(GroupbyValue, PdfAction.CreateURI(uri + "?rn=" + rn + "&id=" + id + "&datefrom=" + datefrom.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&datetill=" + datetill.Value.ToString("MM/dd/yyyy hh:mm:ss tt") + "&SeekBy=" + SeekBy + "&GroupBy=" + GroupBy + "&OrderBy=" + Orderby + "&GroupID=" + sqlReader[GroupbyFieldName + "ID"].ToString())))).SetFontColor(new DeviceRgb(0, 102, 204)).SetFontSize(4).SetBold().SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("AT No")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Employee Name")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("1")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("2")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("3")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("4")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("5")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("6")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("7")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("8")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("9")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("10")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("11")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("12")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("13")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("14")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("15")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("16")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("17")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("18")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("19")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("20")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("21")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("22")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("23")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("24")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("25")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("26")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("27")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("28")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("29")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("30")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("31")).SetBold().SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));

                            //GroupTotalP = 0; 


                        }


                        if (ATNo != sqlReader["ATEnrollmentNo_Default"].ToString())
                        {                            
                            ATNo = sqlReader["ATEnrollmentNo_Default"].ToString();

                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["ATEnrollmentNo_Default"].ToString())).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmployeeName"].ToString())).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));
                            

                            SNo = SNo + 1;
                        }
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(

                            (string.IsNullOrEmpty(sqlReader["CheckIn"].ToString()) ? " " : ((DateTime)sqlReader["CheckIn"]).ToString("HH:mm:ss"))
                            + "\n" +
                            (string.IsNullOrEmpty(sqlReader["CheckOut"].ToString()) ? " " : ((DateTime)sqlReader["CheckOut"]).ToString("HH:mm:ss"))

                            )).SetFontSize(4).SetBorder(new SolidBorder(0.5f)).SetKeepTogether(true));


                    }
                }

                //group total

                ////----------------------------grand total---------------------------------------------//
                

            }

            page.InsertContent(pdftableMain);
            return page.FinishToGetBytes();
        }

        public List<ReportCallingModel> GetRLPayRunPayment()
        {
            return new List<ReportCallingModel>() {
                new ReportCallingModel()
                { ReportType= EnumReportType.OnlyID,
                ReportName ="Bank Transfer Letter",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                { ReportType= EnumReportType.OnlyID,
                ReportName ="Bank Transfer Letter In Excel Format",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                },
                new ReportCallingModel()
                { ReportType= EnumReportType.OnlyID,
                ReportName ="Bank Transfer Data In Excel",
                GroupBy = null,
                OrderBy = null,
                SeekBy = null
                }
            };
        }

        public async Task<byte[]> GetPDFFilePayRunPaymentAsync(string rn = null, int id = 0, int SerialNoFrom = 0, int SerialNoTill = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", int GroupID = 0, string userName = "")
        {
            if (rn == "Bank Transfer Letter")
            {
                return await Task.Run(() => BankTransferLetter(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Bank Transfer Data In Excel")
            {
                return await Task.Run(() => BankTransferLetterExcelData(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            else if (rn == "Bank Transfer Letter In Excel Format")
            {
                return await Task.Run(() => BankTransferLetterExcelInExcelFormat(id, datefrom, datetill, SeekBy, GroupBy, Orderby, uri, rn, GroupID, userName));
            }
            return Encoding.ASCII.GetBytes("Wrong Parameters");
        }
        private async Task<byte[]> BankTransferLetterExcelInExcelFormat(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            ExcelPackage Ep = new ExcelPackage();

            ExcelWorksheet Sheet = Ep.Workbook.Worksheets.Add("TransferSheet");

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = "Bank Transfer Letter";
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                int row = 1;


                Sheet.Cells[row, 1].Value = "S.No";
                Sheet.Cells[row, 2].Value = "Account Title";
                Sheet.Cells[row, 3].Value = "Account Number";
                Sheet.Cells[row, 4].Value = "Amount";
                Sheet.Cells[row, 5].Value = "Narration";

                int TotalAmount = 0;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        Sheet.Row(row).Height = 18;

                        row++;
                        Sheet.Cells[row, 1].Value = row - 1;
                        Sheet.Cells[row, 2].Value = sqlReader["EmpBankAccountTitle"].ToString();
                        Sheet.Cells[row, 3].Value = sqlReader["EmpBankAccountNo"].ToString();
                        Sheet.Cells[row, 4].Value = Convert.ToInt32(sqlReader["EmpWagePrimary"]);
                        Sheet.Cells[row, 5].Value = "Salary M/O " + ((DateTime)sqlReader["MonthEnd"]).ToString("MMMM-yyyy");

                        TotalAmount += Convert.ToInt32(sqlReader["EmpWagePrimary"]);
                        //Sheet.Column(col + 2).BestFit = true;

                        //Sheet.Cells[row, 1].Value = sqlReader["EmpBankAccountTitle"].ToString();

                        //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountTitle"].ToString())).SetKeepTogether(true));
                        //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountNo"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rs: " + String.Format("{0:n0}", sqlReader["EmpWagePrimary"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                    }
                }

                row++;
                Sheet.Cells[row, 1].Value = "";
                Sheet.Cells[row, 2].Value = "";
                Sheet.Cells[row, 3].Value = "Total";
                Sheet.Cells[row, 4].Value = Convert.ToInt32(TotalAmount);
                Sheet.Cells[row, 5].Value = "";

            }

            Sheet.Cells["A:AZ"].AutoFitColumns();


            return Ep.GetAsByteArray();
        }
        private async Task<byte[]> BankTransferLetterExcelData(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ExcelPackage.LicenseContext = LicenseContext.Commercial;
            ExcelPackage Ep = new ExcelPackage();

            ExcelWorksheet Sheet = Ep.Workbook.Worksheets.Add("TransferSheet");

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = "Bank Transfer Letter";
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                int row = 2;
                int col = 1;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        Sheet.Row(row).Height = 18;

                        string[] AcNoSplitted = sqlReader["EmpBankAccountNo"].ToString().Split('-');

                        col = 1;
                        foreach (string ac in AcNoSplitted)
                        {
                            Sheet.Cells[row, col].Value = Convert.ToInt32(ac);
                            col++;
                        }
                        Sheet.Cells[row, col].Value = 0;

                        Sheet.Cells[row, col + 1].Value = Convert.ToInt32(sqlReader["EmpWagePrimary"]);



                        Sheet.Cells[row, col + 2].Value = "Salary M/O " + ((DateTime)sqlReader["MonthEnd"]).ToString("MMMM-yyyy");

                        Sheet.Column(col + 2).BestFit = true;

                        //Sheet.Cells[row, 1].Value = sqlReader["EmpBankAccountTitle"].ToString();

                        //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountTitle"].ToString())).SetKeepTogether(true));
                        //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountNo"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        //pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rs: " + String.Format("{0:n0}", sqlReader["EmpWagePrimary"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));

                        row++;
                    }
                }

            }

            Sheet.Cells["A:AZ"].AutoFitColumns();


            return Ep.GetAsByteArray();
        }
        private async Task<byte[]> BankTransferLetter(int id = 0, DateTime? datefrom = null, DateTime? datetill = null, string SeekBy = "", string GroupBy = "", string Orderby = "", string uri = "", string rn = "", int GroupID = 0, string userName = "")
        {
            ITPage page = new ITPage(PageSize.LETTER, 25f, 25f, 100f, 80f, null, true, false, false,true);

            /////////////------------------------------table for Detail 8------------------------------////////////////

            Table pdftableMain = new Table(new float[] {
                        (float)(PageSize.LETTER.GetWidth() * 0.10),//S No
                        (float)(PageSize.LETTER.GetWidth() * 0.35),//ATNo
                        (float)(PageSize.LETTER.GetWidth() * 0.25),//Name 
                        (float)(PageSize.LETTER.GetWidth() * 0.20)//Department 
                }
            ).SetFontSize(9).SetFixedLayout().SetBorder(Border.NO_BORDER);

            Paragraph p = new Paragraph();

            DateTime MonthEnd = DateTime.Now;
            string CompanyBankAcNo = "";
            double TotalWage = 0;

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {               

                command.CommandText = "EXECUTE [dbo].[Report_WPT_PayRunDetail] @ReportName,@DateFrom,@DateTill,@MasterID,@SeekBy,@GroupBy,@OrderBy,@GroupID,@UserName ";
                command.CommandType = CommandType.Text;

                var ReportName = command.CreateParameter();
                ReportName.ParameterName = "@ReportName"; ReportName.DbType = DbType.String; ReportName.Value = rn;
                command.Parameters.Add(ReportName);

                var DateFrom = command.CreateParameter();
                DateFrom.ParameterName = "@DateFrom"; DateFrom.DbType = DbType.DateTime; DateFrom.Value = datefrom.HasValue ? datefrom.Value : DateTime.Now;
                command.Parameters.Add(DateFrom);

                var DateTill = command.CreateParameter();
                DateTill.ParameterName = "@DateTill"; DateTill.DbType = DbType.DateTime; DateTill.Value = datetill.HasValue ? datetill.Value : DateTime.Now;
                command.Parameters.Add(DateTill);

                var MasterID = command.CreateParameter();
                MasterID.ParameterName = "@MasterID"; MasterID.DbType = DbType.Int32; MasterID.Value = id;
                command.Parameters.Add(MasterID);

                var seekBy = command.CreateParameter();
                seekBy.ParameterName = "@SeekBy"; seekBy.DbType = DbType.String; seekBy.Value = SeekBy; seekBy.Value = SeekBy ?? "";
                command.Parameters.Add(seekBy);

                var groupBy = command.CreateParameter();
                groupBy.ParameterName = "@GroupBy"; groupBy.DbType = DbType.String; groupBy.Value = GroupBy ?? "";
                command.Parameters.Add(groupBy);

                var orderBy = command.CreateParameter();
                orderBy.ParameterName = "@OrderBy"; orderBy.DbType = DbType.String; orderBy.Value = Orderby ?? "";
                command.Parameters.Add(orderBy);

                var groupID = command.CreateParameter();
                groupID.ParameterName = "@GroupID"; groupID.DbType = DbType.Int32; groupID.Value = GroupID;
                command.Parameters.Add(groupID);

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                bool firstrow = true;
                int SNo = 1;

                await command.Connection.OpenAsync();
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        if (firstrow)
                        {

                            p.SetFontSize(9);
                            p.Add(new Text("To,"))
                                .Add(new Text("The Manager").SetBold());

                            p.Add("\n")
                                .Add(new Text(sqlReader["BankName"].ToString() + " " + sqlReader["BranchName"].ToString() + " " + sqlReader["City"].ToString()));

                            pdftableMain.AddCell(new Cell(1, 4).Add(p).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph().Add(((DateTime)sqlReader["TransactionDate"]).ToString("MMMM dd,yyyy"))).SetTextAlignment(TextAlignment.RIGHT).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

                            MonthEnd = (DateTime)sqlReader["MonthEnd"];
                            CompanyBankAcNo = sqlReader["BankAccountNo"].ToString();

                            //---------------------------empty row that will be filled at the end of reader run-------------------//
                            pdftableMain.AddCell(new Cell(1, 4).Add(new Paragraph()).SetBorder(Border.NO_BORDER).SetKeepTogether(true));



                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("S.No.")).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Account Title")).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Account Number")).SetTextAlignment(TextAlignment.CENTER).SetBold().SetKeepTogether(true));
                            pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Amount")).SetTextAlignment(TextAlignment.RIGHT).SetBold().SetKeepTogether(true));

                            firstrow = false;
                        }


                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(SNo.ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountTitle"].ToString())).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add(sqlReader["EmpBankAccountNo"].ToString())).SetTextAlignment(TextAlignment.CENTER).SetKeepTogether(true));
                        pdftableMain.AddCell(new Cell().Add(new Paragraph().Add("Rs: " + String.Format("{0:n0}", sqlReader["EmpWagePrimary"]) + "/-")).SetTextAlignment(TextAlignment.RIGHT).SetKeepTogether(true));


                        SNo += 1;

                        TotalWage += (double)sqlReader["EmpWagePrimary"];
                    }
                }

            }

            //-----------------------update subject row with information------------------------------//
            p = new Paragraph();
            p.Add(new Text("SUBJECT: ").SetBold())
                .Add(new Text("SALARY M/O ").SetBold().SetUnderline())
                .Add(new Text(MonthEnd.ToString("MMMM-yyyy")).SetBold().SetUnderline())
                .Add("\n")
                .Add("Dear Sir, \n")
                .Add("Kindly transfer the salary for the month of ")
                .Add(new Text(MonthEnd.ToString("MMM-yyyy")))
                .Add(", through debited our A/c # ")
                .Add(CompanyBankAcNo)
                .Add(" amounting Rs.")
                .Add(new Text(String.Format("{0:n0}", TotalWage)).SetBold().SetUnderline())
                .Add("/-")
                .Add("in our staff account maintain with your branch are as under;");

            if (pdftableMain.GetCell(2, 0) != null)
                pdftableMain.GetCell(2, 0).Add(new Paragraph().Add(p));



            pdftableMain.AddCell(new Cell(1, 2).Add(new Paragraph().Add("\n\nPlease transfer at your earliest. \nThanks & Regards \n\n\n\n")).Add(new Paragraph().Add("For " + Rpt_Shared.LicenseTo).SetBorderTop(new SolidBorder(0.5f)).SetTextAlignment(TextAlignment.CENTER)).SetBorder(Border.NO_BORDER).SetKeepTogether(true));

            page.InsertContent(new Cell().Add(pdftableMain).SetBorder(Border.NO_BORDER));
            return page.FinishToGetBytes();
        }

        #endregion
    }
    public class WPTDashboardRepository : IWPTDashboard
    {
        private readonly OreasDbContext db;

        public WPTDashboardRepository(OreasDbContext oreasDbContext)
        {
            this.db = oreasDbContext;
        }

        public async Task<object> GetDashBoardData(string userName = "")
        {
            int PendingLeaves = 0; double LoanBalance = 0;
            List<object> l = new List<object>();

            using (var command = db.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "EXECUTE [dbo].[USP_WPT_DashBoard] @UserName, @QueryName ";
                command.CommandType = CommandType.Text;
                command.CommandTimeout = 0;

                var UserName = command.CreateParameter();
                UserName.ParameterName = "@UserName"; UserName.DbType = DbType.String; UserName.Value = userName;
                command.Parameters.Add(UserName);

                var QueryName = command.CreateParameter();
                QueryName.ParameterName = "@QueryName"; QueryName.DbType = DbType.String; QueryName.Value = "Single";
                command.Parameters.Add(QueryName);

                await command.Connection.OpenAsync();

                using (DbDataReader sqlReader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    while (sqlReader.Read())
                    {
                        PendingLeaves = (int)sqlReader["PendingLeaves"];
                        LoanBalance = (double)sqlReader["LoanBalance"];
                    }
                }


                QueryName.Value = "Comparison";   
                using (DbDataReader sqlReader = command.ExecuteReader())
                {
                    while (sqlReader.Read())
                    {
                        l.Add(
                            new { 
                                MonthStart = (DateTime)sqlReader["MonthStart"],
                                MonthEnd = (DateTime)sqlReader["MonthEnd"],
                                Month = ((DateTime)sqlReader["MonthEnd"]).ToString("MMM-yy"),
                                CalendarYear = (int)sqlReader["CalendarYear"],
                                Employees = (int)sqlReader["Employees"],
                                Wage = (double)sqlReader["Wage"],
                                PresentPercentage = (int)sqlReader["PresentPercentage"],
                                OT = (int)sqlReader["OT"],
                                WD = (int)sqlReader["WD"]
                            }
                            );
                    }
                }

            }
            return new
            {
                Single = new
                {
                    PendingLeaves,
                    LoanBalance
                },
                Comparison = l.ToList()               

            };
        }


    }
}
